package kotlin.text;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Annotations;
import kotlin.Annotations2;
import kotlin.Annotations3;
import kotlin.Annotations8;
import kotlin.Metadata;
import kotlin.Tuples;
import kotlin.Tuples3;
import kotlin.UInt;
import kotlin.ULong;
import kotlin.Unit;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.Iterables11;
import kotlin.collections.MapsKt;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindow3;
import kotlin.jvm.functions.Functions;
import kotlin.jvm.functions.Functions13;
import kotlin.jvm.functions.Functions17;
import kotlin.jvm.functions.Functions2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.random.Random;
import kotlin.ranges.Progressions2;
import kotlin.ranges.Ranges6;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;

/* compiled from: _Strings.kt */
@Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000ö\u0001\n\u0000\n\u0002\u0010\u000b\n\u0002\u0010\r\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010 \n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\b\n\u0002\b\u000f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u000f\n\u0002\u0010\u001f\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0000\n\u0002\b\u0007\n\u0002\u0010\u000f\n\u0002\b\u0004\n\u0002\u0010\u0006\n\u0002\u0010\u0007\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0018\n\u0002\u0018\u0002\n\u0002\b\u001b\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\t\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\"\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a$\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\n\u0010\u0006\u001a\u00020\u0001*\u00020\u0002\u001a$\u0010\u0006\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u0010\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\u00050\b*\u00020\u0002\u001a\u0010\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u00050\n*\u00020\u0002\u001aH\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u001e\u0010\u000f\u001a\u001a\u0012\u0004\u0012\u00020\u0005\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\u00100\u0004H\u0086\bø\u0001\u0000\u001a6\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u00020\u00050\f\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\bø\u0001\u0000\u001aP\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\bø\u0001\u0000\u001aQ\u0010\u0014\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0018\b\u0001\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u00020\u00050\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001ak\u0010\u0014\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u0018\b\u0002\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u0002H\u000e0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0019\u001ac\u0010\u001a\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u0018\b\u0002\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u0002H\u000e0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u001e\u0010\u000f\u001a\u001a\u0012\u0004\u0012\u00020\u0005\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\u00100\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001a6\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\f\"\u0004\b\u0000\u0010\u000e*\u00020\u00022\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0087\bø\u0001\u0000\u001aQ\u0010\u001d\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\u000e\"\u0018\b\u0001\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u00020\u0005\u0012\u0006\b\u0000\u0012\u0002H\u000e0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001a\u001a\u0010\u001e\u001a\b\u0012\u0004\u0012\u00020 0\u001f*\u00020\u00022\u0006\u0010!\u001a\u00020\"H\u0007\u001a4\u0010\u001e\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H#0\u0004H\u0007\u001a\u001a\u0010$\u001a\b\u0012\u0004\u0012\u00020 0\n*\u00020\u00022\u0006\u0010!\u001a\u00020\"H\u0007\u001a4\u0010$\u001a\b\u0012\u0004\u0012\u0002H#0\n\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H#0\u0004H\u0007\u001a\r\u0010%\u001a\u00020\"*\u00020\u0002H\u0087\b\u001a$\u0010%\u001a\u00020\"*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u0012\u0010&\u001a\u00020\u0002*\u00020\u00022\u0006\u0010'\u001a\u00020\"\u001a\u0012\u0010&\u001a\u00020 *\u00020 2\u0006\u0010'\u001a\u00020\"\u001a\u0012\u0010(\u001a\u00020\u0002*\u00020\u00022\u0006\u0010'\u001a\u00020\"\u001a\u0012\u0010(\u001a\u00020 *\u00020 2\u0006\u0010'\u001a\u00020\"\u001a$\u0010)\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u0010)\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u0010*\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u0010*\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a,\u0010+\u001a\u00020\u0005*\u00020\u00022\u0006\u0010,\u001a\u00020\"2\u0012\u0010-\u001a\u000e\u0012\u0004\u0012\u00020\"\u0012\u0004\u0012\u00020\u00050\u0004H\u0087\bø\u0001\u0000\u001a\u001c\u0010.\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0006\u0010,\u001a\u00020\"H\u0087\b¢\u0006\u0002\u0010/\u001a$\u00100\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u00100\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a9\u00101\u001a\u00020\u0002*\u00020\u00022'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000102H\u0086\bø\u0001\u0000\u001a9\u00101\u001a\u00020 *\u00020 2'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000102H\u0086\bø\u0001\u0000\u001aT\u00105\u001a\u0002H6\"\f\b\u0000\u00106*\u000607j\u0002`8*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000102H\u0086\bø\u0001\u0000¢\u0006\u0002\u00109\u001a$\u0010:\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u0010:\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a?\u0010;\u001a\u0002H6\"\f\b\u0000\u00106*\u000607j\u0002`8*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010<\u001a?\u0010=\u001a\u0002H6\"\f\b\u0000\u00106*\u000607j\u0002`8*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010<\u001a+\u0010>\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a+\u0010@\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a\n\u0010A\u001a\u00020\u0005*\u00020\u0002\u001a$\u0010A\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u0011\u0010B\u001a\u0004\u0018\u00010\u0005*\u00020\u0002¢\u0006\u0002\u0010C\u001a+\u0010B\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a6\u0010D\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0018\u0010\u000f\u001a\u0014\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H#0\b0\u0004H\u0086\bø\u0001\u0000\u001aP\u0010E\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022-\u0010\u000f\u001a)\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H#0\b02H\u0087\bø\u0001\u0000¢\u0006\u0002\bF\u001af\u0010G\u001a\u0002H6\"\u0004\b\u0000\u0010#\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62-\u0010\u000f\u001a)\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H#0\b02H\u0087\bø\u0001\u0000¢\u0006\u0004\bI\u0010J\u001aO\u0010K\u001a\u0002H6\"\u0004\b\u0000\u0010#\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62\u0018\u0010\u000f\u001a\u0014\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H#0\b0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010L\u001aL\u0010M\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2'\u0010O\u001a#\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#02H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010Q\u001aa\u0010R\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0SH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010T\u001aL\u0010U\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2'\u0010O\u001a#\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u0002H#02H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010Q\u001aa\u0010V\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u0002H#0SH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010T\u001a$\u0010W\u001a\u00020X*\u00020\u00022\u0012\u0010Y\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020X0\u0004H\u0086\bø\u0001\u0000\u001a9\u0010Z\u001a\u00020X*\u00020\u00022'\u0010Y\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020X02H\u0086\bø\u0001\u0000\u001a,\u0010[\u001a\u00020\u0005*\u00020\u00022\u0006\u0010,\u001a\u00020\"2\u0012\u0010-\u001a\u000e\u0012\u0004\u0012\u00020\"\u0012\u0004\u0012\u00020\u00050\u0004H\u0087\bø\u0001\u0000\u001a\u0019\u0010\\\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0006\u0010,\u001a\u00020\"¢\u0006\u0002\u0010/\u001a<\u0010]\u001a\u0014\u0012\u0004\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u001f0\f\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\bø\u0001\u0000\u001aV\u0010]\u001a\u0014\u0012\u0004\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u000e0\u001f0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\bø\u0001\u0000\u001aU\u0010^\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u001c\b\u0001\u0010\u0015*\u0016\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050_0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001ao\u0010^\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u001c\b\u0002\u0010\u0015*\u0016\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u000e0_0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0019\u001a8\u0010`\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0a\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0014\b\u0004\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0087\bø\u0001\u0000\u001a$\u0010b\u001a\u00020\"*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a$\u0010c\u001a\u00020\"*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\n\u0010d\u001a\u00020\u0005*\u00020\u0002\u001a$\u0010d\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u0011\u0010e\u001a\u0004\u0018\u00010\u0005*\u00020\u0002¢\u0006\u0002\u0010C\u001a+\u0010e\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a0\u0010f\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0086\bø\u0001\u0000\u001aE\u0010g\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022'\u0010\u000f\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#02H\u0086\bø\u0001\u0000\u001aK\u0010h\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\b\b\u0000\u0010#*\u00020i*\u00020\u00022)\u0010\u000f\u001a%\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H#02H\u0086\bø\u0001\u0000\u001ad\u0010j\u001a\u0002H6\"\b\b\u0000\u0010#*\u00020i\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62)\u0010\u000f\u001a%\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H#02H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010J\u001a^\u0010k\u001a\u0002H6\"\u0004\b\u0000\u0010#\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62'\u0010\u000f\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#02H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010J\u001a6\u0010l\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\b\b\u0000\u0010#*\u00020i*\u00020\u00022\u0014\u0010\u000f\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H#0\u0004H\u0086\bø\u0001\u0000\u001aO\u0010m\u001a\u0002H6\"\b\b\u0000\u0010#*\u00020i\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62\u0014\u0010\u000f\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H#0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010L\u001aI\u0010n\u001a\u0002H6\"\u0004\b\u0000\u0010#\"\u0010\b\u0001\u00106*\n\u0012\u0006\b\u0000\u0012\u0002H#0H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H62\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010L\u001a\u0013\u0010o\u001a\u0004\u0018\u00010\u0005*\u00020\u0002H\u0007¢\u0006\u0002\u0010C\u001a;\u0010p\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a;\u0010s\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a9\u0010t\u001a\u0002H#\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010u\u001a$\u0010t\u001a\u00020v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0087\bø\u0001\u0000\u001a$\u0010t\u001a\u00020w*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020w0\u0004H\u0087\bø\u0001\u0000\u001a;\u0010x\u001a\u0004\u0018\u0001H#\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010u\u001a+\u0010x\u001a\u0004\u0018\u00010v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010y\u001a+\u0010x\u001a\u0004\u0018\u00010w*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020w0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010z\u001aK\u0010{\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u0002H#0}j\n\u0012\u0006\b\u0000\u0012\u0002H#`~2\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u007f\u001aN\u0010\u0080\u0001\u001a\u0004\u0018\u0001H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u0002H#0}j\n\u0012\u0006\b\u0000\u0012\u0002H#`~2\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u007f\u001a\u0014\u0010\u0081\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002H\u0007¢\u0006\u0002\u0010C\u001a1\u0010\u0082\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050}j\n\u0012\u0006\b\u0000\u0012\u00020\u0005`~H\u0007¢\u0006\u0003\u0010\u0083\u0001\u001a1\u0010\u0084\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050}j\n\u0012\u0006\b\u0000\u0012\u00020\u0005`~H\u0007¢\u0006\u0003\u0010\u0083\u0001\u001a\u0014\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002H\u0007¢\u0006\u0002\u0010C\u001a<\u0010\u0086\u0001\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a<\u0010\u0087\u0001\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a:\u0010\u0088\u0001\u001a\u0002H#\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010u\u001a%\u0010\u0088\u0001\u001a\u00020v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0087\bø\u0001\u0000\u001a%\u0010\u0088\u0001\u001a\u00020w*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020w0\u0004H\u0087\bø\u0001\u0000\u001a<\u0010\u0089\u0001\u001a\u0004\u0018\u0001H#\"\u000e\b\u0000\u0010#*\b\u0012\u0004\u0012\u0002H#0q*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010u\u001a,\u0010\u0089\u0001\u001a\u0004\u0018\u00010v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010y\u001a,\u0010\u0089\u0001\u001a\u0004\u0018\u00010w*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020w0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010z\u001aL\u0010\u008a\u0001\u001a\u0002H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u0002H#0}j\n\u0012\u0006\b\u0000\u0012\u0002H#`~2\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u007f\u001aN\u0010\u008b\u0001\u001a\u0004\u0018\u0001H#\"\u0004\b\u0000\u0010#*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u0002H#0}j\n\u0012\u0006\b\u0000\u0012\u0002H#`~2\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u007f\u001a\u0014\u0010\u008c\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002H\u0007¢\u0006\u0002\u0010C\u001a1\u0010\u008d\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050}j\n\u0012\u0006\b\u0000\u0012\u00020\u0005`~H\u0007¢\u0006\u0003\u0010\u0083\u0001\u001a1\u0010\u008e\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010|\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050}j\n\u0012\u0006\b\u0000\u0012\u00020\u0005`~H\u0007¢\u0006\u0003\u0010\u0083\u0001\u001a\u000b\u0010\u008f\u0001\u001a\u00020\u0001*\u00020\u0002\u001a%\u0010\u008f\u0001\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a8\u0010\u0090\u0001\u001a\u0003H\u0091\u0001\"\t\b\u0000\u0010\u0091\u0001*\u00020\u0002*\u0003H\u0091\u00012\u0012\u0010Y\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020X0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u0092\u0001\u001aM\u0010\u0093\u0001\u001a\u0003H\u0091\u0001\"\t\b\u0000\u0010\u0091\u0001*\u00020\u0002*\u0003H\u0091\u00012'\u0010Y\u001a#\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020X02H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u0094\u0001\u001a1\u0010\u0095\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00020\u00020\u0010*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a1\u0010\u0095\u0001\u001a\u000e\u0012\u0004\u0012\u00020 \u0012\u0004\u0012\u00020 0\u0010*\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u000e\u0010\u0096\u0001\u001a\u00020\u0005*\u00020\u0002H\u0087\b\u001a\u0017\u0010\u0096\u0001\u001a\u00020\u0005*\u00020\u00022\b\u0010\u0096\u0001\u001a\u00030\u0097\u0001H\u0007\u001a\u0015\u0010\u0098\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002H\u0087\b¢\u0006\u0002\u0010C\u001a\u001f\u0010\u0098\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\b\u0010\u0096\u0001\u001a\u00030\u0097\u0001H\u0007¢\u0006\u0003\u0010\u0099\u0001\u001a:\u0010\u009a\u0001\u001a\u00020\u0005*\u00020\u00022'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000502H\u0086\bø\u0001\u0000\u001aO\u0010\u009b\u0001\u001a\u00020\u0005*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050SH\u0086\bø\u0001\u0000\u001aW\u0010\u009c\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050SH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009d\u0001\u001aB\u0010\u009e\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000502H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009f\u0001\u001a:\u0010 \u0001\u001a\u00020\u0005*\u00020\u00022'\u0010O\u001a#\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u000502H\u0086\bø\u0001\u0000\u001aO\u0010¡\u0001\u001a\u00020\u0005*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u00050SH\u0086\bø\u0001\u0000\u001aW\u0010¢\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u00050SH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009d\u0001\u001aB\u0010£\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022'\u0010O\u001a#\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u000502H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009f\u0001\u001a\u000b\u0010¤\u0001\u001a\u00020\u0002*\u00020\u0002\u001a\u000e\u0010¤\u0001\u001a\u00020 *\u00020 H\u0087\b\u001aT\u0010¥\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2'\u0010O\u001a#\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#02H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¦\u0001\u001ai\u0010§\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0SH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¨\u0001\u001a@\u0010©\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001f*\u00020\u00022'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000502H\u0087\bø\u0001\u0000\u001aU\u0010ª\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001f*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050SH\u0087\bø\u0001\u0000\u001aT\u0010«\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2'\u0010O\u001a#\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#02H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¦\u0001\u001ai\u0010¬\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010N\u001a\u0002H#2<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u0011H#¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H#0SH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¨\u0001\u001a@\u0010\u00ad\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001f*\u00020\u00022'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000502H\u0087\bø\u0001\u0000\u001aU\u0010®\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001f*\u00020\u00022<\u0010O\u001a8\u0012\u0013\u0012\u00110\"¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(,\u0012\u0013\u0012\u00110\u0005¢\u0006\f\b3\u0012\b\b4\u0012\u0004\b\b(P\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050SH\u0087\bø\u0001\u0000\u001a\u000b\u0010¯\u0001\u001a\u00020\u0005*\u00020\u0002\u001a%\u0010¯\u0001\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a\u0012\u0010°\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002¢\u0006\u0002\u0010C\u001a,\u0010°\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010?\u001a\u001a\u0010±\u0001\u001a\u00020\u0002*\u00020\u00022\r\u0010²\u0001\u001a\b\u0012\u0004\u0012\u00020\"0\b\u001a\u0015\u0010±\u0001\u001a\u00020\u0002*\u00020\u00022\b\u0010²\u0001\u001a\u00030³\u0001\u001a\u001d\u0010±\u0001\u001a\u00020 *\u00020 2\r\u0010²\u0001\u001a\b\u0012\u0004\u0012\u00020\"0\bH\u0087\b\u001a\u0015\u0010±\u0001\u001a\u00020 *\u00020 2\b\u0010²\u0001\u001a\u00030³\u0001\u001a%\u0010´\u0001\u001a\u00020\"*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\"0\u0004H\u0086\bø\u0001\u0000\u001a%\u0010µ\u0001\u001a\u00020v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0086\bø\u0001\u0000\u001a+\u0010¶\u0001\u001a\u00020v*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020v0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0003\b·\u0001\u001a+\u0010¶\u0001\u001a\u00020\"*\u00020\u00022\u0012\u0010r\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\"0\u0004H\u0087\bø\u0001\u0000¢\u0006\u0003\b¸\u0001\u001a-\u0010¶\u0001\u001a\u00030¹\u0001*\u00020\u00022\u0013\u0010r\u001a\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030¹\u00010\u0004H\u0087\bø\u0001\u0000¢\u0006\u0003\bº\u0001\u001a3\u0010¶\u0001\u001a\u00030»\u0001*\u00020\u00022\u0013\u0010r\u001a\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030»\u00010\u0004H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\b¼\u0001\u0010½\u0001\u001a3\u0010¶\u0001\u001a\u00030¾\u0001*\u00020\u00022\u0013\u0010r\u001a\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030¾\u00010\u0004H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\b¿\u0001\u0010À\u0001\u001a\u0013\u0010Á\u0001\u001a\u00020\u0002*\u00020\u00022\u0006\u0010'\u001a\u00020\"\u001a\u0013\u0010Á\u0001\u001a\u00020 *\u00020 2\u0006\u0010'\u001a\u00020\"\u001a\u0013\u0010Â\u0001\u001a\u00020\u0002*\u00020\u00022\u0006\u0010'\u001a\u00020\"\u001a\u0013\u0010Â\u0001\u001a\u00020 *\u00020 2\u0006\u0010'\u001a\u00020\"\u001a%\u0010Ã\u0001\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a%\u0010Ã\u0001\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a%\u0010Ä\u0001\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a%\u0010Ä\u0001\u001a\u00020 *\u00020 2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\bø\u0001\u0000\u001a+\u0010Å\u0001\u001a\u0002H6\"\u0010\b\u0000\u00106*\n\u0012\u0006\b\u0000\u0012\u00020\u00050H*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H6¢\u0006\u0003\u0010Æ\u0001\u001a\u001d\u0010Ç\u0001\u001a\u0014\u0012\u0004\u0012\u00020\u00050È\u0001j\t\u0012\u0004\u0012\u00020\u0005`É\u0001*\u00020\u0002\u001a\u0011\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001f*\u00020\u0002\u001a\u0011\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050_*\u00020\u0002\u001a\u0012\u0010Ì\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050Í\u0001*\u00020\u0002\u001a1\u0010Î\u0001\u001a\b\u0012\u0004\u0012\u00020 0\u001f*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\t\b\u0002\u0010Ï\u0001\u001a\u00020\"2\t\b\u0002\u0010Ð\u0001\u001a\u00020\u0001H\u0007\u001aK\u0010Î\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\t\b\u0002\u0010Ï\u0001\u001a\u00020\"2\t\b\u0002\u0010Ð\u0001\u001a\u00020\u00012\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H#0\u0004H\u0007\u001a1\u0010Ñ\u0001\u001a\b\u0012\u0004\u0012\u00020 0\n*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\t\b\u0002\u0010Ï\u0001\u001a\u00020\"2\t\b\u0002\u0010Ð\u0001\u001a\u00020\u0001H\u0007\u001aK\u0010Ñ\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\n\"\u0004\b\u0000\u0010#*\u00020\u00022\u0006\u0010!\u001a\u00020\"2\t\b\u0002\u0010Ï\u0001\u001a\u00020\"2\t\b\u0002\u0010Ð\u0001\u001a\u00020\u00012\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H#0\u0004H\u0007\u001a\u0018\u0010Ò\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050Ó\u00010\b*\u00020\u0002\u001a)\u0010Ô\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00100\u001f*\u00020\u00022\u0007\u0010Õ\u0001\u001a\u00020\u0002H\u0086\u0004\u001a`\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u000e0\u001f\"\u0004\b\u0000\u0010\u000e*\u00020\u00022\u0007\u0010Õ\u0001\u001a\u00020\u000228\u0010\u000f\u001a4\u0012\u0014\u0012\u00120\u0005¢\u0006\r\b3\u0012\t\b4\u0012\u0005\b\b(Ö\u0001\u0012\u0014\u0012\u00120\u0005¢\u0006\r\b3\u0012\t\b4\u0012\u0005\b\b(×\u0001\u0012\u0004\u0012\u0002H\u000e02H\u0086\bø\u0001\u0000\u001a\u001f\u0010Ø\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00100\u001f*\u00020\u0002H\u0007\u001aW\u0010Ø\u0001\u001a\b\u0012\u0004\u0012\u0002H#0\u001f\"\u0004\b\u0000\u0010#*\u00020\u000228\u0010\u000f\u001a4\u0012\u0014\u0012\u00120\u0005¢\u0006\r\b3\u0012\t\b4\u0012\u0005\b\b(Ö\u0001\u0012\u0014\u0012\u00120\u0005¢\u0006\r\b3\u0012\t\b4\u0012\u0005\b\b(×\u0001\u0012\u0004\u0012\u0002H#02H\u0087\bø\u0001\u0000\u0082\u0002\u000b\n\u0005\b\u009920\u0001\n\u0002\b\u0019¨\u0006Ù\u0001"}, m17d2 = {"all", "", "", "predicate", "Lkotlin/Function1;", "", "any", "asIterable", "", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "chunked", "", "", "size", "", "R", "chunkedSequence", "count", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAtOrElse", "index", "defaultValue", "elementAtOrNull", "(Ljava/lang/CharSequence;I)Ljava/lang/Character;", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Appendable;", "filterNot", "filterNotTo", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "filterTo", "find", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Character;", "findLast", "first", "firstOrNull", "(Ljava/lang/CharSequence;)Ljava/lang/Character;", "flatMap", "flatMapIndexed", "flatMapIndexedIterable", "flatMapIndexedTo", "", "flatMapIndexedIterableTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "flatMapTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "fold", "initial", "operation", "acc", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "foldRightIndexed", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOfFirst", "indexOfLast", "last", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "maxBy", "", "selector", "maxByOrNull", "maxOf", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Comparable;", "", "", "maxOfOrNull", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "maxOfWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/CharSequence;Ljava/util/Comparator;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "maxOfWithOrNull", "maxOrNull", "maxWith", "(Ljava/lang/CharSequence;Ljava/util/Comparator;)Ljava/lang/Character;", "maxWithOrNull", "min", "minBy", "minByOrNull", "minOf", "minOfOrNull", "minOfWith", "minOfWithOrNull", "minOrNull", "minWith", "minWithOrNull", "none", "onEach", "S", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/CharSequence;", "onEachIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/CharSequence;", "partition", "random", "Lkotlin/random/Random;", "randomOrNull", "(Ljava/lang/CharSequence;Lkotlin/random/Random;)Ljava/lang/Character;", "reduce", "reduceIndexed", "reduceIndexedOrNull", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Character;", "reduceOrNull", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Character;", "reduceRight", "reduceRightIndexed", "reduceRightIndexedOrNull", "reduceRightOrNull", "reversed", "runningFold", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "runningFoldIndexed", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "scanReduce", "scanReduceIndexed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sumBy", "sumByDouble", "sumOf", "sumOfDouble", "sumOfInt", "", "sumOfLong", "Lkotlin/UInt;", "sumOfUInt", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)I", "Lkotlin/ULong;", "sumOfULong", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)J", "take", "takeLast", "takeLastWhile", "takeWhile", "toCollection", "(Ljava/lang/CharSequence;Ljava/util/Collection;)Ljava/util/Collection;", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toSet", "", "windowed", "step", "partialWindows", "windowedSequence", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, m18k = 5, m19mv = {1, 4, 0}, m21xi = 1, m22xs = "kotlin/text/StringsKt")
/* renamed from: kotlin.text.StringsKt___StringsKt */
/* loaded from: classes.dex */
public class _Strings extends _StringsJvm {
    private static final char elementAtOrElse(CharSequence $this$elementAtOrElse, int index, Functions2<? super Integer, Character> functions2) {
        return (index < 0 || index > StringsKt.getLastIndex($this$elementAtOrElse)) ? functions2.invoke(Integer.valueOf(index)).charValue() : $this$elementAtOrElse.charAt(index);
    }

    private static final Character elementAtOrNull(CharSequence $this$elementAtOrNull, int index) {
        return StringsKt.getOrNull($this$elementAtOrNull, index);
    }

    private static final Character find(CharSequence $this$find, Functions2<? super Character, Boolean> functions2) {
        for (int i = 0; i < $this$find.length(); i++) {
            char element$iv = $this$find.charAt(i);
            if (functions2.invoke(Character.valueOf(element$iv)).booleanValue()) {
                return Character.valueOf(element$iv);
            }
        }
        return null;
    }

    private static final Character findLast(CharSequence $this$findLast, Functions2<? super Character, Boolean> functions2) {
        char element$iv;
        int index$iv = $this$findLast.length();
        do {
            index$iv--;
            if (index$iv >= 0) {
                element$iv = $this$findLast.charAt(index$iv);
            } else {
                return null;
            }
        } while (!functions2.invoke(Character.valueOf(element$iv)).booleanValue());
        return Character.valueOf(element$iv);
    }

    public static final char first(CharSequence first) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        if (first.length() == 0) {
            throw new NoSuchElementException("Char sequence is empty.");
        }
        return first.charAt(0);
    }

    public static final char first(CharSequence first, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < first.length(); i++) {
            char element = first.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                return element;
            }
        }
        throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
    }

    public static final Character firstOrNull(CharSequence firstOrNull) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        if (firstOrNull.length() == 0) {
            return null;
        }
        return Character.valueOf(firstOrNull.charAt(0));
    }

    public static final Character firstOrNull(CharSequence firstOrNull, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < firstOrNull.length(); i++) {
            char element = firstOrNull.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                return Character.valueOf(element);
            }
        }
        return null;
    }

    private static final char getOrElse(CharSequence $this$getOrElse, int index, Functions2<? super Integer, Character> functions2) {
        return (index < 0 || index > StringsKt.getLastIndex($this$getOrElse)) ? functions2.invoke(Integer.valueOf(index)).charValue() : $this$getOrElse.charAt(index);
    }

    public static final Character getOrNull(CharSequence getOrNull, int index) {
        Intrinsics.checkNotNullParameter(getOrNull, "$this$getOrNull");
        if (index < 0 || index > StringsKt.getLastIndex(getOrNull)) {
            return null;
        }
        return Character.valueOf(getOrNull.charAt(index));
    }

    public static final int indexOfFirst(CharSequence indexOfFirst, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = indexOfFirst.length();
        for (int index = 0; index < length; index++) {
            if (predicate.invoke(Character.valueOf(indexOfFirst.charAt(index))).booleanValue()) {
                return index;
            }
        }
        return -1;
    }

    public static final int indexOfLast(CharSequence indexOfLast, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int index = indexOfLast.length() - 1; index >= 0; index--) {
            if (predicate.invoke(Character.valueOf(indexOfLast.charAt(index))).booleanValue()) {
                return index;
            }
        }
        return -1;
    }

    public static final char last(CharSequence last) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        if (last.length() == 0) {
            throw new NoSuchElementException("Char sequence is empty.");
        }
        return last.charAt(StringsKt.getLastIndex(last));
    }

    public static final char last(CharSequence last, Functions2<? super Character, Boolean> predicate) {
        char element;
        Intrinsics.checkNotNullParameter(last, "$this$last");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = last.length();
        do {
            index--;
            if (index >= 0) {
                element = last.charAt(index);
            } else {
                throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
            }
        } while (!predicate.invoke(Character.valueOf(element)).booleanValue());
        return element;
    }

    public static final Character lastOrNull(CharSequence lastOrNull) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        if (lastOrNull.length() == 0) {
            return null;
        }
        return Character.valueOf(lastOrNull.charAt(lastOrNull.length() - 1));
    }

    public static final Character lastOrNull(CharSequence lastOrNull, Functions2<? super Character, Boolean> predicate) {
        char element;
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = lastOrNull.length();
        do {
            index--;
            if (index >= 0) {
                element = lastOrNull.charAt(index);
            } else {
                return null;
            }
        } while (!predicate.invoke(Character.valueOf(element)).booleanValue());
        return Character.valueOf(element);
    }

    private static final char random(CharSequence $this$random) {
        return StringsKt.random($this$random, Random.INSTANCE);
    }

    public static final char random(CharSequence random, Random random2) {
        Intrinsics.checkNotNullParameter(random, "$this$random");
        Intrinsics.checkNotNullParameter(random2, "random");
        if (random.length() == 0) {
            throw new NoSuchElementException("Char sequence is empty.");
        }
        return random.charAt(random2.nextInt(random.length()));
    }

    private static final Character randomOrNull(CharSequence $this$randomOrNull) {
        return StringsKt.randomOrNull($this$randomOrNull, Random.INSTANCE);
    }

    public static final Character randomOrNull(CharSequence randomOrNull, Random random) {
        Intrinsics.checkNotNullParameter(randomOrNull, "$this$randomOrNull");
        Intrinsics.checkNotNullParameter(random, "random");
        if (randomOrNull.length() == 0) {
            return null;
        }
        return Character.valueOf(randomOrNull.charAt(random.nextInt(randomOrNull.length())));
    }

    public static final char single(CharSequence single) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        int length = single.length();
        if (length == 0) {
            throw new NoSuchElementException("Char sequence is empty.");
        }
        if (length == 1) {
            return single.charAt(0);
        }
        throw new IllegalArgumentException("Char sequence has more than one element.");
    }

    public static final char single(CharSequence single, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Character single2 = (Character) null;
        boolean found = false;
        for (int i = 0; i < single.length(); i++) {
            char element = single.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                if (found) {
                    throw new IllegalArgumentException("Char sequence contains more than one matching element.");
                }
                single2 = Character.valueOf(element);
                found = true;
            }
        }
        if (!found) {
            throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
        }
        if (single2 != null) {
            return single2.charValue();
        }
        throw new NullPointerException("null cannot be cast to non-null type kotlin.Char");
    }

    public static final Character singleOrNull(CharSequence singleOrNull) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        if (singleOrNull.length() == 1) {
            return Character.valueOf(singleOrNull.charAt(0));
        }
        return null;
    }

    public static final Character singleOrNull(CharSequence singleOrNull, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Character single = (Character) null;
        boolean found = false;
        for (int i = 0; i < singleOrNull.length(); i++) {
            char element = singleOrNull.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                if (found) {
                    return null;
                }
                single = Character.valueOf(element);
                found = true;
            }
        }
        if (!found) {
            return null;
        }
        return single;
    }

    public static final CharSequence drop(CharSequence drop, int n) {
        Intrinsics.checkNotNullParameter(drop, "$this$drop");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
        }
        return drop.subSequence(RangesKt.coerceAtMost(n, drop.length()), drop.length());
    }

    public static final String drop(String drop, int n) {
        Intrinsics.checkNotNullParameter(drop, "$this$drop");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
        }
        String strSubstring = drop.substring(RangesKt.coerceAtMost(n, drop.length()));
        Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.String).substring(startIndex)");
        return strSubstring;
    }

    public static final CharSequence dropLast(CharSequence dropLast, int n) {
        Intrinsics.checkNotNullParameter(dropLast, "$this$dropLast");
        if (n >= 0) {
            return StringsKt.take(dropLast, RangesKt.coerceAtLeast(dropLast.length() - n, 0));
        }
        throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
    }

    public static final String dropLast(String dropLast, int n) {
        Intrinsics.checkNotNullParameter(dropLast, "$this$dropLast");
        if (n >= 0) {
            return StringsKt.take(dropLast, RangesKt.coerceAtLeast(dropLast.length() - n, 0));
        }
        throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
    }

    public static final CharSequence dropLastWhile(CharSequence dropLastWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropLastWhile, "$this$dropLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int index = StringsKt.getLastIndex(dropLastWhile); index >= 0; index--) {
            if (!predicate.invoke(Character.valueOf(dropLastWhile.charAt(index))).booleanValue()) {
                return dropLastWhile.subSequence(0, index + 1);
            }
        }
        return "";
    }

    public static final String dropLastWhile(String dropLastWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropLastWhile, "$this$dropLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int index = StringsKt.getLastIndex(dropLastWhile); index >= 0; index--) {
            if (!predicate.invoke(Character.valueOf(dropLastWhile.charAt(index))).booleanValue()) {
                String strSubstring = dropLastWhile.substring(0, index + 1);
                Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.Strin…ing(startIndex, endIndex)");
                return strSubstring;
            }
        }
        return "";
    }

    public static final CharSequence dropWhile(CharSequence dropWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropWhile, "$this$dropWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = dropWhile.length();
        for (int index = 0; index < length; index++) {
            if (!predicate.invoke(Character.valueOf(dropWhile.charAt(index))).booleanValue()) {
                return dropWhile.subSequence(index, dropWhile.length());
            }
        }
        return "";
    }

    public static final String dropWhile(String dropWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropWhile, "$this$dropWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = dropWhile.length();
        for (int index = 0; index < length; index++) {
            if (!predicate.invoke(Character.valueOf(dropWhile.charAt(index))).booleanValue()) {
                String strSubstring = dropWhile.substring(index);
                Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.String).substring(startIndex)");
                return strSubstring;
            }
        }
        return "";
    }

    public static final CharSequence filter(CharSequence filter, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filter, "$this$filter");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Appendable destination$iv = new StringBuilder();
        int length = filter.length();
        for (int index$iv = 0; index$iv < length; index$iv++) {
            char element$iv = filter.charAt(index$iv);
            if (predicate.invoke(Character.valueOf(element$iv)).booleanValue()) {
                destination$iv.append(element$iv);
            }
        }
        return (CharSequence) destination$iv;
    }

    public static final String filter(String filter, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filter, "$this$filter");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        String $this$filterTo$iv = filter;
        Appendable destination$iv = new StringBuilder();
        int length = $this$filterTo$iv.length();
        for (int index$iv = 0; index$iv < length; index$iv++) {
            char element$iv = $this$filterTo$iv.charAt(index$iv);
            if (predicate.invoke(Character.valueOf(element$iv)).booleanValue()) {
                destination$iv.append(element$iv);
            }
        }
        String string = ((StringBuilder) destination$iv).toString();
        Intrinsics.checkNotNullExpressionValue(string, "filterTo(StringBuilder(), predicate).toString()");
        return string;
    }

    public static final CharSequence filterIndexed(CharSequence filterIndexed, Functions13<? super Integer, ? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Appendable destination$iv = new StringBuilder();
        int index$iv$iv = 0;
        int i = 0;
        while (i < filterIndexed.length()) {
            char item$iv$iv = filterIndexed.charAt(i);
            int index$iv$iv2 = index$iv$iv + 1;
            if (predicate.invoke(Integer.valueOf(index$iv$iv), Character.valueOf(item$iv$iv)).booleanValue()) {
                destination$iv.append(item$iv$iv);
            }
            i++;
            index$iv$iv = index$iv$iv2;
        }
        return (CharSequence) destination$iv;
    }

    public static final String filterIndexed(String filterIndexed, Functions13<? super Integer, ? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        String $this$filterIndexedTo$iv = filterIndexed;
        Appendable destination$iv = new StringBuilder();
        int index$iv$iv = 0;
        int i = 0;
        while (i < $this$filterIndexedTo$iv.length()) {
            char item$iv$iv = $this$filterIndexedTo$iv.charAt(i);
            int index$iv$iv2 = index$iv$iv + 1;
            if (predicate.invoke(Integer.valueOf(index$iv$iv), Character.valueOf(item$iv$iv)).booleanValue()) {
                destination$iv.append(item$iv$iv);
            }
            i++;
            index$iv$iv = index$iv$iv2;
        }
        String string = ((StringBuilder) destination$iv).toString();
        Intrinsics.checkNotNullExpressionValue(string, "filterIndexedTo(StringBu…(), predicate).toString()");
        return string;
    }

    public static final <C extends Appendable> C filterIndexedTo(CharSequence filterIndexedTo, C destination, Functions13<? super Integer, ? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index$iv = 0;
        int i = 0;
        while (i < filterIndexedTo.length()) {
            char item$iv = filterIndexedTo.charAt(i);
            int index$iv2 = index$iv + 1;
            if (predicate.invoke(Integer.valueOf(index$iv), Character.valueOf(item$iv)).booleanValue()) {
                destination.append(item$iv);
            }
            i++;
            index$iv = index$iv2;
        }
        return destination;
    }

    public static final CharSequence filterNot(CharSequence filterNot, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterNot, "$this$filterNot");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Appendable destination$iv = new StringBuilder();
        for (int i = 0; i < filterNot.length(); i++) {
            char element$iv = filterNot.charAt(i);
            if (!predicate.invoke(Character.valueOf(element$iv)).booleanValue()) {
                destination$iv.append(element$iv);
            }
        }
        return (CharSequence) destination$iv;
    }

    public static final String filterNot(String filterNot, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterNot, "$this$filterNot");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        String $this$filterNotTo$iv = filterNot;
        Appendable destination$iv = new StringBuilder();
        for (int i = 0; i < $this$filterNotTo$iv.length(); i++) {
            char element$iv = $this$filterNotTo$iv.charAt(i);
            if (!predicate.invoke(Character.valueOf(element$iv)).booleanValue()) {
                destination$iv.append(element$iv);
            }
        }
        String string = ((StringBuilder) destination$iv).toString();
        Intrinsics.checkNotNullExpressionValue(string, "filterNotTo(StringBuilder(), predicate).toString()");
        return string;
    }

    public static final <C extends Appendable> C filterNotTo(CharSequence filterNotTo, C destination, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterNotTo, "$this$filterNotTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < filterNotTo.length(); i++) {
            char element = filterNotTo.charAt(i);
            if (!predicate.invoke(Character.valueOf(element)).booleanValue()) {
                destination.append(element);
            }
        }
        return destination;
    }

    public static final <C extends Appendable> C filterTo(CharSequence filterTo, C destination, Functions2<? super Character, Boolean> predicate) throws IOException {
        Intrinsics.checkNotNullParameter(filterTo, "$this$filterTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = filterTo.length();
        for (int index = 0; index < length; index++) {
            char element = filterTo.charAt(index);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                destination.append(element);
            }
        }
        return destination;
    }

    public static final CharSequence slice(CharSequence slice, Ranges6 indices) {
        Intrinsics.checkNotNullParameter(slice, "$this$slice");
        Intrinsics.checkNotNullParameter(indices, "indices");
        return indices.isEmpty() ? "" : StringsKt.subSequence(slice, indices);
    }

    public static final String slice(String slice, Ranges6 indices) {
        Intrinsics.checkNotNullParameter(slice, "$this$slice");
        Intrinsics.checkNotNullParameter(indices, "indices");
        return indices.isEmpty() ? "" : StringsKt.substring(slice, indices);
    }

    public static final CharSequence slice(CharSequence slice, Iterable<Integer> indices) {
        Intrinsics.checkNotNullParameter(slice, "$this$slice");
        Intrinsics.checkNotNullParameter(indices, "indices");
        int size = CollectionsKt.collectionSizeOrDefault(indices, 10);
        if (size == 0) {
            return "";
        }
        StringBuilder result = new StringBuilder(size);
        Iterator<Integer> it = indices.iterator();
        while (it.hasNext()) {
            int i = it.next().intValue();
            result.append(slice.charAt(i));
        }
        return result;
    }

    private static final String slice(String $this$slice, Iterable<Integer> iterable) {
        if ($this$slice != null) {
            return StringsKt.slice((CharSequence) $this$slice, iterable).toString();
        }
        throw new NullPointerException("null cannot be cast to non-null type kotlin.CharSequence");
    }

    public static final CharSequence take(CharSequence take, int n) {
        Intrinsics.checkNotNullParameter(take, "$this$take");
        if (n >= 0) {
            return take.subSequence(0, RangesKt.coerceAtMost(n, take.length()));
        }
        throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
    }

    public static final String take(String take, int n) {
        Intrinsics.checkNotNullParameter(take, "$this$take");
        if (n >= 0) {
            String strSubstring = take.substring(0, RangesKt.coerceAtMost(n, take.length()));
            Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.Strin…ing(startIndex, endIndex)");
            return strSubstring;
        }
        throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
    }

    public static final CharSequence takeLast(CharSequence takeLast, int n) {
        Intrinsics.checkNotNullParameter(takeLast, "$this$takeLast");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
        }
        int length = takeLast.length();
        return takeLast.subSequence(length - RangesKt.coerceAtMost(n, length), length);
    }

    public static final String takeLast(String takeLast, int n) {
        Intrinsics.checkNotNullParameter(takeLast, "$this$takeLast");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested character count " + n + " is less than zero.").toString());
        }
        int length = takeLast.length();
        String strSubstring = takeLast.substring(length - RangesKt.coerceAtMost(n, length));
        Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.String).substring(startIndex)");
        return strSubstring;
    }

    public static final CharSequence takeLastWhile(CharSequence takeLastWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeLastWhile, "$this$takeLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int index = StringsKt.getLastIndex(takeLastWhile); index >= 0; index--) {
            if (!predicate.invoke(Character.valueOf(takeLastWhile.charAt(index))).booleanValue()) {
                return takeLastWhile.subSequence(index + 1, takeLastWhile.length());
            }
        }
        return takeLastWhile.subSequence(0, takeLastWhile.length());
    }

    public static final String takeLastWhile(String takeLastWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeLastWhile, "$this$takeLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int index = StringsKt.getLastIndex(takeLastWhile); index >= 0; index--) {
            if (!predicate.invoke(Character.valueOf(takeLastWhile.charAt(index))).booleanValue()) {
                String strSubstring = takeLastWhile.substring(index + 1);
                Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.String).substring(startIndex)");
                return strSubstring;
            }
        }
        return takeLastWhile;
    }

    public static final CharSequence takeWhile(CharSequence takeWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeWhile, "$this$takeWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = takeWhile.length();
        for (int index = 0; index < length; index++) {
            if (!predicate.invoke(Character.valueOf(takeWhile.charAt(index))).booleanValue()) {
                return takeWhile.subSequence(0, index);
            }
        }
        return takeWhile.subSequence(0, takeWhile.length());
    }

    public static final String takeWhile(String takeWhile, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeWhile, "$this$takeWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int length = takeWhile.length();
        for (int index = 0; index < length; index++) {
            if (!predicate.invoke(Character.valueOf(takeWhile.charAt(index))).booleanValue()) {
                String strSubstring = takeWhile.substring(0, index);
                Intrinsics.checkNotNullExpressionValue(strSubstring, "(this as java.lang.Strin…ing(startIndex, endIndex)");
                return strSubstring;
            }
        }
        return takeWhile;
    }

    public static final CharSequence reversed(CharSequence reversed) {
        Intrinsics.checkNotNullParameter(reversed, "$this$reversed");
        StringBuilder sbReverse = new StringBuilder(reversed).reverse();
        Intrinsics.checkNotNullExpressionValue(sbReverse, "StringBuilder(this).reverse()");
        return sbReverse;
    }

    private static final String reversed(String $this$reversed) {
        if ($this$reversed != null) {
            return StringsKt.reversed((CharSequence) $this$reversed).toString();
        }
        throw new NullPointerException("null cannot be cast to non-null type kotlin.CharSequence");
    }

    public static final <K, V> Map<K, V> associate(CharSequence associate, Functions2<? super Character, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associate, "$this$associate");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(associate.length()), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (int i = 0; i < associate.length(); i++) {
            char element$iv = associate.charAt(i);
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(Character.valueOf(element$iv));
            destination$iv.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination$iv;
    }

    public static final <K> Map<K, Character> associateBy(CharSequence associateBy, Functions2<? super Character, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(associateBy.length()), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (int i = 0; i < associateBy.length(); i++) {
            char element$iv = associateBy.charAt(i);
            destination$iv.put(keySelector.invoke(Character.valueOf(element$iv)), Character.valueOf(element$iv));
        }
        return destination$iv;
    }

    public static final <K, V> Map<K, V> associateBy(CharSequence associateBy, Functions2<? super Character, ? extends K> keySelector, Functions2<? super Character, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(associateBy.length()), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (int i = 0; i < associateBy.length(); i++) {
            char element$iv = associateBy.charAt(i);
            destination$iv.put(keySelector.invoke(Character.valueOf(element$iv)), valueTransform.invoke(Character.valueOf(element$iv)));
        }
        return destination$iv;
    }

    public static final <K, M extends Map<? super K, ? super Character>> M associateByTo(CharSequence associateByTo, M destination, Functions2<? super Character, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (int i = 0; i < associateByTo.length(); i++) {
            char element = associateByTo.charAt(i);
            destination.put(keySelector.invoke(Character.valueOf(element)), Character.valueOf(element));
        }
        return destination;
    }

    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(CharSequence associateByTo, M destination, Functions2<? super Character, ? extends K> keySelector, Functions2<? super Character, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (int i = 0; i < associateByTo.length(); i++) {
            char element = associateByTo.charAt(i);
            destination.put(keySelector.invoke(Character.valueOf(element)), valueTransform.invoke(Character.valueOf(element)));
        }
        return destination;
    }

    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(CharSequence associateTo, M destination, Functions2<? super Character, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associateTo, "$this$associateTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (int i = 0; i < associateTo.length(); i++) {
            char element = associateTo.charAt(i);
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(Character.valueOf(element));
            destination.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination;
    }

    public static final <V> Map<Character, V> associateWith(CharSequence associateWith, Functions2<? super Character, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWith, "$this$associateWith");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        LinkedHashMap result = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(RangesKt.coerceAtMost(associateWith.length(), 128)), 16));
        for (int i = 0; i < associateWith.length(); i++) {
            char element$iv = associateWith.charAt(i);
            result.put(Character.valueOf(element$iv), valueSelector.invoke(Character.valueOf(element$iv)));
        }
        return result;
    }

    public static final <V, M extends Map<? super Character, ? super V>> M associateWithTo(CharSequence associateWithTo, M destination, Functions2<? super Character, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWithTo, "$this$associateWithTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        for (int i = 0; i < associateWithTo.length(); i++) {
            char element = associateWithTo.charAt(i);
            destination.put(Character.valueOf(element), valueSelector.invoke(Character.valueOf(element)));
        }
        return destination;
    }

    public static final <C extends Collection<? super Character>> C toCollection(CharSequence toCollection, C destination) {
        Intrinsics.checkNotNullParameter(toCollection, "$this$toCollection");
        Intrinsics.checkNotNullParameter(destination, "destination");
        for (int i = 0; i < toCollection.length(); i++) {
            char item = toCollection.charAt(i);
            destination.add(Character.valueOf(item));
        }
        return destination;
    }

    public static final HashSet<Character> toHashSet(CharSequence toHashSet) {
        Intrinsics.checkNotNullParameter(toHashSet, "$this$toHashSet");
        return (HashSet) StringsKt.toCollection(toHashSet, new HashSet(MapsKt.mapCapacity(RangesKt.coerceAtMost(toHashSet.length(), 128))));
    }

    public static final List<Character> toList(CharSequence toList) {
        Intrinsics.checkNotNullParameter(toList, "$this$toList");
        int length = toList.length();
        if (length == 0) {
            return CollectionsKt.emptyList();
        }
        if (length == 1) {
            return CollectionsKt.listOf(Character.valueOf(toList.charAt(0)));
        }
        return StringsKt.toMutableList(toList);
    }

    public static final List<Character> toMutableList(CharSequence toMutableList) {
        Intrinsics.checkNotNullParameter(toMutableList, "$this$toMutableList");
        return (List) StringsKt.toCollection(toMutableList, new ArrayList(toMutableList.length()));
    }

    public static final Set<Character> toSet(CharSequence toSet) {
        Intrinsics.checkNotNullParameter(toSet, "$this$toSet");
        int length = toSet.length();
        if (length == 0) {
            return SetsKt.emptySet();
        }
        if (length == 1) {
            return SetsKt.setOf(Character.valueOf(toSet.charAt(0)));
        }
        return (Set) StringsKt.toCollection(toSet, new LinkedHashSet(MapsKt.mapCapacity(RangesKt.coerceAtMost(toSet.length(), 128))));
    }

    public static final <R> List<R> flatMap(CharSequence flatMap, Functions2<? super Character, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (int i = 0; i < flatMap.length(); i++) {
            char element$iv = flatMap.charAt(i);
            Iterable list$iv = transform.invoke(Character.valueOf(element$iv));
            CollectionsKt.addAll(destination$iv, list$iv);
        }
        return (List) destination$iv;
    }

    private static final <R> List<R> flatMapIndexedIterable(CharSequence $this$flatMapIndexed, Functions13<? super Integer, ? super Character, ? extends Iterable<? extends R>> functions13) {
        ArrayList arrayList = new ArrayList();
        int i = 0;
        for (int i2 = 0; i2 < $this$flatMapIndexed.length(); i2++) {
            char cCharAt = $this$flatMapIndexed.charAt(i2);
            Integer numValueOf = Integer.valueOf(i);
            i++;
            CollectionsKt.addAll(arrayList, functions13.invoke(numValueOf, Character.valueOf(cCharAt)));
        }
        return arrayList;
    }

    private static final <R, C extends Collection<? super R>> C flatMapIndexedIterableTo(CharSequence $this$flatMapIndexedTo, C c, Functions13<? super Integer, ? super Character, ? extends Iterable<? extends R>> functions13) {
        int index = 0;
        for (int i = 0; i < $this$flatMapIndexedTo.length(); i++) {
            char element = $this$flatMapIndexedTo.charAt(i);
            Integer numValueOf = Integer.valueOf(index);
            index++;
            Iterable list = functions13.invoke(numValueOf, Character.valueOf(element));
            CollectionsKt.addAll(c, list);
        }
        return c;
    }

    public static final <R, C extends Collection<? super R>> C flatMapTo(CharSequence flatMapTo, C destination, Functions2<? super Character, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (int i = 0; i < flatMapTo.length(); i++) {
            char element = flatMapTo.charAt(i);
            Iterable list = transform.invoke(Character.valueOf(element));
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    public static final <K> Map<K, List<Character>> groupBy(CharSequence groupBy, Functions2<? super Character, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (int i = 0; i < groupBy.length(); i++) {
            char element$iv = groupBy.charAt(i);
            K kInvoke = keySelector.invoke(Character.valueOf(element$iv));
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(Character.valueOf(element$iv));
        }
        return destination$iv;
    }

    public static final <K, V> Map<K, List<V>> groupBy(CharSequence groupBy, Functions2<? super Character, ? extends K> keySelector, Functions2<? super Character, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Map destination$iv = new LinkedHashMap();
        for (int i = 0; i < groupBy.length(); i++) {
            char element$iv = groupBy.charAt(i);
            K kInvoke = keySelector.invoke(Character.valueOf(element$iv));
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(valueTransform.invoke(Character.valueOf(element$iv)));
        }
        return destination$iv;
    }

    public static final <K, M extends Map<? super K, List<Character>>> M groupByTo(CharSequence groupByTo, M destination, Functions2<? super Character, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (int i = 0; i < groupByTo.length(); i++) {
            char element = groupByTo.charAt(i);
            K kInvoke = keySelector.invoke(Character.valueOf(element));
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(Character.valueOf(element));
        }
        return destination;
    }

    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(CharSequence groupByTo, M destination, Functions2<? super Character, ? extends K> keySelector, Functions2<? super Character, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (int i = 0; i < groupByTo.length(); i++) {
            char element = groupByTo.charAt(i);
            K kInvoke = keySelector.invoke(Character.valueOf(element));
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(valueTransform.invoke(Character.valueOf(element)));
        }
        return destination;
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\f\n\u0002\b\u0004\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00028\u00000\u0001J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0002H\u0016¢\u0006\u0002\u0010\u0005J\u000e\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00020\u0007H\u0016¨\u0006\b"}, m17d2 = {"kotlin/text/StringsKt___StringsKt$groupingBy$1", "Lkotlin/collections/Grouping;", "", "keyOf", "element", "(C)Ljava/lang/Object;", "sourceIterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$groupingBy$1 */
    public static final class C05251<K> implements Grouping<Character, K> {
        final /* synthetic */ Functions2 $keySelector;
        final /* synthetic */ CharSequence $this_groupingBy;

        public C05251(CharSequence $receiver, Functions2 $captured_local_variable$1) {
            $receiver = $receiver;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.collections.Grouping
        public /* bridge */ /* synthetic */ Object keyOf(Character ch) {
            return keyOf(ch.charValue());
        }

        @Override // kotlin.collections.Grouping
        public Iterator<Character> sourceIterator() {
            return StringsKt.iterator($receiver);
        }

        public K keyOf(char element) {
            return (K) $captured_local_variable$1.invoke(Character.valueOf(element));
        }
    }

    public static final <K> Grouping<Character, K> groupingBy(CharSequence groupingBy, Functions2<? super Character, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupingBy, "$this$groupingBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new Grouping<Character, K>() { // from class: kotlin.text.StringsKt___StringsKt.groupingBy.1
            final /* synthetic */ Functions2 $keySelector;
            final /* synthetic */ CharSequence $this_groupingBy;

            public C05251(CharSequence groupingBy2, Functions2 keySelector2) {
                $receiver = groupingBy2;
                $captured_local_variable$1 = keySelector2;
            }

            @Override // kotlin.collections.Grouping
            public /* bridge */ /* synthetic */ Object keyOf(Character ch) {
                return keyOf(ch.charValue());
            }

            @Override // kotlin.collections.Grouping
            public Iterator<Character> sourceIterator() {
                return StringsKt.iterator($receiver);
            }

            public K keyOf(char element) {
                return (K) $captured_local_variable$1.invoke(Character.valueOf(element));
            }
        };
    }

    public static final <R> List<R> map(CharSequence map, Functions2<? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(map, "$this$map");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList(map.length());
        for (int i = 0; i < map.length(); i++) {
            char item$iv = map.charAt(i);
            destination$iv.add(transform.invoke(Character.valueOf(item$iv)));
        }
        return (List) destination$iv;
    }

    public static final <R> List<R> mapIndexed(CharSequence mapIndexed, Functions13<? super Integer, ? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexed, "$this$mapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList(mapIndexed.length());
        int index$iv = 0;
        for (int i = 0; i < mapIndexed.length(); i++) {
            char item$iv = mapIndexed.charAt(i);
            Integer numValueOf = Integer.valueOf(index$iv);
            index$iv++;
            destination$iv.add(transform.invoke(numValueOf, Character.valueOf(item$iv)));
        }
        return (List) destination$iv;
    }

    public static final <R> List<R> mapIndexedNotNull(CharSequence mapIndexedNotNull, Functions13<? super Integer, ? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        int index$iv$iv = 0;
        int i = 0;
        while (i < mapIndexedNotNull.length()) {
            char item$iv$iv = mapIndexedNotNull.charAt(i);
            int index$iv$iv2 = index$iv$iv + 1;
            R rInvoke = transform.invoke(Integer.valueOf(index$iv$iv), Character.valueOf(item$iv$iv));
            if (rInvoke != null) {
                destination$iv.add(rInvoke);
            }
            i++;
            index$iv$iv = index$iv$iv2;
        }
        return (List) destination$iv;
    }

    public static final <R, C extends Collection<? super R>> C mapIndexedNotNullTo(CharSequence mapIndexedNotNullTo, C destination, Functions13<? super Integer, ? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index$iv = 0;
        int i = 0;
        while (i < mapIndexedNotNullTo.length()) {
            char item$iv = mapIndexedNotNullTo.charAt(i);
            int index$iv2 = index$iv + 1;
            R rInvoke = transform.invoke(Integer.valueOf(index$iv), Character.valueOf(item$iv));
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
            i++;
            index$iv = index$iv2;
        }
        return destination;
    }

    public static final <R, C extends Collection<? super R>> C mapIndexedTo(CharSequence mapIndexedTo, C destination, Functions13<? super Integer, ? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        for (int i = 0; i < mapIndexedTo.length(); i++) {
            char item = mapIndexedTo.charAt(i);
            Integer numValueOf = Integer.valueOf(index);
            index++;
            destination.add(transform.invoke(numValueOf, Character.valueOf(item)));
        }
        return destination;
    }

    public static final <R> List<R> mapNotNull(CharSequence mapNotNull, Functions2<? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNull, "$this$mapNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (int i = 0; i < mapNotNull.length(); i++) {
            char element$iv$iv = mapNotNull.charAt(i);
            R rInvoke = transform.invoke(Character.valueOf(element$iv$iv));
            if (rInvoke != null) {
                destination$iv.add(rInvoke);
            }
        }
        return (List) destination$iv;
    }

    public static final <R, C extends Collection<? super R>> C mapNotNullTo(CharSequence mapNotNullTo, C destination, Functions2<? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (int i = 0; i < mapNotNullTo.length(); i++) {
            char element$iv = mapNotNullTo.charAt(i);
            R rInvoke = transform.invoke(Character.valueOf(element$iv));
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
        }
        return destination;
    }

    public static final <R, C extends Collection<? super R>> C mapTo(CharSequence mapTo, C destination, Functions2<? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapTo, "$this$mapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (int i = 0; i < mapTo.length(); i++) {
            char item = mapTo.charAt(i);
            destination.add(transform.invoke(Character.valueOf(item)));
        }
        return destination;
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0000\n\u0002\u0010(\n\u0002\u0010\f\n\u0000\u0010\u0000\u001a\b\u0012\u0004\u0012\u00020\u00020\u0001H\n¢\u0006\u0002\b\u0003"}, m17d2 = {"<anonymous>", "", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$withIndex$1 */
    static final class C05291 extends Lambda implements Functions<Iterator<? extends Character>> {
        final /* synthetic */ CharSequence $this_withIndex;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05291(CharSequence charSequence) {
            super(0);
            charSequence = charSequence;
        }

        @Override // kotlin.jvm.functions.Functions
        public final Iterator<? extends Character> invoke() {
            return StringsKt.iterator(charSequence);
        }
    }

    public static final Iterable<IndexedValue<Character>> withIndex(CharSequence withIndex) {
        Intrinsics.checkNotNullParameter(withIndex, "$this$withIndex");
        return new Iterables11(new Functions<Iterator<? extends Character>>() { // from class: kotlin.text.StringsKt___StringsKt.withIndex.1
            final /* synthetic */ CharSequence $this_withIndex;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            C05291(CharSequence withIndex2) {
                super(0);
                charSequence = withIndex2;
            }

            @Override // kotlin.jvm.functions.Functions
            public final Iterator<? extends Character> invoke() {
                return StringsKt.iterator(charSequence);
            }
        });
    }

    public static final boolean all(CharSequence all, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(all, "$this$all");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < all.length(); i++) {
            char element = all.charAt(i);
            if (!predicate.invoke(Character.valueOf(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(CharSequence any) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        return !(any.length() == 0);
    }

    public static final boolean any(CharSequence any, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < any.length(); i++) {
            char element = any.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    private static final int count(CharSequence $this$count) {
        return $this$count.length();
    }

    public static final int count(CharSequence count, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(count, "$this$count");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int count2 = 0;
        for (int i = 0; i < count.length(); i++) {
            char element = count.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                count2++;
            }
        }
        return count2;
    }

    public static final <R> R fold(CharSequence fold, R r, Functions13<? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(fold, "$this$fold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        for (int i = 0; i < fold.length(); i++) {
            rInvoke = operation.invoke(rInvoke, Character.valueOf(fold.charAt(i)));
        }
        return rInvoke;
    }

    public static final <R> R foldIndexed(CharSequence foldIndexed, R r, Functions17<? super Integer, ? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldIndexed, "$this$foldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int i = 0;
        R rInvoke = r;
        for (int i2 = 0; i2 < foldIndexed.length(); i2++) {
            char cCharAt = foldIndexed.charAt(i2);
            Integer numValueOf = Integer.valueOf(i);
            i++;
            rInvoke = operation.invoke(numValueOf, rInvoke, Character.valueOf(cCharAt));
        }
        return rInvoke;
    }

    public static final <R> R foldRight(CharSequence foldRight, R r, Functions13<? super Character, ? super R, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldRight, "$this$foldRight");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        for (int lastIndex = StringsKt.getLastIndex(foldRight); lastIndex >= 0; lastIndex--) {
            rInvoke = operation.invoke(Character.valueOf(foldRight.charAt(lastIndex)), rInvoke);
        }
        return rInvoke;
    }

    public static final <R> R foldRightIndexed(CharSequence foldRightIndexed, R r, Functions17<? super Integer, ? super Character, ? super R, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldRightIndexed, "$this$foldRightIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        for (int lastIndex = StringsKt.getLastIndex(foldRightIndexed); lastIndex >= 0; lastIndex--) {
            rInvoke = operation.invoke(Integer.valueOf(lastIndex), Character.valueOf(foldRightIndexed.charAt(lastIndex)), rInvoke);
        }
        return rInvoke;
    }

    public static final void forEach(CharSequence forEach, Functions2<? super Character, Unit> action) {
        Intrinsics.checkNotNullParameter(forEach, "$this$forEach");
        Intrinsics.checkNotNullParameter(action, "action");
        for (int i = 0; i < forEach.length(); i++) {
            char element = forEach.charAt(i);
            action.invoke(Character.valueOf(element));
        }
    }

    public static final void forEachIndexed(CharSequence forEachIndexed, Functions13<? super Integer, ? super Character, Unit> action) {
        Intrinsics.checkNotNullParameter(forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index = 0;
        for (int i = 0; i < forEachIndexed.length(); i++) {
            char item = forEachIndexed.charAt(i);
            Integer numValueOf = Integer.valueOf(index);
            index++;
            action.invoke(numValueOf, Character.valueOf(item));
        }
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final Character max(CharSequence max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return StringsKt.maxOrNull(max);
    }

    @Annotations(message = "Use maxByOrNull instead.", replaceWith = @Annotations8(expression = "maxByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <R extends Comparable<? super R>> Character maxBy(CharSequence maxBy, Functions2<? super Character, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxBy, "$this$maxBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int i$iv = 1;
        if (maxBy.length() == 0) {
            return null;
        }
        char maxElem$iv = maxBy.charAt(0);
        int lastIndex$iv = StringsKt.getLastIndex(maxBy);
        if (lastIndex$iv == 0) {
            return Character.valueOf(maxElem$iv);
        }
        Comparable maxValue$iv = selector.invoke(Character.valueOf(maxElem$iv));
        if (1 <= lastIndex$iv) {
            while (true) {
                char e$iv = maxBy.charAt(i$iv);
                R rInvoke = selector.invoke(Character.valueOf(e$iv));
                if (maxValue$iv.compareTo(rInvoke) < 0) {
                    maxElem$iv = e$iv;
                    maxValue$iv = rInvoke;
                }
                if (i$iv == lastIndex$iv) {
                    break;
                }
                i$iv++;
            }
        }
        return Character.valueOf(maxElem$iv);
    }

    public static final <R extends Comparable<? super R>> Character maxByOrNull(CharSequence maxByOrNull, Functions2<? super Character, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxByOrNull, "$this$maxByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int i = 1;
        if (maxByOrNull.length() == 0) {
            return null;
        }
        char maxElem = maxByOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(maxByOrNull);
        if (lastIndex == 0) {
            return Character.valueOf(maxElem);
        }
        Comparable maxValue = selector.invoke(Character.valueOf(maxElem));
        if (1 <= lastIndex) {
            while (true) {
                char e = maxByOrNull.charAt(i);
                R rInvoke = selector.invoke(Character.valueOf(e));
                if (maxValue.compareTo(rInvoke) < 0) {
                    maxElem = e;
                    maxValue = rInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(maxElem);
    }

    private static final double maxOf(CharSequence $this$maxOf, Functions2<? super Character, Double> functions2) {
        int i = 1;
        if ($this$maxOf.length() == 0) {
            throw new NoSuchElementException();
        }
        double maxValue = functions2.invoke(Character.valueOf($this$maxOf.charAt(0))).doubleValue();
        int lastIndex = StringsKt.getLastIndex($this$maxOf);
        if (1 <= lastIndex) {
            while (true) {
                double v = functions2.invoke(Character.valueOf($this$maxOf.charAt(i))).doubleValue();
                maxValue = Math.max(maxValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return maxValue;
    }

    /* renamed from: maxOf */
    private static final float m1315maxOf(CharSequence $this$maxOf, Functions2<? super Character, Float> functions2) {
        int i = 1;
        if ($this$maxOf.length() == 0) {
            throw new NoSuchElementException();
        }
        float maxValue = functions2.invoke(Character.valueOf($this$maxOf.charAt(0))).floatValue();
        int lastIndex = StringsKt.getLastIndex($this$maxOf);
        if (1 <= lastIndex) {
            while (true) {
                float v = functions2.invoke(Character.valueOf($this$maxOf.charAt(i))).floatValue();
                maxValue = Math.max(maxValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return maxValue;
    }

    /* renamed from: maxOf */
    private static final <R extends Comparable<? super R>> R m1316maxOf(CharSequence $this$maxOf, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if ($this$maxOf.length() == 0) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke(Character.valueOf($this$maxOf.charAt(0)));
        int lastIndex = StringsKt.getLastIndex($this$maxOf);
        if (1 <= lastIndex) {
            while (true) {
                R rInvoke2 = functions2.invoke(Character.valueOf($this$maxOf.charAt(i)));
                if (rInvoke.compareTo(rInvoke2) < 0) {
                    rInvoke = rInvoke2;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    /* renamed from: maxOfOrNull */
    private static final Double m1317maxOfOrNull(CharSequence $this$maxOfOrNull, Functions2<? super Character, Double> functions2) {
        int i = 1;
        if ($this$maxOfOrNull.length() == 0) {
            return null;
        }
        double maxValue = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(0))).doubleValue();
        int lastIndex = StringsKt.getLastIndex($this$maxOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                double v = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(i))).doubleValue();
                maxValue = Math.max(maxValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Double.valueOf(maxValue);
    }

    /* renamed from: maxOfOrNull */
    private static final Float m1318maxOfOrNull(CharSequence $this$maxOfOrNull, Functions2<? super Character, Float> functions2) {
        int i = 1;
        if ($this$maxOfOrNull.length() == 0) {
            return null;
        }
        float maxValue = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(0))).floatValue();
        int lastIndex = StringsKt.getLastIndex($this$maxOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                float v = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(i))).floatValue();
                maxValue = Math.max(maxValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Float.valueOf(maxValue);
    }

    private static final <R extends Comparable<? super R>> R maxOfOrNull(CharSequence $this$maxOfOrNull, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if ($this$maxOfOrNull.length() == 0) {
            return null;
        }
        R rInvoke = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(0)));
        int lastIndex = StringsKt.getLastIndex($this$maxOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                R rInvoke2 = functions2.invoke(Character.valueOf($this$maxOfOrNull.charAt(i)));
                if (rInvoke.compareTo(rInvoke2) < 0) {
                    rInvoke = rInvoke2;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    private static final <R> R maxOfWith(CharSequence charSequence, Comparator<? super R> comparator, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if (charSequence.length() == 0) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(0)));
        int lastIndex = StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                Object objInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(i)));
                if (comparator.compare(rInvoke, objInvoke) < 0) {
                    rInvoke = (R) objInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    private static final <R> R maxOfWithOrNull(CharSequence charSequence, Comparator<? super R> comparator, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        R rInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(0)));
        int lastIndex = StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                Object objInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(i)));
                if (comparator.compare(rInvoke, objInvoke) < 0) {
                    rInvoke = (R) objInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    public static final Character maxOrNull(CharSequence maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        int i = 1;
        if (maxOrNull.length() == 0) {
            return null;
        }
        char max = maxOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(maxOrNull);
        if (1 <= lastIndex) {
            while (true) {
                char e = maxOrNull.charAt(i);
                if (Intrinsics.compare((int) max, (int) e) < 0) {
                    max = e;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(max);
    }

    @Annotations(message = "Use maxWithOrNull instead.", replaceWith = @Annotations8(expression = "maxWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final Character maxWith(CharSequence maxWith, Comparator<? super Character> comparator) {
        Intrinsics.checkNotNullParameter(maxWith, "$this$maxWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return StringsKt.maxWithOrNull(maxWith, comparator);
    }

    public static final Character maxWithOrNull(CharSequence maxWithOrNull, Comparator<? super Character> comparator) {
        Intrinsics.checkNotNullParameter(maxWithOrNull, "$this$maxWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        int i = 1;
        if (maxWithOrNull.length() == 0) {
            return null;
        }
        char max = maxWithOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(maxWithOrNull);
        if (1 <= lastIndex) {
            while (true) {
                char e = maxWithOrNull.charAt(i);
                if (comparator.compare(Character.valueOf(max), Character.valueOf(e)) < 0) {
                    max = e;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(max);
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final Character min(CharSequence min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return StringsKt.minOrNull(min);
    }

    @Annotations(message = "Use minByOrNull instead.", replaceWith = @Annotations8(expression = "minByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <R extends Comparable<? super R>> Character minBy(CharSequence minBy, Functions2<? super Character, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minBy, "$this$minBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int i$iv = 1;
        if (minBy.length() == 0) {
            return null;
        }
        char minElem$iv = minBy.charAt(0);
        int lastIndex$iv = StringsKt.getLastIndex(minBy);
        if (lastIndex$iv == 0) {
            return Character.valueOf(minElem$iv);
        }
        Comparable minValue$iv = selector.invoke(Character.valueOf(minElem$iv));
        if (1 <= lastIndex$iv) {
            while (true) {
                char e$iv = minBy.charAt(i$iv);
                R rInvoke = selector.invoke(Character.valueOf(e$iv));
                if (minValue$iv.compareTo(rInvoke) > 0) {
                    minElem$iv = e$iv;
                    minValue$iv = rInvoke;
                }
                if (i$iv == lastIndex$iv) {
                    break;
                }
                i$iv++;
            }
        }
        return Character.valueOf(minElem$iv);
    }

    public static final <R extends Comparable<? super R>> Character minByOrNull(CharSequence minByOrNull, Functions2<? super Character, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minByOrNull, "$this$minByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int i = 1;
        if (minByOrNull.length() == 0) {
            return null;
        }
        char minElem = minByOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(minByOrNull);
        if (lastIndex == 0) {
            return Character.valueOf(minElem);
        }
        Comparable minValue = selector.invoke(Character.valueOf(minElem));
        if (1 <= lastIndex) {
            while (true) {
                char e = minByOrNull.charAt(i);
                R rInvoke = selector.invoke(Character.valueOf(e));
                if (minValue.compareTo(rInvoke) > 0) {
                    minElem = e;
                    minValue = rInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(minElem);
    }

    private static final double minOf(CharSequence $this$minOf, Functions2<? super Character, Double> functions2) {
        int i = 1;
        if ($this$minOf.length() == 0) {
            throw new NoSuchElementException();
        }
        double minValue = functions2.invoke(Character.valueOf($this$minOf.charAt(0))).doubleValue();
        int lastIndex = StringsKt.getLastIndex($this$minOf);
        if (1 <= lastIndex) {
            while (true) {
                double v = functions2.invoke(Character.valueOf($this$minOf.charAt(i))).doubleValue();
                minValue = Math.min(minValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return minValue;
    }

    /* renamed from: minOf */
    private static final float m1319minOf(CharSequence $this$minOf, Functions2<? super Character, Float> functions2) {
        int i = 1;
        if ($this$minOf.length() == 0) {
            throw new NoSuchElementException();
        }
        float minValue = functions2.invoke(Character.valueOf($this$minOf.charAt(0))).floatValue();
        int lastIndex = StringsKt.getLastIndex($this$minOf);
        if (1 <= lastIndex) {
            while (true) {
                float v = functions2.invoke(Character.valueOf($this$minOf.charAt(i))).floatValue();
                minValue = Math.min(minValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return minValue;
    }

    /* renamed from: minOf */
    private static final <R extends Comparable<? super R>> R m1320minOf(CharSequence $this$minOf, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if ($this$minOf.length() == 0) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke(Character.valueOf($this$minOf.charAt(0)));
        int lastIndex = StringsKt.getLastIndex($this$minOf);
        if (1 <= lastIndex) {
            while (true) {
                R rInvoke2 = functions2.invoke(Character.valueOf($this$minOf.charAt(i)));
                if (rInvoke.compareTo(rInvoke2) > 0) {
                    rInvoke = rInvoke2;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    /* renamed from: minOfOrNull */
    private static final Double m1321minOfOrNull(CharSequence $this$minOfOrNull, Functions2<? super Character, Double> functions2) {
        int i = 1;
        if ($this$minOfOrNull.length() == 0) {
            return null;
        }
        double minValue = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(0))).doubleValue();
        int lastIndex = StringsKt.getLastIndex($this$minOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                double v = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(i))).doubleValue();
                minValue = Math.min(minValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Double.valueOf(minValue);
    }

    /* renamed from: minOfOrNull */
    private static final Float m1322minOfOrNull(CharSequence $this$minOfOrNull, Functions2<? super Character, Float> functions2) {
        int i = 1;
        if ($this$minOfOrNull.length() == 0) {
            return null;
        }
        float minValue = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(0))).floatValue();
        int lastIndex = StringsKt.getLastIndex($this$minOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                float v = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(i))).floatValue();
                minValue = Math.min(minValue, v);
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Float.valueOf(minValue);
    }

    private static final <R extends Comparable<? super R>> R minOfOrNull(CharSequence $this$minOfOrNull, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if ($this$minOfOrNull.length() == 0) {
            return null;
        }
        R rInvoke = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(0)));
        int lastIndex = StringsKt.getLastIndex($this$minOfOrNull);
        if (1 <= lastIndex) {
            while (true) {
                R rInvoke2 = functions2.invoke(Character.valueOf($this$minOfOrNull.charAt(i)));
                if (rInvoke.compareTo(rInvoke2) > 0) {
                    rInvoke = rInvoke2;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    private static final <R> R minOfWith(CharSequence charSequence, Comparator<? super R> comparator, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if (charSequence.length() == 0) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(0)));
        int lastIndex = StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                Object objInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(i)));
                if (comparator.compare(rInvoke, objInvoke) > 0) {
                    rInvoke = (R) objInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    private static final <R> R minOfWithOrNull(CharSequence charSequence, Comparator<? super R> comparator, Functions2<? super Character, ? extends R> functions2) {
        int i = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        R rInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(0)));
        int lastIndex = StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                Object objInvoke = functions2.invoke(Character.valueOf(charSequence.charAt(i)));
                if (comparator.compare(rInvoke, objInvoke) > 0) {
                    rInvoke = (R) objInvoke;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return rInvoke;
    }

    public static final Character minOrNull(CharSequence minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        int i = 1;
        if (minOrNull.length() == 0) {
            return null;
        }
        char min = minOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(minOrNull);
        if (1 <= lastIndex) {
            while (true) {
                char e = minOrNull.charAt(i);
                if (Intrinsics.compare((int) min, (int) e) > 0) {
                    min = e;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(min);
    }

    @Annotations(message = "Use minWithOrNull instead.", replaceWith = @Annotations8(expression = "minWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final Character minWith(CharSequence minWith, Comparator<? super Character> comparator) {
        Intrinsics.checkNotNullParameter(minWith, "$this$minWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return StringsKt.minWithOrNull(minWith, comparator);
    }

    public static final Character minWithOrNull(CharSequence minWithOrNull, Comparator<? super Character> comparator) {
        Intrinsics.checkNotNullParameter(minWithOrNull, "$this$minWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        int i = 1;
        if (minWithOrNull.length() == 0) {
            return null;
        }
        char min = minWithOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(minWithOrNull);
        if (1 <= lastIndex) {
            while (true) {
                char e = minWithOrNull.charAt(i);
                if (comparator.compare(Character.valueOf(min), Character.valueOf(e)) > 0) {
                    min = e;
                }
                if (i == lastIndex) {
                    break;
                }
                i++;
            }
        }
        return Character.valueOf(min);
    }

    public static final boolean none(CharSequence none) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        return none.length() == 0;
    }

    public static final boolean none(CharSequence none, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (int i = 0; i < none.length(); i++) {
            char element = none.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <S extends CharSequence> S onEach(S onEach, Functions2<? super Character, Unit> action) {
        Intrinsics.checkNotNullParameter(onEach, "$this$onEach");
        Intrinsics.checkNotNullParameter(action, "action");
        for (int i = 0; i < onEach.length(); i++) {
            char element = onEach.charAt(i);
            action.invoke(Character.valueOf(element));
        }
        return onEach;
    }

    public static final <S extends CharSequence> S onEachIndexed(S onEachIndexed, Functions13<? super Integer, ? super Character, Unit> action) {
        Intrinsics.checkNotNullParameter(onEachIndexed, "$this$onEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index$iv = 0;
        for (int i = 0; i < onEachIndexed.length(); i++) {
            char item$iv = onEachIndexed.charAt(i);
            Integer numValueOf = Integer.valueOf(index$iv);
            index$iv++;
            action.invoke(numValueOf, Character.valueOf(item$iv));
        }
        return onEachIndexed;
    }

    public static final char reduce(CharSequence reduce, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduce, "$this$reduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = 1;
        if (reduce.length() == 0) {
            throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char accumulator = reduce.charAt(0);
        int lastIndex = StringsKt.getLastIndex(reduce);
        if (1 <= lastIndex) {
            while (true) {
                accumulator = operation.invoke(Character.valueOf(accumulator), Character.valueOf(reduce.charAt(index))).charValue();
                if (index == lastIndex) {
                    break;
                }
                index++;
            }
        }
        return accumulator;
    }

    public static final char reduceIndexed(CharSequence reduceIndexed, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = 1;
        if (reduceIndexed.length() == 0) {
            throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char accumulator = reduceIndexed.charAt(0);
        int lastIndex = StringsKt.getLastIndex(reduceIndexed);
        if (1 <= lastIndex) {
            while (true) {
                accumulator = operation.invoke(Integer.valueOf(index), Character.valueOf(accumulator), Character.valueOf(reduceIndexed.charAt(index))).charValue();
                if (index == lastIndex) {
                    break;
                }
                index++;
            }
        }
        return accumulator;
    }

    public static final Character reduceIndexedOrNull(CharSequence reduceIndexedOrNull, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexedOrNull, "$this$reduceIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = 1;
        if (reduceIndexedOrNull.length() == 0) {
            return null;
        }
        char accumulator = reduceIndexedOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(reduceIndexedOrNull);
        if (1 <= lastIndex) {
            while (true) {
                accumulator = operation.invoke(Integer.valueOf(index), Character.valueOf(accumulator), Character.valueOf(reduceIndexedOrNull.charAt(index))).charValue();
                if (index == lastIndex) {
                    break;
                }
                index++;
            }
        }
        return Character.valueOf(accumulator);
    }

    public static final Character reduceOrNull(CharSequence reduceOrNull, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceOrNull, "$this$reduceOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = 1;
        if (reduceOrNull.length() == 0) {
            return null;
        }
        char accumulator = reduceOrNull.charAt(0);
        int lastIndex = StringsKt.getLastIndex(reduceOrNull);
        if (1 <= lastIndex) {
            while (true) {
                accumulator = operation.invoke(Character.valueOf(accumulator), Character.valueOf(reduceOrNull.charAt(index))).charValue();
                if (index == lastIndex) {
                    break;
                }
                index++;
            }
        }
        return Character.valueOf(accumulator);
    }

    public static final char reduceRight(CharSequence reduceRight, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceRight, "$this$reduceRight");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = StringsKt.getLastIndex(reduceRight);
        if (index < 0) {
            throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char accumulator = reduceRight.charAt(index);
        for (int index2 = index - 1; index2 >= 0; index2--) {
            accumulator = operation.invoke(Character.valueOf(reduceRight.charAt(index2)), Character.valueOf(accumulator)).charValue();
        }
        return accumulator;
    }

    public static final char reduceRightIndexed(CharSequence reduceRightIndexed, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceRightIndexed, "$this$reduceRightIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = StringsKt.getLastIndex(reduceRightIndexed);
        if (index < 0) {
            throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char accumulator = reduceRightIndexed.charAt(index);
        for (int index2 = index - 1; index2 >= 0; index2--) {
            accumulator = operation.invoke(Integer.valueOf(index2), Character.valueOf(reduceRightIndexed.charAt(index2)), Character.valueOf(accumulator)).charValue();
        }
        return accumulator;
    }

    public static final Character reduceRightIndexedOrNull(CharSequence reduceRightIndexedOrNull, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceRightIndexedOrNull, "$this$reduceRightIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = StringsKt.getLastIndex(reduceRightIndexedOrNull);
        if (index < 0) {
            return null;
        }
        char accumulator = reduceRightIndexedOrNull.charAt(index);
        for (int index2 = index - 1; index2 >= 0; index2--) {
            accumulator = operation.invoke(Integer.valueOf(index2), Character.valueOf(reduceRightIndexedOrNull.charAt(index2)), Character.valueOf(accumulator)).charValue();
        }
        return Character.valueOf(accumulator);
    }

    public static final Character reduceRightOrNull(CharSequence reduceRightOrNull, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(reduceRightOrNull, "$this$reduceRightOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int index = StringsKt.getLastIndex(reduceRightOrNull);
        if (index < 0) {
            return null;
        }
        char accumulator = reduceRightOrNull.charAt(index);
        for (int index2 = index - 1; index2 >= 0; index2--) {
            accumulator = operation.invoke(Character.valueOf(reduceRightOrNull.charAt(index2)), Character.valueOf(accumulator)).charValue();
        }
        return Character.valueOf(accumulator);
    }

    public static final <R> List<R> runningFold(CharSequence runningFold, R r, Functions13<? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFold, "$this$runningFold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (runningFold.length() == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result = new ArrayList(runningFold.length() + 1);
        result.add(r);
        Object accumulator = r;
        for (int i = 0; i < runningFold.length(); i++) {
            char element = runningFold.charAt(i);
            accumulator = operation.invoke(accumulator, Character.valueOf(element));
            result.add(accumulator);
        }
        return result;
    }

    public static final <R> List<R> runningFoldIndexed(CharSequence runningFoldIndexed, R r, Functions17<? super Integer, ? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFoldIndexed, "$this$runningFoldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (runningFoldIndexed.length() == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result = new ArrayList(runningFoldIndexed.length() + 1);
        result.add(r);
        Object accumulator = r;
        int length = runningFoldIndexed.length();
        for (int index = 0; index < length; index++) {
            accumulator = operation.invoke(Integer.valueOf(index), accumulator, Character.valueOf(runningFoldIndexed.charAt(index)));
            result.add(accumulator);
        }
        return result;
    }

    public static final List<Character> runningReduce(CharSequence runningReduce, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(runningReduce, "$this$runningReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (runningReduce.length() == 0) {
            return CollectionsKt.emptyList();
        }
        char accumulator = runningReduce.charAt(0);
        ArrayList result = new ArrayList(runningReduce.length());
        result.add(Character.valueOf(accumulator));
        int length = runningReduce.length();
        for (int index = 1; index < length; index++) {
            accumulator = operation.invoke(Character.valueOf(accumulator), Character.valueOf(runningReduce.charAt(index))).charValue();
            result.add(Character.valueOf(accumulator));
        }
        return result;
    }

    public static final List<Character> runningReduceIndexed(CharSequence runningReduceIndexed, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(runningReduceIndexed, "$this$runningReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (runningReduceIndexed.length() == 0) {
            return CollectionsKt.emptyList();
        }
        char accumulator = runningReduceIndexed.charAt(0);
        ArrayList result = new ArrayList(runningReduceIndexed.length());
        result.add(Character.valueOf(accumulator));
        int length = runningReduceIndexed.length();
        for (int index = 1; index < length; index++) {
            accumulator = operation.invoke(Integer.valueOf(index), Character.valueOf(accumulator), Character.valueOf(runningReduceIndexed.charAt(index))).charValue();
            result.add(Character.valueOf(accumulator));
        }
        return result;
    }

    public static final <R> List<R> scan(CharSequence scan, R r, Functions13<? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scan, "$this$scan");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (scan.length() == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result$iv = new ArrayList(scan.length() + 1);
        result$iv.add(r);
        Object accumulator$iv = r;
        for (int i = 0; i < scan.length(); i++) {
            char element$iv = scan.charAt(i);
            accumulator$iv = operation.invoke(accumulator$iv, Character.valueOf(element$iv));
            result$iv.add(accumulator$iv);
        }
        return result$iv;
    }

    public static final <R> List<R> scanIndexed(CharSequence scanIndexed, R r, Functions17<? super Integer, ? super R, ? super Character, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scanIndexed, "$this$scanIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (scanIndexed.length() == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result$iv = new ArrayList(scanIndexed.length() + 1);
        result$iv.add(r);
        Object accumulator$iv = r;
        int length = scanIndexed.length();
        for (int index$iv = 0; index$iv < length; index$iv++) {
            accumulator$iv = operation.invoke(Integer.valueOf(index$iv), accumulator$iv, Character.valueOf(scanIndexed.charAt(index$iv)));
            result$iv.add(accumulator$iv);
        }
        return result$iv;
    }

    @Annotations(level = Annotations3.ERROR, message = "Use runningReduce instead.", replaceWith = @Annotations8(expression = "runningReduce(operation)", imports = {}))
    public static final List<Character> scanReduce(CharSequence scanReduce, Functions13<? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(scanReduce, "$this$scanReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (scanReduce.length() == 0) {
            return CollectionsKt.emptyList();
        }
        char accumulator$iv = scanReduce.charAt(0);
        ArrayList result$iv = new ArrayList(scanReduce.length());
        result$iv.add(Character.valueOf(accumulator$iv));
        int length = scanReduce.length();
        for (int index$iv = 1; index$iv < length; index$iv++) {
            accumulator$iv = operation.invoke(Character.valueOf(accumulator$iv), Character.valueOf(scanReduce.charAt(index$iv))).charValue();
            result$iv.add(Character.valueOf(accumulator$iv));
        }
        return result$iv;
    }

    @Annotations(level = Annotations3.ERROR, message = "Use runningReduceIndexed instead.", replaceWith = @Annotations8(expression = "runningReduceIndexed(operation)", imports = {}))
    public static final List<Character> scanReduceIndexed(CharSequence scanReduceIndexed, Functions17<? super Integer, ? super Character, ? super Character, Character> operation) {
        Intrinsics.checkNotNullParameter(scanReduceIndexed, "$this$scanReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        if (scanReduceIndexed.length() == 0) {
            return CollectionsKt.emptyList();
        }
        char accumulator$iv = scanReduceIndexed.charAt(0);
        ArrayList result$iv = new ArrayList(scanReduceIndexed.length());
        result$iv.add(Character.valueOf(accumulator$iv));
        int length = scanReduceIndexed.length();
        for (int index$iv = 1; index$iv < length; index$iv++) {
            accumulator$iv = operation.invoke(Integer.valueOf(index$iv), Character.valueOf(accumulator$iv), Character.valueOf(scanReduceIndexed.charAt(index$iv))).charValue();
            result$iv.add(Character.valueOf(accumulator$iv));
        }
        return result$iv;
    }

    public static final int sumBy(CharSequence sumBy, Functions2<? super Character, Integer> selector) {
        Intrinsics.checkNotNullParameter(sumBy, "$this$sumBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int sum = 0;
        for (int i = 0; i < sumBy.length(); i++) {
            char element = sumBy.charAt(i);
            sum += selector.invoke(Character.valueOf(element)).intValue();
        }
        return sum;
    }

    public static final double sumByDouble(CharSequence sumByDouble, Functions2<? super Character, Double> selector) {
        Intrinsics.checkNotNullParameter(sumByDouble, "$this$sumByDouble");
        Intrinsics.checkNotNullParameter(selector, "selector");
        double sum = 0.0d;
        for (int i = 0; i < sumByDouble.length(); i++) {
            char element = sumByDouble.charAt(i);
            sum += selector.invoke(Character.valueOf(element)).doubleValue();
        }
        return sum;
    }

    private static final double sumOfDouble(CharSequence $this$sumOf, Functions2<? super Character, Double> functions2) {
        double sum = 0;
        for (int i = 0; i < $this$sumOf.length(); i++) {
            char element = $this$sumOf.charAt(i);
            sum += functions2.invoke(Character.valueOf(element)).doubleValue();
        }
        return sum;
    }

    private static final int sumOfInt(CharSequence $this$sumOf, Functions2<? super Character, Integer> functions2) {
        int sum = 0;
        for (int i = 0; i < $this$sumOf.length(); i++) {
            char element = $this$sumOf.charAt(i);
            sum += functions2.invoke(Character.valueOf(element)).intValue();
        }
        return sum;
    }

    private static final long sumOfLong(CharSequence $this$sumOf, Functions2<? super Character, Long> functions2) {
        long sum = 0;
        for (int i = 0; i < $this$sumOf.length(); i++) {
            char element = $this$sumOf.charAt(i);
            sum += functions2.invoke(Character.valueOf(element)).longValue();
        }
        return sum;
    }

    private static final int sumOfUInt(CharSequence $this$sumOf, Functions2<? super Character, UInt> functions2) {
        int sum = UInt.m162constructorimpl(0);
        for (int i = 0; i < $this$sumOf.length(); i++) {
            char element = $this$sumOf.charAt(i);
            sum = UInt.m162constructorimpl(functions2.invoke(Character.valueOf(element)).getData() + sum);
        }
        return sum;
    }

    private static final long sumOfULong(CharSequence $this$sumOf, Functions2<? super Character, ULong> functions2) {
        long sum = ULong.m232constructorimpl(0);
        for (int i = 0; i < $this$sumOf.length(); i++) {
            char element = $this$sumOf.charAt(i);
            sum = ULong.m232constructorimpl(functions2.invoke(Character.valueOf(element)).getData() + sum);
        }
        return sum;
    }

    public static final List<String> chunked(CharSequence chunked, int size) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        return StringsKt.windowed(chunked, size, size, true);
    }

    public static final <R> List<R> chunked(CharSequence chunked, int size, Functions2<? super CharSequence, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return StringsKt.windowed(chunked, size, size, true, transform);
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u000e\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\r\n\u0000\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0002\b\u0004"}, m17d2 = {"<anonymous>", "", "it", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$chunkedSequence$1 */
    static final class C05241 extends Lambda implements Functions2<CharSequence, String> {
        public static final C05241 INSTANCE = ;

        C05241() {
        }

        @Override // kotlin.jvm.functions.Functions2
        public final String invoke(CharSequence it) {
            Intrinsics.checkNotNullParameter(it, "it");
            return it.toString();
        }
    }

    public static final Sequence<String> chunkedSequence(CharSequence chunkedSequence, int size) {
        Intrinsics.checkNotNullParameter(chunkedSequence, "$this$chunkedSequence");
        return StringsKt.chunkedSequence(chunkedSequence, size, C05241.INSTANCE);
    }

    public static final <R> Sequence<R> chunkedSequence(CharSequence chunkedSequence, int size, Functions2<? super CharSequence, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(chunkedSequence, "$this$chunkedSequence");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return StringsKt.windowedSequence(chunkedSequence, size, size, true, transform);
    }

    public static final Tuples<CharSequence, CharSequence> partition(CharSequence partition, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(partition, "$this$partition");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        StringBuilder first = new StringBuilder();
        StringBuilder second = new StringBuilder();
        for (int i = 0; i < partition.length(); i++) {
            char element = partition.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                first.append(element);
            } else {
                second.append(element);
            }
        }
        return new Tuples<>(first, second);
    }

    public static final Tuples<String, String> partition(String partition, Functions2<? super Character, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(partition, "$this$partition");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        StringBuilder first = new StringBuilder();
        StringBuilder second = new StringBuilder();
        int length = partition.length();
        for (int i = 0; i < length; i++) {
            char element = partition.charAt(i);
            if (predicate.invoke(Character.valueOf(element)).booleanValue()) {
                first.append(element);
            } else {
                second.append(element);
            }
        }
        String string = first.toString();
        Intrinsics.checkNotNullExpressionValue(string, "first.toString()");
        String string2 = second.toString();
        Intrinsics.checkNotNullExpressionValue(string2, "second.toString()");
        return new Tuples<>(string, string2);
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u000e\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\r\n\u0000\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0002\b\u0004"}, m17d2 = {"<anonymous>", "", "it", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$windowed$1 */
    static final class C05261 extends Lambda implements Functions2<CharSequence, String> {
        public static final C05261 INSTANCE = ;

        C05261() {
        }

        @Override // kotlin.jvm.functions.Functions2
        public final String invoke(CharSequence it) {
            Intrinsics.checkNotNullParameter(it, "it");
            return it.toString();
        }
    }

    public static /* synthetic */ List windowed$default(CharSequence charSequence, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return StringsKt.windowed(charSequence, i, i2, z);
    }

    public static final List<String> windowed(CharSequence windowed, int size, int step, boolean partialWindows) {
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        return StringsKt.windowed(windowed, size, step, partialWindows, C05261.INSTANCE);
    }

    public static /* synthetic */ List windowed$default(CharSequence charSequence, int i, int i2, boolean z, Functions2 functions2, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return StringsKt.windowed(charSequence, i, i2, z, functions2);
    }

    public static final <R> List<R> windowed(CharSequence windowed, int size, int step, boolean partialWindows, Functions2<? super CharSequence, ? extends R> transform) {
        int coercedEnd;
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        SlidingWindow3.checkWindowSizeStep(size, step);
        int thisSize = windowed.length();
        int resultCapacity = (thisSize / step) + (thisSize % step == 0 ? 0 : 1);
        ArrayList result = new ArrayList(resultCapacity);
        int index = 0;
        while (index >= 0 && thisSize > index) {
            int end = index + size;
            if (end >= 0 && end <= thisSize) {
                coercedEnd = end;
            } else {
                if (!partialWindows) {
                    break;
                }
                coercedEnd = thisSize;
            }
            result.add(transform.invoke(windowed.subSequence(index, coercedEnd)));
            index += step;
        }
        return result;
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u000e\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\r\n\u0000\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0002\b\u0004"}, m17d2 = {"<anonymous>", "", "it", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$windowedSequence$1 */
    static final class C05271 extends Lambda implements Functions2<CharSequence, String> {
        public static final C05271 INSTANCE = ;

        C05271() {
        }

        @Override // kotlin.jvm.functions.Functions2
        public final String invoke(CharSequence it) {
            Intrinsics.checkNotNullParameter(it, "it");
            return it.toString();
        }
    }

    public static /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return StringsKt.windowedSequence(charSequence, i, i2, z);
    }

    public static final Sequence<String> windowedSequence(CharSequence windowedSequence, int size, int step, boolean partialWindows) {
        Intrinsics.checkNotNullParameter(windowedSequence, "$this$windowedSequence");
        return StringsKt.windowedSequence(windowedSequence, size, step, partialWindows, C05271.INSTANCE);
    }

    public static /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int i, int i2, boolean z, Functions2 functions2, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return StringsKt.windowedSequence(charSequence, i, i2, z, functions2);
    }

    public static final <R> Sequence<R> windowedSequence(CharSequence windowedSequence, int size, int step, boolean partialWindows, Functions2<? super CharSequence, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(windowedSequence, "$this$windowedSequence");
        Intrinsics.checkNotNullParameter(transform, "transform");
        SlidingWindow3.checkWindowSizeStep(size, step);
        Progressions2 windows = RangesKt.step(partialWindows ? StringsKt.getIndices(windowedSequence) : RangesKt.until(0, (windowedSequence.length() - size) + 1), step);
        return SequencesKt.map(CollectionsKt.asSequence(windows), new Functions2<Integer, R>() { // from class: kotlin.text.StringsKt___StringsKt.windowedSequence.2
            final /* synthetic */ int $size;
            final /* synthetic */ CharSequence $this_windowedSequence;
            final /* synthetic */ Functions2 $transform;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            C05282(CharSequence windowedSequence2, int size2, Functions2 transform2) {
                super(1);
                charSequence = windowedSequence2;
                i = size2;
                functions2 = transform2;
            }

            @Override // kotlin.jvm.functions.Functions2
            public /* bridge */ /* synthetic */ Object invoke(Integer num) {
                return invoke(num.intValue());
            }

            public final R invoke(int i) {
                int i2 = i + i;
                return (R) functions2.invoke(charSequence.subSequence(i, (i2 < 0 || i2 > charSequence.length()) ? charSequence.length() : i2));
            }
        });
    }

    /* compiled from: _Strings.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0004\b\u0004\u0010\u0005"}, m17d2 = {"<anonymous>", "R", "index", "", "invoke", "(I)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.text.StringsKt___StringsKt$windowedSequence$2 */
    static final class C05282<R> extends Lambda implements Functions2<Integer, R> {
        final /* synthetic */ int $size;
        final /* synthetic */ CharSequence $this_windowedSequence;
        final /* synthetic */ Functions2 $transform;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05282(CharSequence windowedSequence2, int size2, Functions2 transform2) {
            super(1);
            charSequence = windowedSequence2;
            i = size2;
            functions2 = transform2;
        }

        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Object invoke(Integer num) {
            return invoke(num.intValue());
        }

        public final R invoke(int i) {
            int i2 = i + i;
            return (R) functions2.invoke(charSequence.subSequence(i, (i2 < 0 || i2 > charSequence.length()) ? charSequence.length() : i2));
        }
    }

    public static final List<Tuples<Character, Character>> zip(CharSequence zip, CharSequence other) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        int length$iv = Math.min(zip.length(), other.length());
        ArrayList list$iv = new ArrayList(length$iv);
        for (int i$iv = 0; i$iv < length$iv; i$iv++) {
            char c1 = zip.charAt(i$iv);
            char c2 = other.charAt(i$iv);
            list$iv.add(Tuples3.m24to(Character.valueOf(c1), Character.valueOf(c2)));
        }
        return list$iv;
    }

    public static final <V> List<V> zip(CharSequence zip, CharSequence other, Functions13<? super Character, ? super Character, ? extends V> transform) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int length = Math.min(zip.length(), other.length());
        ArrayList list = new ArrayList(length);
        for (int i = 0; i < length; i++) {
            list.add(transform.invoke(Character.valueOf(zip.charAt(i)), Character.valueOf(other.charAt(i))));
        }
        return list;
    }

    public static final List<Tuples<Character, Character>> zipWithNext(CharSequence zipWithNext) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        int size$iv = zipWithNext.length() - 1;
        if (size$iv < 1) {
            return CollectionsKt.emptyList();
        }
        ArrayList result$iv = new ArrayList(size$iv);
        for (int index$iv = 0; index$iv < size$iv; index$iv++) {
            char a = zipWithNext.charAt(index$iv);
            char b = zipWithNext.charAt(index$iv + 1);
            result$iv.add(Tuples3.m24to(Character.valueOf(a), Character.valueOf(b)));
        }
        return result$iv;
    }

    public static final <R> List<R> zipWithNext(CharSequence zipWithNext, Functions13<? super Character, ? super Character, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int size = zipWithNext.length() - 1;
        if (size < 1) {
            return CollectionsKt.emptyList();
        }
        ArrayList result = new ArrayList(size);
        for (int index = 0; index < size; index++) {
            result.add(transform.invoke(Character.valueOf(zipWithNext.charAt(index)), Character.valueOf(zipWithNext.charAt(index + 1))));
        }
        return result;
    }

    public static final Iterable<Character> asIterable(CharSequence asIterable) {
        Intrinsics.checkNotNullParameter(asIterable, "$this$asIterable");
        if (asIterable instanceof String) {
            if (asIterable.length() == 0) {
                return CollectionsKt.emptyList();
            }
        }
        return new Iterables13(asIterable);
    }

    public static final Sequence<Character> asSequence(final CharSequence asSequence) {
        Intrinsics.checkNotNullParameter(asSequence, "$this$asSequence");
        if (asSequence instanceof String) {
            if (asSequence.length() == 0) {
                return SequencesKt.emptySequence();
            }
        }
        return new Sequence<Character>() { // from class: kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            public Iterator<Character> iterator() {
                return StringsKt.iterator(asSequence);
            }
        };
    }
}
