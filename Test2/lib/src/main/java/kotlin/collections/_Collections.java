package kotlin.collections;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.Annotations;
import kotlin.Annotations2;
import kotlin.Annotations3;
import kotlin.Annotations8;
import kotlin.Metadata;
import kotlin.Tuples;
import kotlin.Tuples3;
import kotlin.UInt;
import kotlin.ULong;
import kotlin.Unit;
import kotlin.comparisons.Comparisons;
import kotlin.comparisons.ComparisonsKt;
import kotlin.internal.PlatformImplementations2;
import kotlin.jvm.functions.Functions;
import kotlin.jvm.functions.Functions13;
import kotlin.jvm.functions.Functions17;
import kotlin.jvm.functions.Functions2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.random.Random;
import kotlin.ranges.Ranges6;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;

/* compiled from: _Collections.kt */
@Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000ê\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u001b\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0013\n\u0002\u0010\u0011\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b \n\u0002\u0018\u0002\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0014\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a0\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aT\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\bø\u0001\u0000\u001aB\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000\u001a\\\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000\u001a]\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001aw\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001ao\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001aB\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\bø\u0001\u0000\u001a]\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00101\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00102\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00103\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a+\u00104\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00107\u001a\u0019\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u001a\u0016\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u001c\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010;\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000\u001a$\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a$\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a6\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a6\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a#\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a&\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a7\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010H\u001a=\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010I\u001a%\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a(\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a6\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001aK\u0010L\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\bø\u0001\u0000\u001ad\u0010P\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010S\u001a$\u0010T\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bU0+\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010V\u001a\u0002HQ\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HQH\u0086\b¢\u0006\u0002\u0010W\u001a6\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HQ\"\u0010\b\u0000\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001aO\u0010\\\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010]\u001aO\u0010^\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010]\u001a7\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a7\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a7\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a7\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001aB\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\bø\u0001\u0000\u001aG\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\t0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\bg\u001a\\\u0010h\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030MH\u0087\bø\u0001\u0000¢\u0006\u0002\bi\u001a\\\u0010h\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\t0MH\u0087\bø\u0001\u0000¢\u0006\u0002\bj\u001ar\u0010k\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030MH\u0087\bø\u0001\u0000¢\u0006\u0004\bl\u0010S\u001ar\u0010k\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\t0MH\u0087\bø\u0001\u0000¢\u0006\u0004\bm\u0010S\u001a[\u0010n\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010]\u001a]\u0010n\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\t0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0004\bo\u0010]\u001aX\u0010p\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2'\u0010r\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010t\u001am\u0010u\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2<\u0010r\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0vH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010w\u001aX\u0010x\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010q\u001a\u0002H-2'\u0010r\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H-0MH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010y\u001am\u0010z\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010q\u001a\u0002H-2<\u0010r\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H-0vH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010{\u001a0\u0010|\u001a\u00020}\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010~\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020}0\u0005H\u0087\bø\u0001\u0000\u001aE\u0010\u007f\u001a\u00020}\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010~\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020}0MH\u0086\bø\u0001\u0000\u001a>\u0010\u0080\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010I\u001a&\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010E\u001aI\u0010\u0082\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000\u001ac\u0010\u0082\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000\u001ac\u0010\u0083\u0001\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001d\b\u0002\u0010\u0014*\u0017\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u0084\u00010\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001a}\u0010\u0083\u0001\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001d\b\u0003\u0010\u0014*\u0017\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\r0\u0084\u00010\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001aF\u0010\u0085\u0001\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0086\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\bø\u0001\u0000\u001a*\u0010\u0087\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0088\u0001\u001a*\u0010\u0087\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0089\u0001\u001a1\u0010\u008a\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a1\u0010\u008a\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a1\u0010\u008b\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a1\u0010\u008b\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a0\u0010\u008c\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u008d\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u008e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u008f\u0001\u001a\u0003H\u0090\u0001\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010\u0090\u0001*\b0\u0091\u0001j\u0003`\u0092\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u0093\u0001\u001a\u0003H\u0090\u00012\n\b\u0002\u0010\u0094\u0001\u001a\u00030\u0095\u00012\n\b\u0002\u0010\u0096\u0001\u001a\u00030\u0095\u00012\n\b\u0002\u0010\u0097\u0001\u001a\u00030\u0095\u00012\t\b\u0002\u0010\u0098\u0001\u001a\u00020$2\n\b\u0002\u0010\u0099\u0001\u001a\u00030\u0095\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u0095\u0001\u0018\u00010\u0005¢\u0006\u0003\u0010\u009a\u0001\u001al\u0010\u009b\u0001\u001a\u00030\u009c\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u0094\u0001\u001a\u00030\u0095\u00012\n\b\u0002\u0010\u0096\u0001\u001a\u00030\u0095\u00012\n\b\u0002\u0010\u0097\u0001\u001a\u00030\u0095\u00012\t\b\u0002\u0010\u0098\u0001\u001a\u00020$2\n\b\u0002\u0010\u0099\u0001\u001a\u00030\u0095\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u0095\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u009d\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a6\u0010\u009d\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001c\u0010\u009d\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a6\u0010\u009d\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010b\u001a*\u0010\u009e\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0088\u0001\u001a*\u0010\u009e\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0089\u0001\u001a\u001e\u0010\u009f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a8\u0010\u009f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001e\u0010\u009f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a8\u0010\u009f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010b\u001a=\u0010 \u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\bø\u0001\u0000\u001aR\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\bø\u0001\u0000\u001aX\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\bø\u0001\u0000\u001aq\u0010£\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010S\u001ak\u0010¤\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010S\u001aC\u0010¥\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001a\\\u0010¦\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010]\u001aV\u0010§\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010]\u001a,\u0010¨\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010ª\u0001\u001a\u001b\u0010¨\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010«\u0001\u001a\u001b\u0010¨\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¬\u0001\u001aI\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001aI\u0010®\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001aH\u0010¯\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010°\u0001\u001a1\u0010¯\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000\u001a1\u0010¯\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000\u001aJ\u0010±\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010°\u0001\u001a9\u0010±\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010²\u0001\u001a9\u0010±\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010³\u0001\u001a\\\u0010´\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`·\u00012\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¸\u0001\u001a^\u0010¹\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`·\u00012\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¸\u0001\u001a,\u0010º\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010ª\u0001\u001a\u001b\u0010º\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010«\u0001\u001a\u001b\u0010º\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¬\u0001\u001a@\u0010»\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`·\u0001H\u0007¢\u0006\u0003\u0010¼\u0001\u001a@\u0010½\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`·\u0001H\u0007¢\u0006\u0003\u0010¼\u0001\u001a,\u0010¾\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010ª\u0001\u001a\u001b\u0010¾\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010«\u0001\u001a\u001b\u0010¾\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¬\u0001\u001aI\u0010¿\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001aI\u0010À\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010`\u001aH\u0010Á\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010°\u0001\u001a1\u0010Á\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000\u001a1\u0010Á\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000\u001aJ\u0010Â\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010°\u0001\u001a9\u0010Â\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010²\u0001\u001a9\u0010Â\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010³\u0001\u001a\\\u0010Ã\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`·\u00012\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¸\u0001\u001a^\u0010Ä\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`·\u00012\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¸\u0001\u001a,\u0010Å\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010ª\u0001\u001a\u001b\u0010Å\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010«\u0001\u001a\u001b\u0010Å\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¬\u0001\u001a@\u0010Æ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`·\u0001H\u0007¢\u0006\u0003\u0010¼\u0001\u001a@\u0010Ç\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`·\u0001H\u0007¢\u0006\u0003\u0010¼\u0001\u001a.\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010É\u0001\u001a8\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010Ê\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020Ë\u0001H\u0086\u0002¢\u0006\u0003\u0010Ì\u0001\u001a/\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010Í\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010É\u0001\u001a\u0017\u0010Î\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a1\u0010Î\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001aA\u0010Ï\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2\u0012\u0010~\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020}0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010Ð\u0001\u001aV\u0010Ñ\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2'\u0010~\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020}0MH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010Ò\u0001\u001aI\u0010Ó\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a.\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010Õ\u0001\u001a8\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0010\u0010Ê\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020Ë\u0001H\u0086\u0002¢\u0006\u0003\u0010Ö\u0001\u001a/\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010É\u0001\u001a8\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010Ê\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020Ë\u0001H\u0086\u0002¢\u0006\u0003\u0010Ì\u0001\u001a/\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010×\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010Õ\u0001\u001a.\u0010×\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010É\u0001\u001a \u0010Ø\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b¢\u0006\u0003\u0010Ù\u0001\u001a)\u0010Ø\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010Ø\u0001\u001a\u00030Ú\u0001H\u0007¢\u0006\u0003\u0010Û\u0001\u001a\"\u0010Ü\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b¢\u0006\u0003\u0010Ù\u0001\u001a+\u0010Ü\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010Ø\u0001\u001a\u00030Ú\u0001H\u0007¢\u0006\u0003\u0010Û\u0001\u001a[\u0010Ý\u0001\u001a\u0003HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010r\u001a%\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010MH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010ß\u0001\u001ap\u0010à\u0001\u001a\u0003HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010vH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010á\u0001\u001ar\u0010â\u0001\u001a\u0005\u0018\u0001HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010vH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010á\u0001\u001a]\u0010ã\u0001\u001a\u0005\u0018\u0001HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010r\u001a%\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010MH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010ß\u0001\u001a[\u0010ä\u0001\u001a\u0003HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010r\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0005\u0012\u0003HÞ\u00010MH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010å\u0001\u001ap\u0010æ\u0001\u001a\u0003HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0005\u0012\u0003HÞ\u00010vH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010ç\u0001\u001ar\u0010è\u0001\u001a\u0005\u0018\u0001HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0005\u0012\u0003HÞ\u00010vH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010ç\u0001\u001a]\u0010é\u0001\u001a\u0005\u0018\u0001HÞ\u0001\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010r\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0005\u0012\u0003HÞ\u00010MH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010å\u0001\u001a#\u0010ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020+\u001a\u001d\u0010ë\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a`\u0010ì\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2'\u0010r\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010í\u0001\u001au\u0010î\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2<\u0010r\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0vH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010ï\u0001\u001a[\u0010ð\u0001\u001a\t\u0012\u0005\u0012\u0003HÞ\u00010+\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010r\u001a%\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010MH\u0087\bø\u0001\u0000\u001ap\u0010ñ\u0001\u001a\t\u0012\u0005\u0012\u0003HÞ\u00010+\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010vH\u0087\bø\u0001\u0000\u001a`\u0010ò\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2'\u0010r\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010í\u0001\u001au\u0010ó\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010q\u001a\u0002H-2<\u0010r\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0vH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010ï\u0001\u001a[\u0010ô\u0001\u001a\t\u0012\u0005\u0012\u0003HÞ\u00010+\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010r\u001a%\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010MH\u0087\bø\u0001\u0000\u001ap\u0010õ\u0001\u001a\t\u0012\u0005\u0012\u0003HÞ\u00010+\"\u0005\b\u0000\u0010Þ\u0001\"\t\b\u0001\u0010\u0002*\u0003HÞ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010r\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÞ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(s\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÞ\u00010vH\u0087\bø\u0001\u0000\u001a$\u0010ö\u0001\u001a\u00020}\"\u0004\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0084\u00012\b\u0010Ø\u0001\u001a\u00030Ú\u0001H\u0007\u001a\u001c\u0010÷\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a6\u0010÷\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001c\u0010÷\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001e\u0010ø\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a8\u0010ø\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010`\u001a\u001e\u0010ø\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a,\u0010ù\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\r\u0010ú\u0001\u001a\b\u0012\u0004\u0012\u00020$0\u0003\u001a'\u0010ù\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\b\u0010ú\u0001\u001a\u00030û\u0001\u001aG\u0010ü\u0001\u001a\u00020}\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\t\u0012\u0004\u0012\u0002H\u00020\u0084\u00012\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001aG\u0010ý\u0001\u001a\u00020}\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\t\u0012\u0004\u0012\u0002H\u00020\u0084\u00012\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001a#\u0010þ\u0001\u001a\u00020}\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\t\u0012\u0004\u0012\u0002H\u00020\u0084\u0001\u001a(\u0010ÿ\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aL\u0010\u0080\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001aL\u0010\u0081\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001a(\u0010\u0082\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020©\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u0083\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010µ\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¶\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`·\u0001\u001a0\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u008d\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u008e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010\u0085\u0002\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b\u0086\u0002\u001a\u0019\u0010\u0085\u0002\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\b\u0087\u0002\u001a\u0019\u0010\u0085\u0002\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\b\u0088\u0002\u001a\u0019\u0010\u0085\u0002\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\b\u0089\u0002\u001a\u0019\u0010\u0085\u0002\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\b\u008a\u0002\u001a\u0019\u0010\u0085\u0002\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\b\u008b\u0002\u001a1\u0010\u008c\u0002\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\bø\u0001\u0000\u001a1\u0010\u008d\u0002\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\bø\u0001\u0000\u001a7\u0010\u008e\u0002\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\b\u0087\u0002\u001a7\u0010\u008e\u0002\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\b\u0089\u0002\u001a7\u0010\u008e\u0002\u001a\u00020&\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020&0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\b\u008a\u0002\u001a?\u0010\u008e\u0002\u001a\u00030\u008f\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u0010<\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008f\u00020\u0005H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\b\u0090\u0002\u0010\u0091\u0002\u001a?\u0010\u008e\u0002\u001a\u00030\u0092\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u0010<\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u0092\u00020\u0005H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\b\u0093\u0002\u0010\u0094\u0002\u001a%\u0010\u0095\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a%\u0010\u0096\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a7\u0010\u0097\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a7\u0010\u0098\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u0012\u0010\u0099\u0002\u001a\u00030\u009a\u0002*\b\u0012\u0004\u0012\u00020\u000109\u001a\u0012\u0010\u009b\u0002\u001a\u00030\u009c\u0002*\b\u0012\u0004\u0012\u00020\u001f09\u001a\u0013\u0010\u009d\u0002\u001a\u00030\u009e\u0002*\t\u0012\u0005\u0012\u00030\u009f\u000209\u001a6\u0010 \u0002\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001a\u0012\u0010¡\u0002\u001a\u00030¢\u0002*\b\u0012\u0004\u0012\u00020\u001e09\u001a\u0012\u0010£\u0002\u001a\u00030¤\u0002*\b\u0012\u0004\u0012\u00020\"09\u001a)\u0010¥\u0002\u001a\u0014\u0012\u0004\u0012\u0002H\u00020¦\u0002j\t\u0012\u0004\u0012\u0002H\u0002`§\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010¨\u0002\u001a\u00030©\u0002*\b\u0012\u0004\u0012\u00020$09\u001a\u001d\u0010ª\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010«\u0002\u001a\u00030¬\u0002*\b\u0012\u0004\u0012\u00020&09\u001a\u001e\u0010\u00ad\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0084\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209\u001a\u001e\u0010\u00ad\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0084\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010®\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020¯\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010°\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u008d\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010±\u0002\u001a\u00030²\u0002*\b\u0012\u0004\u0012\u00020(09\u001a0\u0010³\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u008d\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u008e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010´\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010µ\u0002\u001a\u00020$2\t\b\u0002\u0010¶\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010´\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010µ\u0002\u001a\u00020$2\t\b\u0002\u0010¶\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010·\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020¸\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010¹\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u008e\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0Ë\u0001H\u0086\u0004¢\u0006\u0003\u0010Ì\u0001\u001a\u0081\u0001\u0010¹\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u008e\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0Ë\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(º\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(»\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010¼\u0002\u001aA\u0010¹\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u008e\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ax\u0010¹\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u008e\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(º\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(»\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\bø\u0001\u0000\u001a+\u0010½\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001ac\u0010½\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(º\u0002\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(»\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\bø\u0001\u0000\u0082\u0002\u000b\n\u0005\b\u009920\u0001\n\u0002\b\u0019¨\u0006¾\u0002"}, m17d2 = {"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapSequence", "flatMapIndexed", "flatMapIndexedIterable", "flatMapIndexedSequence", "flatMapIndexedTo", "flatMapIndexedIterableTo", "flatMapIndexedSequenceTo", "flatMapTo", "flatMapSequenceTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxByOrNull", "maxOf", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Comparable;", "maxOfOrNull", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "maxOfWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "maxOfWithOrNull", "maxOrNull", "maxWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWithOrNull", "min", "minBy", "minByOrNull", "minOf", "minOfOrNull", "minOfWith", "minOfWithOrNull", "minOrNull", "minWith", "minWithOrNull", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "onEachIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightIndexedOrNull", "reduceRightOrNull", "requireNoNulls", "reversed", "runningFold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "runningFoldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "scanReduce", "scanReduceIndexed", "shuffle", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "sumOf", "Lkotlin/UInt;", "sumOfUInt", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)I", "Lkotlin/ULong;", "sumOfULong", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)J", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, m18k = 5, m19mv = {1, 4, 0}, m21xi = 1, m22xs = "kotlin/collections/CollectionsKt")
/* renamed from: kotlin.collections.CollectionsKt___CollectionsKt */
/* loaded from: classes.dex */
public class _Collections extends _CollectionsJvm {
    private static final <T> T component1(List<? extends T> component1) {
        Intrinsics.checkNotNullParameter(component1, "$this$component1");
        return component1.get(0);
    }

    private static final <T> T component2(List<? extends T> component2) {
        Intrinsics.checkNotNullParameter(component2, "$this$component2");
        return component2.get(1);
    }

    private static final <T> T component3(List<? extends T> component3) {
        Intrinsics.checkNotNullParameter(component3, "$this$component3");
        return component3.get(2);
    }

    private static final <T> T component4(List<? extends T> component4) {
        Intrinsics.checkNotNullParameter(component4, "$this$component4");
        return component4.get(3);
    }

    private static final <T> T component5(List<? extends T> component5) {
        Intrinsics.checkNotNullParameter(component5, "$this$component5");
        return component5.get(4);
    }

    public static final <T> boolean contains(Iterable<? extends T> contains, T t) {
        Intrinsics.checkNotNullParameter(contains, "$this$contains");
        if (contains instanceof Collection) {
            return ((Collection) contains).contains(t);
        }
        return CollectionsKt.indexOf(contains, t) >= 0;
    }

    public static final <T> T elementAt(Iterable<? extends T> elementAt, int i) {
        Intrinsics.checkNotNullParameter(elementAt, "$this$elementAt");
        if (elementAt instanceof List) {
            return (T) ((List) elementAt).get(i);
        }
        return (T) CollectionsKt.elementAtOrElse(elementAt, i, new Functions2<Integer, T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt.elementAt.1
            final /* synthetic */ int $index;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            C04311(int i2) {
                super(1);
                i = i2;
            }

            @Override // kotlin.jvm.functions.Functions2
            public /* bridge */ /* synthetic */ Object invoke(Integer num) {
                return invoke(num.intValue());
            }

            public final T invoke(int it) {
                throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + i + '.');
            }
        });
    }

    /* compiled from: _Collections.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0004\b\u0004\u0010\u0005"}, m17d2 = {"<anonymous>", "T", "it", "", "invoke", "(I)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1 */
    static final class C04311<T> extends Lambda implements Functions2<Integer, T> {
        final /* synthetic */ int $index;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C04311(int i2) {
            super(1);
            i = i2;
        }

        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Object invoke(Integer num) {
            return invoke(num.intValue());
        }

        public final T invoke(int it) {
            throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + i + '.');
        }
    }

    private static final <T> T elementAt(List<? extends T> list, int index) {
        return list.get(index);
    }

    public static final <T> T elementAtOrElse(Iterable<? extends T> elementAtOrElse, int i, Functions2<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkNotNullParameter(elementAtOrElse, "$this$elementAtOrElse");
        Intrinsics.checkNotNullParameter(defaultValue, "defaultValue");
        if (elementAtOrElse instanceof List) {
            List list = (List) elementAtOrElse;
            return (i < 0 || i > CollectionsKt.getLastIndex(list)) ? defaultValue.invoke(Integer.valueOf(i)) : (T) list.get(i);
        }
        if (i < 0) {
            return defaultValue.invoke(Integer.valueOf(i));
        }
        int i2 = 0;
        for (T t : elementAtOrElse) {
            int i3 = i2 + 1;
            if (i != i2) {
                i2 = i3;
            } else {
                return t;
            }
        }
        return defaultValue.invoke(Integer.valueOf(i));
    }

    private static final <T> T elementAtOrElse(List<? extends T> list, int index, Functions2<? super Integer, ? extends T> functions2) {
        return (index < 0 || index > CollectionsKt.getLastIndex(list)) ? functions2.invoke(Integer.valueOf(index)) : list.get(index);
    }

    public static final <T> T elementAtOrNull(Iterable<? extends T> elementAtOrNull, int i) {
        Intrinsics.checkNotNullParameter(elementAtOrNull, "$this$elementAtOrNull");
        if (elementAtOrNull instanceof List) {
            return (T) CollectionsKt.getOrNull((List) elementAtOrNull, i);
        }
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : elementAtOrNull) {
            int i3 = i2 + 1;
            if (i != i2) {
                i2 = i3;
            } else {
                return t;
            }
        }
        return null;
    }

    private static final <T> T elementAtOrNull(List<? extends T> list, int i) {
        return (T) CollectionsKt.getOrNull(list, i);
    }

    /* JADX WARN: Type inference failed for: r4v2, types: [T, java.lang.Object] */
    private static final <T> T find(Iterable<? extends T> iterable, Functions2<? super T, Boolean> functions2) {
        for (T t : iterable) {
            if (functions2.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.lang.Object] */
    private static final <T> T findLast(Iterable<? extends T> iterable, Functions2<? super T, Boolean> functions2) {
        T t = null;
        for (T t2 : iterable) {
            if (functions2.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    /* JADX WARN: Type inference failed for: r4v2, types: [T, java.lang.Object] */
    private static final <T> T findLast(List<? extends T> list, Functions2<? super T, Boolean> functions2) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            ?? r4 = (Object) listIterator.previous();
            if (functions2.invoke(r4).booleanValue()) {
                return r4;
            }
        }
        return null;
    }

    public static final <T> T first(Iterable<? extends T> first) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        if (first instanceof List) {
            return (T) CollectionsKt.first((List) first);
        }
        Iterator<? extends T> it = first.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return it.next();
    }

    public static final <T> T first(List<? extends T> first) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        if (first.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return first.get(0);
    }

    /* JADX WARN: Type inference failed for: r2v2, types: [T, java.lang.Object] */
    public static final <T> T first(Iterable<? extends T> first, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : first) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static final <T> T firstOrNull(Iterable<? extends T> firstOrNull) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        if (firstOrNull instanceof List) {
            if (((List) firstOrNull).isEmpty()) {
                return null;
            }
            return (T) ((List) firstOrNull).get(0);
        }
        Iterator<? extends T> it = firstOrNull.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    public static final <T> T firstOrNull(List<? extends T> firstOrNull) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        if (firstOrNull.isEmpty()) {
            return null;
        }
        return firstOrNull.get(0);
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    public static final <T> T firstOrNull(Iterable<? extends T> firstOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : firstOrNull) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    private static final <T> T getOrElse(List<? extends T> list, int index, Functions2<? super Integer, ? extends T> functions2) {
        return (index < 0 || index > CollectionsKt.getLastIndex(list)) ? functions2.invoke(Integer.valueOf(index)) : list.get(index);
    }

    public static final <T> T getOrNull(List<? extends T> getOrNull, int index) {
        Intrinsics.checkNotNullParameter(getOrNull, "$this$getOrNull");
        if (index < 0 || index > CollectionsKt.getLastIndex(getOrNull)) {
            return null;
        }
        return getOrNull.get(index);
    }

    public static final <T> int indexOf(Iterable<? extends T> indexOf, T t) {
        Intrinsics.checkNotNullParameter(indexOf, "$this$indexOf");
        if (indexOf instanceof List) {
            return ((List) indexOf).indexOf(t);
        }
        int index = 0;
        for (Object item : indexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOf(List<? extends T> indexOf, T t) {
        Intrinsics.checkNotNullParameter(indexOf, "$this$indexOf");
        return indexOf.indexOf(t);
    }

    public static final <T> int indexOfFirst(Iterable<? extends T> indexOfFirst, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        for (Object item : indexOfFirst) {
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(List<? extends T> indexOfFirst, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        for (Object item : indexOfFirst) {
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(Iterable<? extends T> indexOfLast, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (Object item : indexOfLast) {
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(item).booleanValue()) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int indexOfLast(List<? extends T> indexOfLast, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ListIterator<? extends T> listIterator = indexOfLast.listIterator(indexOfLast.size());
        while (listIterator.hasPrevious()) {
            if (predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    public static final <T> T last(Iterable<? extends T> last) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        if (last instanceof List) {
            return (T) CollectionsKt.last((List) last);
        }
        Iterator<? extends T> it = last.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    public static final <T> T last(List<? extends T> last) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        if (last.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return last.get(CollectionsKt.getLastIndex(last));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T last(Iterable<? extends T> last, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : last) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (!z) {
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        return t;
    }

    /* JADX WARN: Type inference failed for: r2v3, types: [T, java.lang.Object] */
    public static final <T> T last(List<? extends T> last, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ListIterator<? extends T> listIterator = last.listIterator(last.size());
        while (listIterator.hasPrevious()) {
            ?? r2 = (Object) listIterator.previous();
            if (predicate.invoke(r2).booleanValue()) {
                return r2;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(Iterable<? extends T> lastIndexOf, T t) {
        Intrinsics.checkNotNullParameter(lastIndexOf, "$this$lastIndexOf");
        if (lastIndexOf instanceof List) {
            return ((List) lastIndexOf).lastIndexOf(t);
        }
        int lastIndex = -1;
        int index = 0;
        for (Object item : lastIndexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int lastIndexOf(List<? extends T> lastIndexOf, T t) {
        Intrinsics.checkNotNullParameter(lastIndexOf, "$this$lastIndexOf");
        return lastIndexOf.lastIndexOf(t);
    }

    public static final <T> T lastOrNull(Iterable<? extends T> lastOrNull) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        if (lastOrNull instanceof List) {
            if (((List) lastOrNull).isEmpty()) {
                return null;
            }
            return (T) ((List) lastOrNull).get(((List) lastOrNull).size() - 1);
        }
        Iterator<? extends T> it = lastOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    public static final <T> T lastOrNull(List<? extends T> lastOrNull) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        if (lastOrNull.isEmpty()) {
            return null;
        }
        return lastOrNull.get(lastOrNull.size() - 1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    public static final <T> T lastOrNull(Iterable<? extends T> lastOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        for (T t2 : lastOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    /* JADX WARN: Type inference failed for: r2v2, types: [T, java.lang.Object] */
    public static final <T> T lastOrNull(List<? extends T> lastOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ListIterator<? extends T> listIterator = lastOrNull.listIterator(lastOrNull.size());
        while (listIterator.hasPrevious()) {
            ?? r2 = (Object) listIterator.previous();
            if (predicate.invoke(r2).booleanValue()) {
                return r2;
            }
        }
        return null;
    }

    private static final <T> T random(Collection<? extends T> collection) {
        return (T) CollectionsKt.random(collection, Random.INSTANCE);
    }

    public static final <T> T random(Collection<? extends T> random, Random random2) {
        Intrinsics.checkNotNullParameter(random, "$this$random");
        Intrinsics.checkNotNullParameter(random2, "random");
        if (random.isEmpty()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return (T) CollectionsKt.elementAt(random, random2.nextInt(random.size()));
    }

    private static final <T> T randomOrNull(Collection<? extends T> collection) {
        return (T) CollectionsKt.randomOrNull(collection, Random.INSTANCE);
    }

    public static final <T> T randomOrNull(Collection<? extends T> randomOrNull, Random random) {
        Intrinsics.checkNotNullParameter(randomOrNull, "$this$randomOrNull");
        Intrinsics.checkNotNullParameter(random, "random");
        if (randomOrNull.isEmpty()) {
            return null;
        }
        return (T) CollectionsKt.elementAt(randomOrNull, random.nextInt(randomOrNull.size()));
    }

    public static final <T> T single(Iterable<? extends T> single) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        if (single instanceof List) {
            return (T) CollectionsKt.single((List) single);
        }
        Iterator<? extends T> it = single.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    public static final <T> T single(List<? extends T> single) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        int size = single.size();
        if (size == 0) {
            throw new NoSuchElementException("List is empty.");
        }
        if (size == 1) {
            return single.get(0);
        }
        throw new IllegalArgumentException("List has more than one element.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T single(Iterable<? extends T> single, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : single) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (!z) {
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        return t;
    }

    public static final <T> T singleOrNull(Iterable<? extends T> singleOrNull) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        if (singleOrNull instanceof List) {
            if (((List) singleOrNull).size() == 1) {
                return (T) ((List) singleOrNull).get(0);
            }
            return null;
        }
        Iterator<? extends T> it = singleOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    public static final <T> T singleOrNull(List<? extends T> singleOrNull) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        if (singleOrNull.size() == 1) {
            return singleOrNull.get(0);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1, types: [java.lang.Object] */
    public static final <T> T singleOrNull(Iterable<? extends T> singleOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : singleOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    public static final <T> List<T> drop(Iterable<? extends T> drop, int n) {
        ArrayList list;
        Intrinsics.checkNotNullParameter(drop, "$this$drop");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.toList(drop);
        }
        if (drop instanceof Collection) {
            int resultSize = ((Collection) drop).size() - n;
            if (resultSize <= 0) {
                return CollectionsKt.emptyList();
            }
            if (resultSize == 1) {
                return CollectionsKt.listOf(CollectionsKt.last(drop));
            }
            list = new ArrayList(resultSize);
            if (drop instanceof List) {
                if (drop instanceof RandomAccess) {
                    int size = ((Collection) drop).size();
                    for (int index = n; index < size; index++) {
                        list.add(((List) drop).get(index));
                    }
                } else {
                    ListIterator listIterator = ((List) drop).listIterator(n);
                    while (listIterator.hasNext()) {
                        Object item = listIterator.next();
                        list.add(item);
                    }
                }
                return list;
            }
        } else {
            list = new ArrayList();
        }
        int count = 0;
        for (T t : drop) {
            if (count >= n) {
                list.add(t);
            } else {
                count++;
            }
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    public static final <T> List<T> dropLast(List<? extends T> dropLast, int n) {
        Intrinsics.checkNotNullParameter(dropLast, "$this$dropLast");
        if (n >= 0) {
            return CollectionsKt.take(dropLast, RangesKt.coerceAtLeast(dropLast.size() - n, 0));
        }
        throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
    }

    public static final <T> List<T> dropLastWhile(List<? extends T> dropLastWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropLastWhile, "$this$dropLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if (!dropLastWhile.isEmpty()) {
            ListIterator<? extends T> listIterator = dropLastWhile.listIterator(dropLastWhile.size());
            while (listIterator.hasPrevious()) {
                if (!predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                    return CollectionsKt.take(dropLastWhile, listIterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt.emptyList();
    }

    public static final <T> List<T> dropWhile(Iterable<? extends T> dropWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropWhile, "$this$dropWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        boolean yielding = false;
        ArrayList list = new ArrayList();
        for (Object item : dropWhile) {
            if (yielding) {
                list.add(item);
            } else if (!predicate.invoke(item).booleanValue()) {
                list.add(item);
                yielding = true;
            }
        }
        return list;
    }

    public static final <T> List<T> filter(Iterable<? extends T> filter, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filter, "$this$filter");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : filter) {
            if (predicate.invoke(element$iv).booleanValue()) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    public static final <T> List<T> filterIndexed(Iterable<? extends T> filterIndexed, Functions13<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        int index$iv = 0;
        for (Object item$iv$iv : filterIndexed) {
            int index$iv$iv = index$iv + 1;
            if (index$iv < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(Integer.valueOf(index$iv), item$iv$iv).booleanValue()) {
                destination$iv.add(item$iv$iv);
            }
            index$iv = index$iv$iv;
        }
        return (List) destination$iv;
    }

    public static final <T, C extends Collection<? super T>> C filterIndexedTo(Iterable<? extends T> filterIndexedTo, C destination, Functions13<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        for (Object item$iv : filterIndexedTo) {
            int index$iv = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(Integer.valueOf(index), item$iv).booleanValue()) {
                destination.add(item$iv);
            }
            index = index$iv;
        }
        return destination;
    }

    public static final /* synthetic */ <R> List<R> filterIsInstance(Iterable<?> filterIsInstance) {
        Intrinsics.checkNotNullParameter(filterIsInstance, "$this$filterIsInstance");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : filterIsInstance) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element$iv instanceof Object) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(Iterable<?> filterIsInstanceTo, C destination) {
        Intrinsics.checkNotNullParameter(filterIsInstanceTo, "$this$filterIsInstanceTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        for (Object element : filterIsInstanceTo) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element instanceof Object) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T> List<T> filterNot(Iterable<? extends T> filterNot, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterNot, "$this$filterNot");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : filterNot) {
            if (!predicate.invoke(element$iv).booleanValue()) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    public static final <T> List<T> filterNotNull(Iterable<? extends T> filterNotNull) {
        Intrinsics.checkNotNullParameter(filterNotNull, "$this$filterNotNull");
        return (List) CollectionsKt.filterNotNullTo(filterNotNull, new ArrayList());
    }

    public static final <C extends Collection<? super T>, T> C filterNotNullTo(Iterable<? extends T> filterNotNullTo, C destination) {
        Intrinsics.checkNotNullParameter(filterNotNullTo, "$this$filterNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        for (T t : filterNotNullTo) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C filterNotTo(Iterable<? extends T> filterNotTo, C destination, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterNotTo, "$this$filterNotTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : filterNotTo) {
            if (!predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C filterTo(Iterable<? extends T> filterTo, C destination, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterTo, "$this$filterTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : filterTo) {
            if (predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T> List<T> slice(List<? extends T> slice, Ranges6 indices) {
        Intrinsics.checkNotNullParameter(slice, "$this$slice");
        Intrinsics.checkNotNullParameter(indices, "indices");
        return indices.isEmpty() ? CollectionsKt.emptyList() : CollectionsKt.toList(slice.subList(indices.getStart().intValue(), indices.getEndInclusive().intValue() + 1));
    }

    public static final <T> List<T> slice(List<? extends T> slice, Iterable<Integer> indices) {
        Intrinsics.checkNotNullParameter(slice, "$this$slice");
        Intrinsics.checkNotNullParameter(indices, "indices");
        int size = CollectionsKt.collectionSizeOrDefault(indices, 10);
        if (size == 0) {
            return CollectionsKt.emptyList();
        }
        ArrayList list = new ArrayList(size);
        Iterator<Integer> it = indices.iterator();
        while (it.hasNext()) {
            int index = it.next().intValue();
            list.add(slice.get(index));
        }
        return list;
    }

    public static final <T> List<T> take(Iterable<? extends T> take, int n) {
        Intrinsics.checkNotNullParameter(take, "$this$take");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        if (take instanceof Collection) {
            if (n >= ((Collection) take).size()) {
                return CollectionsKt.toList(take);
            }
            if (n == 1) {
                return CollectionsKt.listOf(CollectionsKt.first(take));
            }
        }
        int count = 0;
        ArrayList list = new ArrayList(n);
        Iterator<? extends T> it = take.iterator();
        while (it.hasNext()) {
            list.add(it.next());
            count++;
            if (count == n) {
                break;
            }
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    public static final <T> List<T> takeLast(List<? extends T> takeLast, int n) {
        Intrinsics.checkNotNullParameter(takeLast, "$this$takeLast");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        int size = takeLast.size();
        if (n >= size) {
            return CollectionsKt.toList(takeLast);
        }
        if (n == 1) {
            return CollectionsKt.listOf(CollectionsKt.last((List) takeLast));
        }
        ArrayList list = new ArrayList(n);
        if (takeLast instanceof RandomAccess) {
            for (int index = size - n; index < size; index++) {
                list.add(takeLast.get(index));
            }
        } else {
            ListIterator<? extends T> listIterator = takeLast.listIterator(size - n);
            while (listIterator.hasNext()) {
                list.add(listIterator.next());
            }
        }
        return list;
    }

    public static final <T> List<T> takeLastWhile(List<? extends T> takeLastWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeLastWhile, "$this$takeLastWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if (takeLastWhile.isEmpty()) {
            return CollectionsKt.emptyList();
        }
        ListIterator<? extends T> listIterator = takeLastWhile.listIterator(takeLastWhile.size());
        while (listIterator.hasPrevious()) {
            if (!predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = takeLastWhile.size() - listIterator.nextIndex();
                if (size == 0) {
                    return CollectionsKt.emptyList();
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return CollectionsKt.toList(takeLastWhile);
    }

    public static final <T> List<T> takeWhile(Iterable<? extends T> takeWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeWhile, "$this$takeWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ArrayList list = new ArrayList();
        for (Object item : takeWhile) {
            if (!predicate.invoke(item).booleanValue()) {
                break;
            }
            list.add(item);
        }
        return list;
    }

    public static final <T> List<T> reversed(Iterable<? extends T> reversed) {
        Intrinsics.checkNotNullParameter(reversed, "$this$reversed");
        if ((reversed instanceof Collection) && ((Collection) reversed).size() <= 1) {
            return CollectionsKt.toList(reversed);
        }
        List list = CollectionsKt.toMutableList(reversed);
        CollectionsKt.reverse(list);
        return list;
    }

    public static final <T> void shuffle(List<T> shuffle, Random random) {
        Intrinsics.checkNotNullParameter(shuffle, "$this$shuffle");
        Intrinsics.checkNotNullParameter(random, "random");
        for (int i = CollectionsKt.getLastIndex(shuffle); i >= 1; i--) {
            int j = random.nextInt(i + 1);
            shuffle.set(j, shuffle.set(i, shuffle.get(j)));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(List<T> sortBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortBy, "$this$sortBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        if (sortBy.size() > 1) {
            CollectionsKt.sortWith(sortBy, new Comparisons.C04372(selector));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(List<T> sortByDescending, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortByDescending, "$this$sortByDescending");
        Intrinsics.checkNotNullParameter(selector, "selector");
        if (sortByDescending.size() > 1) {
            CollectionsKt.sortWith(sortByDescending, new Comparisons.C04391(selector));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(List<T> sortDescending) {
        Intrinsics.checkNotNullParameter(sortDescending, "$this$sortDescending");
        CollectionsKt.sortWith(sortDescending, ComparisonsKt.reverseOrder());
    }

    public static final <T extends Comparable<? super T>> List<T> sorted(Iterable<? extends T> sorted) {
        Intrinsics.checkNotNullParameter(sorted, "$this$sorted");
        if (sorted instanceof Collection) {
            if (((Collection) sorted).size() <= 1) {
                return CollectionsKt.toList(sorted);
            }
            Collection $this$toTypedArray$iv = (Collection) sorted;
            Object[] array = $this$toTypedArray$iv.toArray(new Comparable[0]);
            if (array == null) {
                throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            if (array != null) {
                Comparable[] $this$apply = (Comparable[]) array;
                if ($this$apply == null) {
                    throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
                }
                ArraysKt.sort((Object[]) $this$apply);
                return ArraysKt.asList($this$apply);
            }
            throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List $this$apply2 = CollectionsKt.toMutableList(sorted);
        CollectionsKt.sort($this$apply2);
        return $this$apply2;
    }

    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(Iterable<? extends T> sortedBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortedBy, "$this$sortedBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return CollectionsKt.sortedWith(sortedBy, new Comparisons.C04372(selector));
    }

    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(Iterable<? extends T> sortedByDescending, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortedByDescending, "$this$sortedByDescending");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return CollectionsKt.sortedWith(sortedByDescending, new Comparisons.C04391(selector));
    }

    public static final <T extends Comparable<? super T>> List<T> sortedDescending(Iterable<? extends T> sortedDescending) {
        Intrinsics.checkNotNullParameter(sortedDescending, "$this$sortedDescending");
        return CollectionsKt.sortedWith(sortedDescending, ComparisonsKt.reverseOrder());
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> List<T> sortedWith(Iterable<? extends T> sortedWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(sortedWith, "$this$sortedWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        if (sortedWith instanceof Collection) {
            if (((Collection) sortedWith).size() <= 1) {
                return CollectionsKt.toList(sortedWith);
            }
            Object[] $this$apply = ((Collection) sortedWith).toArray(new Object[0]);
            if ($this$apply == null) {
                throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            if ($this$apply != null) {
                ArraysKt.sortWith($this$apply, comparator);
                return ArraysKt.asList($this$apply);
            }
            throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List $this$apply2 = CollectionsKt.toMutableList(sortedWith);
        CollectionsKt.sortWith($this$apply2, comparator);
        return $this$apply2;
    }

    public static final boolean[] toBooleanArray(Collection<Boolean> toBooleanArray) {
        Intrinsics.checkNotNullParameter(toBooleanArray, "$this$toBooleanArray");
        boolean[] result = new boolean[toBooleanArray.size()];
        int index = 0;
        Iterator<Boolean> it = toBooleanArray.iterator();
        while (it.hasNext()) {
            boolean element = it.next().booleanValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final byte[] toByteArray(Collection<Byte> toByteArray) {
        Intrinsics.checkNotNullParameter(toByteArray, "$this$toByteArray");
        byte[] result = new byte[toByteArray.size()];
        int index = 0;
        Iterator<Byte> it = toByteArray.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final char[] toCharArray(Collection<Character> toCharArray) {
        Intrinsics.checkNotNullParameter(toCharArray, "$this$toCharArray");
        char[] result = new char[toCharArray.size()];
        int index = 0;
        Iterator<Character> it = toCharArray.iterator();
        while (it.hasNext()) {
            char element = it.next().charValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final double[] toDoubleArray(Collection<Double> toDoubleArray) {
        Intrinsics.checkNotNullParameter(toDoubleArray, "$this$toDoubleArray");
        double[] result = new double[toDoubleArray.size()];
        int index = 0;
        Iterator<Double> it = toDoubleArray.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final float[] toFloatArray(Collection<Float> toFloatArray) {
        Intrinsics.checkNotNullParameter(toFloatArray, "$this$toFloatArray");
        float[] result = new float[toFloatArray.size()];
        int index = 0;
        Iterator<Float> it = toFloatArray.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final int[] toIntArray(Collection<Integer> toIntArray) {
        Intrinsics.checkNotNullParameter(toIntArray, "$this$toIntArray");
        int[] result = new int[toIntArray.size()];
        int index = 0;
        Iterator<Integer> it = toIntArray.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final long[] toLongArray(Collection<Long> toLongArray) {
        Intrinsics.checkNotNullParameter(toLongArray, "$this$toLongArray");
        long[] result = new long[toLongArray.size()];
        int index = 0;
        Iterator<Long> it = toLongArray.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final short[] toShortArray(Collection<Short> toShortArray) {
        Intrinsics.checkNotNullParameter(toShortArray, "$this$toShortArray");
        short[] result = new short[toShortArray.size()];
        int index = 0;
        Iterator<Short> it = toShortArray.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    public static final <T, K, V> Map<K, V> associate(Iterable<? extends T> associate, Functions2<? super T, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associate, "$this$associate");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associate, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : associate) {
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(element$iv);
            destination$iv.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination$iv;
    }

    public static final <T, K> Map<K, T> associateBy(Iterable<? extends T> associateBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateBy, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : associateBy) {
            destination$iv.put(keySelector.invoke(element$iv), element$iv);
        }
        return destination$iv;
    }

    public static final <T, K, V> Map<K, V> associateBy(Iterable<? extends T> associateBy, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateBy, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : associateBy) {
            destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Iterable<? extends T> associateByTo, M destination, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (Object element : associateByTo) {
            destination.put(keySelector.invoke(element), element);
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Iterable<? extends T> associateByTo, M destination, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (Object element : associateByTo) {
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Iterable<? extends T> associateTo, M destination, Functions2<? super T, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associateTo, "$this$associateTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : associateTo) {
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(element);
            destination.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <K, V> Map<K, V> associateWith(Iterable<? extends K> associateWith, Functions2<? super K, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWith, "$this$associateWith");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        LinkedHashMap result = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(associateWith, 10)), 16));
        for (Object element$iv : associateWith) {
            result.put(element$iv, valueSelector.invoke(element$iv));
        }
        return result;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Iterable<? extends K> associateWithTo, M destination, Functions2<? super K, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWithTo, "$this$associateWithTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        for (Object element : associateWithTo) {
            destination.put(element, valueSelector.invoke(element));
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C toCollection(Iterable<? extends T> toCollection, C destination) {
        Intrinsics.checkNotNullParameter(toCollection, "$this$toCollection");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Iterator<? extends T> it = toCollection.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    public static final <T> HashSet<T> toHashSet(Iterable<? extends T> toHashSet) {
        Intrinsics.checkNotNullParameter(toHashSet, "$this$toHashSet");
        return (HashSet) CollectionsKt.toCollection(toHashSet, new HashSet(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(toHashSet, 12))));
    }

    public static final <T> List<T> toList(Iterable<? extends T> toList) {
        Intrinsics.checkNotNullParameter(toList, "$this$toList");
        if (toList instanceof Collection) {
            int size = ((Collection) toList).size();
            if (size == 0) {
                return CollectionsKt.emptyList();
            }
            if (size != 1) {
                return CollectionsKt.toMutableList((Collection) toList);
            }
            return CollectionsKt.listOf(toList instanceof List ? ((List) toList).get(0) : toList.iterator().next());
        }
        return CollectionsKt.optimizeReadOnlyList(CollectionsKt.toMutableList(toList));
    }

    public static final <T> List<T> toMutableList(Iterable<? extends T> toMutableList) {
        Intrinsics.checkNotNullParameter(toMutableList, "$this$toMutableList");
        if (toMutableList instanceof Collection) {
            return CollectionsKt.toMutableList((Collection) toMutableList);
        }
        return (List) CollectionsKt.toCollection(toMutableList, new ArrayList());
    }

    public static final <T> List<T> toMutableList(Collection<? extends T> toMutableList) {
        Intrinsics.checkNotNullParameter(toMutableList, "$this$toMutableList");
        return new ArrayList(toMutableList);
    }

    public static final <T> Set<T> toSet(Iterable<? extends T> toSet) {
        Intrinsics.checkNotNullParameter(toSet, "$this$toSet");
        if (toSet instanceof Collection) {
            int size = ((Collection) toSet).size();
            if (size == 0) {
                return SetsKt.emptySet();
            }
            if (size != 1) {
                return (Set) CollectionsKt.toCollection(toSet, new LinkedHashSet(MapsKt.mapCapacity(((Collection) toSet).size())));
            }
            return SetsKt.setOf(toSet instanceof List ? ((List) toSet).get(0) : toSet.iterator().next());
        }
        return SetsKt.optimizeReadOnlySet((Set) CollectionsKt.toCollection(toSet, new LinkedHashSet()));
    }

    public static final <T, R> List<R> flatMap(Iterable<? extends T> flatMap, Functions2<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : flatMap) {
            Iterable list$iv = transform.invoke(element$iv);
            CollectionsKt.addAll(destination$iv, list$iv);
        }
        return (List) destination$iv;
    }

    public static final <T, R> List<R> flatMapSequence(Iterable<? extends T> flatMap, Functions2<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : flatMap) {
            Sequence list$iv = transform.invoke(element$iv);
            CollectionsKt.addAll(destination$iv, list$iv);
        }
        return (List) destination$iv;
    }

    private static final <T, R> List<R> flatMapIndexedIterable(Iterable<? extends T> iterable, Functions13<? super Integer, ? super T, ? extends Iterable<? extends R>> functions13) {
        ArrayList arrayList = new ArrayList();
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            CollectionsKt.addAll(arrayList, functions13.invoke(Integer.valueOf(i), t));
            i = i2;
        }
        return arrayList;
    }

    private static final <T, R> List<R> flatMapIndexedSequence(Iterable<? extends T> iterable, Functions13<? super Integer, ? super T, ? extends Sequence<? extends R>> functions13) {
        ArrayList arrayList = new ArrayList();
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            CollectionsKt.addAll(arrayList, functions13.invoke(Integer.valueOf(i), t));
            i = i2;
        }
        return arrayList;
    }

    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedIterableTo(Iterable<? extends T> iterable, C c, Functions13<? super Integer, ? super T, ? extends Iterable<? extends R>> functions13) {
        int index = 0;
        for (Object element : iterable) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Iterable list = functions13.invoke(Integer.valueOf(index), element);
            CollectionsKt.addAll(c, list);
            index = index2;
        }
        return c;
    }

    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedSequenceTo(Iterable<? extends T> iterable, C c, Functions13<? super Integer, ? super T, ? extends Sequence<? extends R>> functions13) {
        int index = 0;
        for (Object element : iterable) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Sequence list = functions13.invoke(Integer.valueOf(index), element);
            CollectionsKt.addAll(c, list);
            index = index2;
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapTo(Iterable<? extends T> flatMapTo, C destination, Functions2<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : flatMapTo) {
            Iterable list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapSequenceTo(Iterable<? extends T> flatMapTo, C destination, Functions2<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : flatMapTo) {
            Sequence list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    public static final <T, K> Map<K, List<T>> groupBy(Iterable<? extends T> groupBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : groupBy) {
            K kInvoke = keySelector.invoke(element$iv);
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(element$iv);
        }
        return destination$iv;
    }

    public static final <T, K, V> Map<K, List<V>> groupBy(Iterable<? extends T> groupBy, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : groupBy) {
            K kInvoke = keySelector.invoke(element$iv);
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Iterable<? extends T> groupByTo, M destination, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (Object element : groupByTo) {
            K kInvoke = keySelector.invoke(element);
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(element);
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Iterable<? extends T> groupByTo, M destination, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (Object element : groupByTo) {
            K kInvoke = keySelector.invoke(element);
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(valueTransform.invoke(element));
        }
        return destination;
    }

    /* compiled from: _Collections.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0013\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0001J\u0015\u0010\u0002\u001a\u00028\u00012\u0006\u0010\u0003\u001a\u00028\u0000H\u0016¢\u0006\u0002\u0010\u0004J\u000e\u0010\u0005\u001a\b\u0012\u0004\u0012\u00028\u00000\u0006H\u0016¨\u0006\u0007"}, m17d2 = {"kotlin/collections/CollectionsKt___CollectionsKt$groupingBy$1", "Lkotlin/collections/Grouping;", "keyOf", "element", "(Ljava/lang/Object;)Ljava/lang/Object;", "sourceIterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1 */
    public static final class C04321<K, T> implements Grouping<T, K> {
        final /* synthetic */ Functions2 $keySelector;
        final /* synthetic */ Iterable $this_groupingBy;

        public C04321(Iterable<? extends T> iterable, Functions2 $captured_local_variable$1) {
            iterable = iterable;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.collections.Grouping
        public Iterator<T> sourceIterator() {
            return iterable.iterator();
        }

        @Override // kotlin.collections.Grouping
        public K keyOf(T element) {
            return (K) $captured_local_variable$1.invoke(element);
        }
    }

    public static final <T, K> Grouping<T, K> groupingBy(Iterable<? extends T> groupingBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupingBy, "$this$groupingBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new Grouping<T, K>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt.groupingBy.1
            final /* synthetic */ Functions2 $keySelector;
            final /* synthetic */ Iterable $this_groupingBy;

            public C04321(Iterable<? extends T> groupingBy2, Functions2 keySelector2) {
                iterable = groupingBy2;
                $captured_local_variable$1 = keySelector2;
            }

            @Override // kotlin.collections.Grouping
            public Iterator<T> sourceIterator() {
                return iterable.iterator();
            }

            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) $captured_local_variable$1.invoke(element);
            }
        };
    }

    public static final <T, R> List<R> map(Iterable<? extends T> map, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(map, "$this$map");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(map, 10));
        for (Object item$iv : map) {
            destination$iv.add(transform.invoke(item$iv));
        }
        return (List) destination$iv;
    }

    public static final <T, R> List<R> mapIndexed(Iterable<? extends T> mapIndexed, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexed, "$this$mapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(mapIndexed, 10));
        int index$iv = 0;
        for (Object item$iv : mapIndexed) {
            int index$iv2 = index$iv + 1;
            if (index$iv < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination$iv.add(transform.invoke(Integer.valueOf(index$iv), item$iv));
            index$iv = index$iv2;
        }
        return (List) destination$iv;
    }

    public static final <T, R> List<R> mapIndexedNotNull(Iterable<? extends T> mapIndexedNotNull, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        int index$iv = 0;
        for (Object item$iv$iv : mapIndexedNotNull) {
            int index$iv$iv = index$iv + 1;
            if (index$iv < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            R rInvoke = transform.invoke(Integer.valueOf(index$iv), item$iv$iv);
            if (rInvoke != null) {
                destination$iv.add(rInvoke);
            }
            index$iv = index$iv$iv;
        }
        return (List) destination$iv;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Iterable<? extends T> mapIndexedNotNullTo, C destination, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        for (Object item$iv : mapIndexedNotNullTo) {
            int index$iv = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            R rInvoke = transform.invoke(Integer.valueOf(index), item$iv);
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
            index = index$iv;
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Iterable<? extends T> mapIndexedTo, C destination, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        for (Object item : mapIndexedTo) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.invoke(Integer.valueOf(index), item));
            index = index2;
        }
        return destination;
    }

    public static final <T, R> List<R> mapNotNull(Iterable<? extends T> mapNotNull, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNull, "$this$mapNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv$iv : mapNotNull) {
            R rInvoke = transform.invoke(element$iv$iv);
            if (rInvoke != null) {
                destination$iv.add(rInvoke);
            }
        }
        return (List) destination$iv;
    }

    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Iterable<? extends T> mapNotNullTo, C destination, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element$iv : mapNotNullTo) {
            R rInvoke = transform.invoke(element$iv);
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C mapTo(Iterable<? extends T> mapTo, C destination, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapTo, "$this$mapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object item : mapTo) {
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    /* compiled from: _Collections.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\n\n\u0000\n\u0002\u0010(\n\u0002\b\u0002\u0010\u0000\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002H\n¢\u0006\u0002\b\u0003"}, m17d2 = {"<anonymous>", "", "T", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1 */
    static final class C04331<T> extends Lambda implements Functions<Iterator<? extends T>> {
        final /* synthetic */ Iterable $this_withIndex;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C04331(Iterable iterable) {
            super(0);
            iterable = iterable;
        }

        @Override // kotlin.jvm.functions.Functions
        public final Iterator<T> invoke() {
            return iterable.iterator();
        }
    }

    public static final <T> Iterable<IndexedValue<T>> withIndex(Iterable<? extends T> withIndex) {
        Intrinsics.checkNotNullParameter(withIndex, "$this$withIndex");
        return new Iterables11(new Functions<Iterator<? extends T>>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt.withIndex.1
            final /* synthetic */ Iterable $this_withIndex;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            C04331(Iterable withIndex2) {
                super(0);
                iterable = withIndex2;
            }

            @Override // kotlin.jvm.functions.Functions
            public final Iterator<T> invoke() {
                return iterable.iterator();
            }
        });
    }

    public static final <T> List<T> distinct(Iterable<? extends T> distinct) {
        Intrinsics.checkNotNullParameter(distinct, "$this$distinct");
        return CollectionsKt.toList(CollectionsKt.toMutableSet(distinct));
    }

    public static final <T, K> List<T> distinctBy(Iterable<? extends T> distinctBy, Functions2<? super T, ? extends K> selector) {
        Intrinsics.checkNotNullParameter(distinctBy, "$this$distinctBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        HashSet set = new HashSet();
        ArrayList list = new ArrayList();
        for (Object e : distinctBy) {
            if (set.add(selector.invoke(e))) {
                list.add(e);
            }
        }
        return list;
    }

    public static final <T> Set<T> intersect(Iterable<? extends T> intersect, Iterable<? extends T> other) {
        Intrinsics.checkNotNullParameter(intersect, "$this$intersect");
        Intrinsics.checkNotNullParameter(other, "other");
        Set set = CollectionsKt.toMutableSet(intersect);
        CollectionsKt.retainAll(set, other);
        return set;
    }

    public static final <T> Set<T> subtract(Iterable<? extends T> subtract, Iterable<? extends T> other) {
        Intrinsics.checkNotNullParameter(subtract, "$this$subtract");
        Intrinsics.checkNotNullParameter(other, "other");
        Set set = CollectionsKt.toMutableSet(subtract);
        CollectionsKt.removeAll(set, other);
        return set;
    }

    public static final <T> Set<T> toMutableSet(Iterable<? extends T> toMutableSet) {
        Intrinsics.checkNotNullParameter(toMutableSet, "$this$toMutableSet");
        return toMutableSet instanceof Collection ? new LinkedHashSet((Collection) toMutableSet) : (LinkedHashSet) CollectionsKt.toCollection(toMutableSet, new LinkedHashSet());
    }

    public static final <T> Set<T> union(Iterable<? extends T> union, Iterable<? extends T> other) {
        Intrinsics.checkNotNullParameter(union, "$this$union");
        Intrinsics.checkNotNullParameter(other, "other");
        Set set = CollectionsKt.toMutableSet(union);
        CollectionsKt.addAll(set, other);
        return set;
    }

    public static final <T> boolean all(Iterable<? extends T> all, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(all, "$this$all");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((all instanceof Collection) && ((Collection) all).isEmpty()) {
            return true;
        }
        for (Object element : all) {
            if (!predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(Iterable<? extends T> any) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        return any instanceof Collection ? !((Collection) any).isEmpty() : any.iterator().hasNext();
    }

    public static final <T> boolean any(Iterable<? extends T> any, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((any instanceof Collection) && ((Collection) any).isEmpty()) {
            return false;
        }
        for (Object element : any) {
            if (predicate.invoke(element).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int count(Iterable<? extends T> count) {
        Intrinsics.checkNotNullParameter(count, "$this$count");
        if (count instanceof Collection) {
            return ((Collection) count).size();
        }
        int count2 = 0;
        Iterator<? extends T> it = count.iterator();
        while (it.hasNext()) {
            it.next();
            count2++;
            if (count2 < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count2;
    }

    private static final <T> int count(Collection<? extends T> collection) {
        return collection.size();
    }

    public static final <T> int count(Iterable<? extends T> count, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(count, "$this$count");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((count instanceof Collection) && ((Collection) count).isEmpty()) {
            return 0;
        }
        int count2 = 0;
        for (Object element : count) {
            if (predicate.invoke(element).booleanValue() && (count2 = count2 + 1) < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt.throwCountOverflow();
            }
        }
        return count2;
    }

    public static final <T, R> R fold(Iterable<? extends T> fold, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(fold, "$this$fold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        Iterator<? extends T> it = fold.iterator();
        while (it.hasNext()) {
            rInvoke = operation.invoke(rInvoke, it.next());
        }
        return rInvoke;
    }

    public static final <T, R> R foldIndexed(Iterable<? extends T> foldIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldIndexed, "$this$foldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int i = 0;
        R rInvoke = r;
        for (Object obj : foldIndexed) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            rInvoke = operation.invoke(Integer.valueOf(i), rInvoke, obj);
            i = i2;
        }
        return rInvoke;
    }

    public static final <T, R> R foldRight(List<? extends T> foldRight, R r, Functions13<? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldRight, "$this$foldRight");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        if (!foldRight.isEmpty()) {
            ListIterator<? extends T> listIterator = foldRight.listIterator(foldRight.size());
            while (listIterator.hasPrevious()) {
                rInvoke = operation.invoke((Object) listIterator.previous(), rInvoke);
            }
        }
        return rInvoke;
    }

    public static final <T, R> R foldRightIndexed(List<? extends T> foldRightIndexed, R r, Functions17<? super Integer, ? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldRightIndexed, "$this$foldRightIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        if (!foldRightIndexed.isEmpty()) {
            ListIterator<? extends T> listIterator = foldRightIndexed.listIterator(foldRightIndexed.size());
            while (listIterator.hasPrevious()) {
                rInvoke = operation.invoke(Integer.valueOf(listIterator.previousIndex()), (Object) listIterator.previous(), rInvoke);
            }
        }
        return rInvoke;
    }

    public static final <T> void forEach(Iterable<? extends T> forEach, Functions2<? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(forEach, "$this$forEach");
        Intrinsics.checkNotNullParameter(action, "action");
        for (Object element : forEach) {
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(Iterable<? extends T> forEachIndexed, Functions13<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index = 0;
        for (Object item : forEachIndexed) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(index), item);
            index = index2;
        }
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: max */
    public static final Double m467max(Iterable<Double> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return CollectionsKt.maxOrNull((Iterable) max);
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: max */
    public static final Float m468max(Iterable<Float> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return CollectionsKt.maxOrNull((Iterable) max);
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T extends Comparable<? super T>> T max(Iterable<? extends T> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return (T) CollectionsKt.maxOrNull(max);
    }

    /* JADX WARN: Type inference failed for: r4v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r4v2 */
    /* JADX WARN: Type inference failed for: r4v3, types: [T] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    @Annotations(message = "Use maxByOrNull instead.", replaceWith = @Annotations8(expression = "maxByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T, R extends Comparable<? super R>> T maxBy(Iterable<? extends T> maxBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxBy, "$this$maxBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = maxBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = selector.invoke(next);
        do {
            Object next2 = it.next();
            R rInvoke2 = selector.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
                next = (T) next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r2v2 */
    /* JADX WARN: Type inference failed for: r2v3, types: [T] */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r2v9 */
    public static final <T, R extends Comparable<? super R>> T maxByOrNull(Iterable<? extends T> maxByOrNull, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxByOrNull, "$this$maxByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = maxByOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        ?? r2 = (Object) it.next();
        if (!it.hasNext()) {
            return r2;
        }
        R rInvoke = selector.invoke(r2);
        do {
            Object next = it.next();
            R rInvoke2 = selector.invoke(next);
            r2 = r2;
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
                r2 = (T) next;
            }
        } while (it.hasNext());
        return (T) r2;
    }

    private static final <T> double maxOf(Iterable<? extends T> iterable, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.max(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return dDoubleValue;
    }

    /* renamed from: maxOf */
    private static final <T> float m469maxOf(Iterable<? extends T> iterable, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.max(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return fFloatValue;
    }

    /* renamed from: maxOf */
    private static final <T, R extends Comparable<? super R>> R m470maxOf(Iterable<? extends T> iterable, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    /* renamed from: maxOfOrNull */
    private static final <T> Double m471maxOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.max(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return Double.valueOf(dDoubleValue);
    }

    /* renamed from: maxOfOrNull */
    private static final <T> Float m472maxOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.max(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return Float.valueOf(fFloatValue);
    }

    private static final <T, R extends Comparable<? super R>> R maxOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R maxOfWith(Iterable<? extends T> iterable, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) < 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R maxOfWithOrNull(Iterable<? extends T> iterable, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) < 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    /* renamed from: maxOrNull */
    public static final Double m473maxOrNull(Iterable<Double> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = iterator.next().doubleValue();
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            max = Math.max(max, e);
        }
        return Double.valueOf(max);
    }

    /* renamed from: maxOrNull */
    public static final Float m474maxOrNull(Iterable<Float> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = iterator.next().floatValue();
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            max = Math.max(max, e);
        }
        return Float.valueOf(max);
    }

    public static final <T extends Comparable<? super T>> T maxOrNull(Iterable<? extends T> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use maxWithOrNull instead.", replaceWith = @Annotations8(expression = "maxWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T> T maxWith(Iterable<? extends T> maxWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(maxWith, "$this$maxWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return (T) CollectionsKt.maxWithOrNull(maxWith, comparator);
    }

    public static final <T> T maxWithOrNull(Iterable<? extends T> maxWithOrNull, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(maxWithOrNull, "$this$maxWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<? extends T> it = maxWithOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) < 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: min */
    public static final Double m475min(Iterable<Double> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return CollectionsKt.minOrNull((Iterable) min);
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: min */
    public static final Float m476min(Iterable<Float> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return CollectionsKt.minOrNull((Iterable) min);
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T extends Comparable<? super T>> T min(Iterable<? extends T> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return (T) CollectionsKt.minOrNull(min);
    }

    /* JADX WARN: Type inference failed for: r4v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r4v2 */
    /* JADX WARN: Type inference failed for: r4v3, types: [T] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    @Annotations(message = "Use minByOrNull instead.", replaceWith = @Annotations8(expression = "minByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T, R extends Comparable<? super R>> T minBy(Iterable<? extends T> minBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minBy, "$this$minBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = minBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = selector.invoke(next);
        do {
            Object next2 = it.next();
            R rInvoke2 = selector.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
                next = (T) next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r2v2 */
    /* JADX WARN: Type inference failed for: r2v3, types: [T] */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r2v9 */
    public static final <T, R extends Comparable<? super R>> T minByOrNull(Iterable<? extends T> minByOrNull, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minByOrNull, "$this$minByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = minByOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        ?? r2 = (Object) it.next();
        if (!it.hasNext()) {
            return r2;
        }
        R rInvoke = selector.invoke(r2);
        do {
            Object next = it.next();
            R rInvoke2 = selector.invoke(next);
            r2 = r2;
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
                r2 = (T) next;
            }
        } while (it.hasNext());
        return (T) r2;
    }

    private static final <T> double minOf(Iterable<? extends T> iterable, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.min(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return dDoubleValue;
    }

    /* renamed from: minOf */
    private static final <T> float m477minOf(Iterable<? extends T> iterable, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.min(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return fFloatValue;
    }

    /* renamed from: minOf */
    private static final <T, R extends Comparable<? super R>> R m478minOf(Iterable<? extends T> iterable, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    /* renamed from: minOfOrNull */
    private static final <T> Double m479minOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.min(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return Double.valueOf(dDoubleValue);
    }

    /* renamed from: minOfOrNull */
    private static final <T> Float m480minOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.min(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return Float.valueOf(fFloatValue);
    }

    private static final <T, R extends Comparable<? super R>> R minOfOrNull(Iterable<? extends T> iterable, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R minOfWith(Iterable<? extends T> iterable, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) > 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R minOfWithOrNull(Iterable<? extends T> iterable, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) > 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    /* renamed from: minOrNull */
    public static final Double m481minOrNull(Iterable<Double> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = iterator.next().doubleValue();
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            min = Math.min(min, e);
        }
        return Double.valueOf(min);
    }

    /* renamed from: minOrNull */
    public static final Float m482minOrNull(Iterable<Float> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = iterator.next().floatValue();
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            min = Math.min(min, e);
        }
        return Float.valueOf(min);
    }

    public static final <T extends Comparable<? super T>> T minOrNull(Iterable<? extends T> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use minWithOrNull instead.", replaceWith = @Annotations8(expression = "minWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T> T minWith(Iterable<? extends T> minWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(minWith, "$this$minWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return (T) CollectionsKt.minWithOrNull(minWith, comparator);
    }

    public static final <T> T minWithOrNull(Iterable<? extends T> minWithOrNull, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(minWithOrNull, "$this$minWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<? extends T> it = minWithOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) > 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    public static final <T> boolean none(Iterable<? extends T> none) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        return none instanceof Collection ? ((Collection) none).isEmpty() : !none.iterator().hasNext();
    }

    public static final <T> boolean none(Iterable<? extends T> none, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((none instanceof Collection) && ((Collection) none).isEmpty()) {
            return true;
        }
        for (Object element : none) {
            if (predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T, C extends Iterable<? extends T>> C onEach(C onEach, Functions2<? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(onEach, "$this$onEach");
        Intrinsics.checkNotNullParameter(action, "action");
        for (Object element : onEach) {
            action.invoke(element);
        }
        return onEach;
    }

    public static final <T, C extends Iterable<? extends T>> C onEachIndexed(C onEachIndexed, Functions13<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(onEachIndexed, "$this$onEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index$iv = 0;
        for (Object item$iv : onEachIndexed) {
            int index$iv2 = index$iv + 1;
            if (index$iv < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(index$iv), item$iv);
            index$iv = index$iv2;
        }
        return onEachIndexed;
    }

    public static final <S, T extends S> S reduce(Iterable<? extends T> reduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduce, "$this$reduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduce.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            sInvoke = operation.invoke(sInvoke, (Object) it.next());
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceIndexed(Iterable<? extends T> reduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceIndexed.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        int i = 1;
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            sInvoke = operation.invoke(Integer.valueOf(i), sInvoke, (Object) it.next());
            i = i2;
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceIndexedOrNull(Iterable<? extends T> reduceIndexedOrNull, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexedOrNull, "$this$reduceIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceIndexedOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        int i = 1;
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            sInvoke = operation.invoke(Integer.valueOf(i), sInvoke, (Object) it.next());
            i = i2;
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceOrNull(Iterable<? extends T> reduceOrNull, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceOrNull, "$this$reduceOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            sInvoke = operation.invoke(sInvoke, (Object) it.next());
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceRight(List<? extends T> reduceRight, Functions13<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceRight, "$this$reduceRight");
        Intrinsics.checkNotNullParameter(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRight.listIterator(reduceRight.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S sInvoke = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            sInvoke = operation.invoke((Object) listIterator.previous(), sInvoke);
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceRightIndexed(List<? extends T> reduceRightIndexed, Functions17<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceRightIndexed, "$this$reduceRightIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightIndexed.listIterator(reduceRightIndexed.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S sInvoke = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            sInvoke = operation.invoke(Integer.valueOf(listIterator.previousIndex()), (Object) listIterator.previous(), sInvoke);
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceRightIndexedOrNull(List<? extends T> reduceRightIndexedOrNull, Functions17<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceRightIndexedOrNull, "$this$reduceRightIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightIndexedOrNull.listIterator(reduceRightIndexedOrNull.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S sInvoke = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            sInvoke = operation.invoke(Integer.valueOf(listIterator.previousIndex()), (Object) listIterator.previous(), sInvoke);
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceRightOrNull(List<? extends T> reduceRightOrNull, Functions13<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceRightOrNull, "$this$reduceRightOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        ListIterator<? extends T> listIterator = reduceRightOrNull.listIterator(reduceRightOrNull.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S sInvoke = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            sInvoke = operation.invoke((Object) listIterator.previous(), sInvoke);
        }
        return sInvoke;
    }

    public static final <T, R> List<R> runningFold(Iterable<? extends T> runningFold, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFold, "$this$runningFold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int estimatedSize = CollectionsKt.collectionSizeOrDefault(runningFold, 9);
        if (estimatedSize == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result = new ArrayList(estimatedSize + 1);
        result.add(r);
        Object accumulator = r;
        for (Object element : runningFold) {
            accumulator = operation.invoke(accumulator, element);
            result.add(accumulator);
        }
        return result;
    }

    public static final <T, R> List<R> runningFoldIndexed(Iterable<? extends T> runningFoldIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFoldIndexed, "$this$runningFoldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int estimatedSize = CollectionsKt.collectionSizeOrDefault(runningFoldIndexed, 9);
        if (estimatedSize == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result = new ArrayList(estimatedSize + 1);
        result.add(r);
        int index = 0;
        Object accumulator = r;
        for (Object element : runningFoldIndexed) {
            Integer numValueOf = Integer.valueOf(index);
            index++;
            accumulator = operation.invoke(numValueOf, accumulator, element);
            result.add(accumulator);
        }
        return result;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> List<S> runningReduce(Iterable<? extends T> runningReduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(runningReduce, "$this$runningReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = runningReduce.iterator();
        if (!it.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(runningReduce, 10));
        arrayList.add(next);
        Object obj = next;
        while (it.hasNext()) {
            S sInvoke = operation.invoke(obj, (Object) it.next());
            arrayList.add(sInvoke);
            obj = sInvoke;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <S, T extends S> List<S> runningReduceIndexed(Iterable<? extends T> runningReduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(runningReduceIndexed, "$this$runningReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = runningReduceIndexed.iterator();
        if (!it.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(runningReduceIndexed, 10));
        arrayList.add(next);
        int i = 1;
        Object obj = next;
        while (it.hasNext()) {
            Integer numValueOf = Integer.valueOf(i);
            i++;
            S sInvoke = operation.invoke(numValueOf, obj, (Object) it.next());
            arrayList.add(sInvoke);
            obj = sInvoke;
        }
        return arrayList;
    }

    public static final <T, R> List<R> scan(Iterable<? extends T> scan, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scan, "$this$scan");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int estimatedSize$iv = CollectionsKt.collectionSizeOrDefault(scan, 9);
        if (estimatedSize$iv == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result$iv = new ArrayList(estimatedSize$iv + 1);
        result$iv.add(r);
        Object accumulator$iv = r;
        for (Object element$iv : scan) {
            accumulator$iv = operation.invoke(accumulator$iv, element$iv);
            result$iv.add(accumulator$iv);
        }
        return result$iv;
    }

    public static final <T, R> List<R> scanIndexed(Iterable<? extends T> scanIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scanIndexed, "$this$scanIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int estimatedSize$iv = CollectionsKt.collectionSizeOrDefault(scanIndexed, 9);
        if (estimatedSize$iv == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList result$iv = new ArrayList(estimatedSize$iv + 1);
        result$iv.add(r);
        int index$iv = 0;
        Object accumulator$iv = r;
        for (Object element$iv : scanIndexed) {
            Integer numValueOf = Integer.valueOf(index$iv);
            index$iv++;
            accumulator$iv = operation.invoke(numValueOf, accumulator$iv, element$iv);
            result$iv.add(accumulator$iv);
        }
        return result$iv;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Annotations(level = Annotations3.ERROR, message = "Use runningReduce instead.", replaceWith = @Annotations8(expression = "runningReduce(operation)", imports = {}))
    public static final <S, T extends S> List<S> scanReduce(Iterable<? extends T> scanReduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(scanReduce, "$this$scanReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = scanReduce.iterator();
        if (!it.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(scanReduce, 10));
        arrayList.add(next);
        Object obj = next;
        while (it.hasNext()) {
            S sInvoke = operation.invoke(obj, (Object) it.next());
            arrayList.add(sInvoke);
            obj = sInvoke;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Annotations(level = Annotations3.ERROR, message = "Use runningReduceIndexed instead.", replaceWith = @Annotations8(expression = "runningReduceIndexed(operation)", imports = {}))
    public static final <S, T extends S> List<S> scanReduceIndexed(Iterable<? extends T> scanReduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(scanReduceIndexed, "$this$scanReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = scanReduceIndexed.iterator();
        if (!it.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T next = it.next();
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(scanReduceIndexed, 10));
        arrayList.add(next);
        int i = 1;
        Object obj = next;
        while (it.hasNext()) {
            Integer numValueOf = Integer.valueOf(i);
            i++;
            S sInvoke = operation.invoke(numValueOf, obj, (Object) it.next());
            arrayList.add(sInvoke);
            obj = sInvoke;
        }
        return arrayList;
    }

    public static final <T> int sumBy(Iterable<? extends T> sumBy, Functions2<? super T, Integer> selector) {
        Intrinsics.checkNotNullParameter(sumBy, "$this$sumBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int sum = 0;
        for (Object element : sumBy) {
            sum += selector.invoke(element).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(Iterable<? extends T> sumByDouble, Functions2<? super T, Double> selector) {
        Intrinsics.checkNotNullParameter(sumByDouble, "$this$sumByDouble");
        Intrinsics.checkNotNullParameter(selector, "selector");
        double sum = 0.0d;
        for (Object element : sumByDouble) {
            sum += selector.invoke(element).doubleValue();
        }
        return sum;
    }

    private static final <T> double sumOfDouble(Iterable<? extends T> iterable, Functions2<? super T, Double> functions2) {
        double sum = 0;
        for (Object element : iterable) {
            sum += functions2.invoke(element).doubleValue();
        }
        return sum;
    }

    private static final <T> int sumOfInt(Iterable<? extends T> iterable, Functions2<? super T, Integer> functions2) {
        int sum = 0;
        for (Object element : iterable) {
            sum += functions2.invoke(element).intValue();
        }
        return sum;
    }

    private static final <T> long sumOfLong(Iterable<? extends T> iterable, Functions2<? super T, Long> functions2) {
        long sum = 0;
        for (Object element : iterable) {
            sum += functions2.invoke(element).longValue();
        }
        return sum;
    }

    private static final <T> int sumOfUInt(Iterable<? extends T> iterable, Functions2<? super T, UInt> functions2) {
        int sum = UInt.m162constructorimpl(0);
        for (Object element : iterable) {
            sum = UInt.m162constructorimpl(functions2.invoke(element).getData() + sum);
        }
        return sum;
    }

    private static final <T> long sumOfULong(Iterable<? extends T> iterable, Functions2<? super T, ULong> functions2) {
        long sum = ULong.m232constructorimpl(0);
        for (Object element : iterable) {
            sum = ULong.m232constructorimpl(functions2.invoke(element).getData() + sum);
        }
        return sum;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> Iterable<T> requireNoNulls(Iterable<? extends T> requireNoNulls) {
        Intrinsics.checkNotNullParameter(requireNoNulls, "$this$requireNoNulls");
        for (Object element : requireNoNulls) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> List<T> requireNoNulls(List<? extends T> requireNoNulls) {
        Intrinsics.checkNotNullParameter(requireNoNulls, "$this$requireNoNulls");
        for (Object element : requireNoNulls) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + requireNoNulls + '.');
            }
        }
        return requireNoNulls;
    }

    public static final <T> List<List<T>> chunked(Iterable<? extends T> chunked, int size) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        return CollectionsKt.windowed(chunked, size, size, true);
    }

    public static final <T, R> List<R> chunked(Iterable<? extends T> chunked, int size, Functions2<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return CollectionsKt.windowed(chunked, size, size, true, transform);
    }

    public static final <T> List<T> minus(Iterable<? extends T> minus, T t) {
        boolean z;
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Iterable result = new ArrayList(CollectionsKt.collectionSizeOrDefault(minus, 10));
        boolean removed = false;
        for (T t2 : minus) {
            if (removed || !Intrinsics.areEqual(t2, t)) {
                z = true;
            } else {
                removed = true;
                z = false;
            }
            if (z) {
                ((Collection) result).add(t2);
            }
        }
        Iterable $this$filterTo$iv = (Collection) result;
        return (List) $this$filterTo$iv;
    }

    public static final <T> List<T> minus(Iterable<? extends T> minus, T[] elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        if (elements.length == 0) {
            return CollectionsKt.toList(minus);
        }
        HashSet other = ArraysKt.toHashSet(elements);
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    public static final <T> List<T> minus(Iterable<? extends T> minus, Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        Collection other = CollectionsKt.convertToSetForSetOperationWith(elements, minus);
        if (other.isEmpty()) {
            return CollectionsKt.toList(minus);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    public static final <T> List<T> minus(Iterable<? extends T> minus, Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        HashSet other = SequencesKt.toHashSet(elements);
        if (other.isEmpty()) {
            return CollectionsKt.toList(minus);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : minus) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    private static final <T> List<T> minusElement(Iterable<? extends T> iterable, T t) {
        return CollectionsKt.minus(iterable, t);
    }

    public static final <T> Tuples<List<T>, List<T>> partition(Iterable<? extends T> partition, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(partition, "$this$partition");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        for (Object element : partition) {
            if (predicate.invoke(element).booleanValue()) {
                first.add(element);
            } else {
                second.add(element);
            }
        }
        return new Tuples<>(first, second);
    }

    public static final <T> List<T> plus(Iterable<? extends T> plus, T t) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Object) t);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        result.add(t);
        return result;
    }

    public static final <T> List<T> plus(Collection<? extends T> plus, T t) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        ArrayList result = new ArrayList(plus.size() + 1);
        result.addAll(plus);
        result.add(t);
        return result;
    }

    public static final <T> List<T> plus(Iterable<? extends T> plus, T[] elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Object[]) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    public static final <T> List<T> plus(Collection<? extends T> plus, T[] elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        ArrayList result = new ArrayList(plus.size() + elements.length);
        result.addAll(plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    public static final <T> List<T> plus(Iterable<? extends T> plus, Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        if (plus instanceof Collection) {
            return CollectionsKt.plus((Collection) plus, (Iterable) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    public static final <T> List<T> plus(Collection<? extends T> plus, Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        if (elements instanceof Collection) {
            ArrayList result = new ArrayList(plus.size() + ((Collection) elements).size());
            result.addAll(plus);
            result.addAll((Collection) elements);
            return result;
        }
        ArrayList result2 = new ArrayList(plus);
        CollectionsKt.addAll(result2, elements);
        return result2;
    }

    public static final <T> List<T> plus(Iterable<? extends T> plus, Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    public static final <T> List<T> plus(Collection<? extends T> plus, Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        ArrayList result = new ArrayList(plus.size() + 10);
        result.addAll(plus);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    private static final <T> List<T> plusElement(Iterable<? extends T> iterable, T t) {
        return CollectionsKt.plus(iterable, t);
    }

    private static final <T> List<T> plusElement(Collection<? extends T> collection, T t) {
        return CollectionsKt.plus((Collection) collection, (Object) t);
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z);
    }

    public static final <T> List<List<T>> windowed(Iterable<? extends T> windowed, int size, int step, boolean partialWindows) {
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        SlidingWindow3.checkWindowSizeStep(size, step);
        if ((windowed instanceof RandomAccess) && (windowed instanceof List)) {
            int thisSize = ((List) windowed).size();
            int resultCapacity = (thisSize / step) + (thisSize % step == 0 ? 0 : 1);
            ArrayList result = new ArrayList(resultCapacity);
            int index = 0;
            while (index >= 0 && thisSize > index) {
                int windowSize = RangesKt.coerceAtMost(size, thisSize - index);
                if (windowSize < size && !partialWindows) {
                    break;
                }
                ArrayList arrayList = new ArrayList(windowSize);
                for (int i = 0; i < windowSize; i++) {
                    int it = i;
                    arrayList.add(((List) windowed).get(it + index));
                }
                result.add(arrayList);
                index += step;
            }
            return result;
        }
        ArrayList result2 = new ArrayList();
        Iterator $this$forEach$iv = SlidingWindow3.windowedIterator(windowed.iterator(), size, step, partialWindows, false);
        while ($this$forEach$iv.hasNext()) {
            Object element$iv = $this$forEach$iv.next();
            List it2 = (List) element$iv;
            result2.add(it2);
        }
        return result2;
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, Functions2 functions2, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z, functions2);
    }

    public static final <T, R> List<R> windowed(Iterable<? extends T> windowed, int size, int step, boolean partialWindows, Functions2<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        SlidingWindow3.checkWindowSizeStep(size, step);
        if ((windowed instanceof RandomAccess) && (windowed instanceof List)) {
            int thisSize = ((List) windowed).size();
            int resultCapacity = (thisSize / step) + (thisSize % step == 0 ? 0 : 1);
            ArrayList result = new ArrayList(resultCapacity);
            SlidingWindow window = new SlidingWindow((List) windowed);
            int index = 0;
            while (index >= 0 && thisSize > index) {
                int windowSize = RangesKt.coerceAtMost(size, thisSize - index);
                if (!partialWindows && windowSize < size) {
                    break;
                }
                window.move(index, index + windowSize);
                result.add(transform.invoke(window));
                index += step;
            }
            return result;
        }
        ArrayList result2 = new ArrayList();
        Iterator $this$forEach$iv = SlidingWindow3.windowedIterator(windowed.iterator(), size, step, partialWindows, true);
        while ($this$forEach$iv.hasNext()) {
            Object element$iv = $this$forEach$iv.next();
            List it = (List) element$iv;
            result2.add(transform.invoke(it));
        }
        return result2;
    }

    public static final <T, R> List<Tuples<T, R>> zip(Iterable<? extends T> zip, R[] other) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        int arraySize$iv = other.length;
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), arraySize$iv));
        int i$iv = 0;
        for (Object element$iv : zip) {
            if (i$iv >= arraySize$iv) {
                break;
            }
            list$iv.add(Tuples3.m24to(element$iv, other[i$iv]));
            i$iv++;
        }
        return list$iv;
    }

    public static final <T, R, V> List<V> zip(Iterable<? extends T> zip, R[] other, Functions13<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int arraySize = other.length;
        ArrayList list = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), arraySize));
        int i = 0;
        for (Object element : zip) {
            if (i >= arraySize) {
                break;
            }
            list.add(transform.invoke(element, other[i]));
            i++;
        }
        return list;
    }

    public static final <T, R> List<Tuples<T, R>> zip(Iterable<? extends T> zip, Iterable<? extends R> other) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Iterator first$iv = zip.iterator();
        Iterator second$iv = other.iterator();
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (first$iv.hasNext() && second$iv.hasNext()) {
            Object t1 = first$iv.next();
            Object t2 = second$iv.next();
            list$iv.add(Tuples3.m24to(t1, t2));
        }
        return list$iv;
    }

    public static final <T, R, V> List<V> zip(Iterable<? extends T> zip, Iterable<? extends R> other, Functions13<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator<? extends T> it = zip.iterator();
        Iterator<? extends R> it2 = other.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(zip, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(transform.invoke((Object) it.next(), (Object) it2.next()));
        }
        return arrayList;
    }

    public static final <T> List<Tuples<T, T>> zipWithNext(Iterable<? extends T> zipWithNext) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        Iterator iterator$iv = zipWithNext.iterator();
        if (!iterator$iv.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result$iv = new ArrayList();
        Object current$iv = iterator$iv.next();
        while (iterator$iv.hasNext()) {
            Object next$iv = iterator$iv.next();
            Object a = current$iv;
            result$iv.add(Tuples3.m24to(a, next$iv));
            current$iv = next$iv;
        }
        return result$iv;
    }

    public static final <T, R> List<R> zipWithNext(Iterable<? extends T> zipWithNext, Functions13<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Iterator iterator = zipWithNext.iterator();
        if (!iterator.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result = new ArrayList();
        Object current = iterator.next();
        while (iterator.hasNext()) {
            Object next = iterator.next();
            result.add(transform.invoke(current, next));
            current = next;
        }
        return result;
    }

    public static final <T, A extends Appendable> A joinTo(Iterable<? extends T> joinTo, A buffer, CharSequence separator, CharSequence prefix, CharSequence postfix, int limit, CharSequence truncated, Functions2<? super T, ? extends CharSequence> functions2) throws IOException {
        Intrinsics.checkNotNullParameter(joinTo, "$this$joinTo");
        Intrinsics.checkNotNullParameter(buffer, "buffer");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (Object element : joinTo) {
            count++;
            if (count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt.appendElement(buffer, element, functions2);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Functions2 functions2, int i2, Object obj) {
        if ((i2 & 1) != 0) {
        }
        if ((i2 & 2) != 0) {
        }
        CharSequence charSequence5 = charSequence2;
        if ((i2 & 4) != 0) {
        }
        CharSequence charSequence6 = charSequence3;
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
        }
        CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            functions2 = (Functions2) null;
        }
        return CollectionsKt.joinToString(iterable, charSequence, charSequence5, charSequence6, i3, charSequence7, functions2);
    }

    public static final <T> String joinToString(Iterable<? extends T> joinToString, CharSequence separator, CharSequence prefix, CharSequence postfix, int limit, CharSequence truncated, Functions2<? super T, ? extends CharSequence> functions2) {
        Intrinsics.checkNotNullParameter(joinToString, "$this$joinToString");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        String string = ((StringBuilder) CollectionsKt.joinTo(joinToString, new StringBuilder(), separator, prefix, postfix, limit, truncated, functions2)).toString();
        Intrinsics.checkNotNullExpressionValue(string, "joinTo(StringBuilder(), …ed, transform).toString()");
        return string;
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final <T> Iterable<T> asIterable(Iterable<? extends T> iterable) {
        return iterable;
    }

    public static final <T> Sequence<T> asSequence(final Iterable<? extends T> asSequence) {
        Intrinsics.checkNotNullParameter(asSequence, "$this$asSequence");
        return new Sequence<T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                return asSequence.iterator();
            }
        };
    }

    public static final double averageOfByte(Iterable<Byte> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Byte> it = average.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfShort(Iterable<Short> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Short> it = average.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfInt(Iterable<Integer> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Integer> it = average.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfLong(Iterable<Long> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Long> it = average.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfFloat(Iterable<Float> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Float> it = average.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfDouble(Iterable<Double> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Double> it = average.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final int sumOfByte(Iterable<Byte> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Byte> it = sum.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final int sumOfShort(Iterable<Short> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Short> it = sum.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final int sumOfInt(Iterable<Integer> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Integer> it = sum.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final long sumOfLong(Iterable<Long> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        long sum2 = 0;
        Iterator<Long> it = sum.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final float sumOfFloat(Iterable<Float> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        float sum2 = 0.0f;
        Iterator<Float> it = sum.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final double sumOfDouble(Iterable<Double> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        double sum2 = 0.0d;
        Iterator<Double> it = sum.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum2 += element;
        }
        return sum2;
    }
}
