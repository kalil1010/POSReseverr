package kotlin.sequences;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Annotations;
import kotlin.Annotations2;
import kotlin.Annotations3;
import kotlin.Annotations8;
import kotlin.Metadata;
import kotlin.Tuples;
import kotlin.Tuples3;
import kotlin.UInt;
import kotlin.ULong;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindow3;
import kotlin.comparisons.Comparisons;
import kotlin.comparisons.ComparisonsKt;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.jvm.internal.ContinuationImpl5;
import kotlin.coroutines.jvm.internal.DebugMetadata;
import kotlin.internal.PlatformImplementations2;
import kotlin.jvm.functions.Functions13;
import kotlin.jvm.functions.Functions17;
import kotlin.jvm.functions.Functions2;
import kotlin.jvm.internal.FunctionReferenceImpl;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.jvm.internal.Ref;
import kotlin.text.StringsKt;

/* compiled from: _Sequences.kt */
@Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0098\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u001a\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0013\n\u0002\u0010\u0011\n\u0002\b+\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a0\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aT\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\bø\u0001\u0000\u001aB\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000\u001a\\\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000\u001a]\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001aw\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001ao\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001aB\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\bø\u0001\u0000\u001a]\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a0\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001ad\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\u0086\b¢\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001aO\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010R\u001aO\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010R\u001a7\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a7\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a7\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001aC\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0\u0005H\u0007¢\u0006\u0002\b[\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010\\\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0BH\u0007¢\u0006\u0002\b]\u001aX\u0010\\\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030BH\u0007¢\u0006\u0002\b^\u001ar\u0010_\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0BH\u0087\bø\u0001\u0000¢\u0006\u0004\b`\u0010H\u001ar\u0010_\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2-\u0010\u000e\u001a)\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030BH\u0087\bø\u0001\u0000¢\u0006\u0004\ba\u0010H\u001a]\u0010b\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\b0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0004\bc\u0010R\u001a[\u0010b\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010R\u001aX\u0010d\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010h\u001am\u0010i\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010k\u001a0\u0010l\u001a\u00020m\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010n\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0\u0005H\u0086\bø\u0001\u0000\u001aE\u0010o\u001a\u00020m\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010n\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0BH\u0086\bø\u0001\u0000\u001aH\u0010p\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000\u001ab\u0010p\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000\u001aa\u0010q\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0017\u001a{\u0010q\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010\u0018\u001aD\u0010s\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0t\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\bø\u0001\u0000\u001a(\u0010u\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010v\u001a0\u0010w\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a0\u0010x\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a\u0080\u0001\u0010y\u001a\u0002Hz\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010z*\u00060{j\u0002`|*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010}\u001a\u0002Hz2\b\b\u0002\u0010~\u001a\u00020\u007f2\t\b\u0002\u0010\u0080\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0081\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0082\u0001\u001a\u00020$2\t\b\u0002\u0010\u0083\u0001\u001a\u00020\u007f2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u007f\u0018\u00010\u0005¢\u0006\u0003\u0010\u0084\u0001\u001af\u0010\u0085\u0001\u001a\u00030\u0086\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010~\u001a\u00020\u007f2\t\b\u0002\u0010\u0080\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0081\u0001\u001a\u00020\u007f2\t\b\u0002\u0010\u0082\u0001\u001a\u00020$2\t\b\u0002\u0010\u0083\u0001\u001a\u00020\u007f2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u007f\u0018\u00010\u0005\u001a\u001c\u0010\u0087\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a6\u0010\u0087\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a)\u0010\u0088\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010v\u001a\u001e\u0010\u0089\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a8\u0010\u0089\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a7\u0010\u008a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u008b\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u008c\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001aq\u0010\u008d\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010H\u001ak\u0010\u008e\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\bø\u0001\u0000¢\u0006\u0002\u0010H\u001a=\u0010\u008f\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001a\\\u0010\u0090\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010R\u001aV\u0010\u0091\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010R\u001a,\u0010\u0092\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0096\u0001\u001aI\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001aI\u0010\u0098\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001aH\u0010\u0099\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009a\u0001\u001a1\u0010\u0099\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000\u001a1\u0010\u0099\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000\u001aJ\u0010\u009b\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009a\u0001\u001a9\u0010\u009b\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009c\u0001\u001a9\u0010\u009b\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009d\u0001\u001a\\\u0010\u009e\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`¡\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¢\u0001\u001a^\u0010£\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`¡\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¢\u0001\u001a,\u0010¤\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010¤\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010¤\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0096\u0001\u001a@\u0010¥\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`¡\u0001H\u0007¢\u0006\u0003\u0010¦\u0001\u001a@\u0010§\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`¡\u0001H\u0007¢\u0006\u0003\u0010¦\u0001\u001a,\u0010¨\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010¨\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010¨\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0096\u0001\u001aI\u0010©\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001aI\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0002\u0010U\u001aH\u0010«\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009a\u0001\u001a1\u0010«\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000\u001a1\u0010«\u0001\u001a\u00020\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000\u001aJ\u0010¬\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009a\u0001\u001a9\u0010¬\u0001\u001a\u0004\u0018\u00010\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009c\u0001\u001a9\u0010¬\u0001\u001a\u0004\u0018\u00010\"\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\"0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010\u009d\u0001\u001a\\\u0010\u00ad\u0001\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`¡\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¢\u0001\u001a^\u0010®\u0001\u001a\u0004\u0018\u0001H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H-0 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H-`¡\u00012\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\u0010¢\u0001\u001a,\u0010¯\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007¢\u0006\u0003\u0010\u0094\u0001\u001a\u001b\u0010¯\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0095\u0001\u001a\u001b\u0010¯\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0096\u0001\u001a@\u0010°\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`¡\u0001H\u0007¢\u0006\u0003\u0010¦\u0001\u001a@\u0010±\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`¡\u0001H\u0007¢\u0006\u0003\u0010¦\u0001\u001a.\u0010²\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010³\u0001\u001a8\u0010²\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010´\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020µ\u0001H\u0086\u0002¢\u0006\u0003\u0010¶\u0001\u001a/\u0010²\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010´\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010²\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010´\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010·\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010³\u0001\u001a\u0017\u0010¸\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a1\u0010¸\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a3\u0010¹\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010n\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0\u0005H\u0007\u001aH\u0010º\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010n\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020m0BH\u0007\u001aI\u0010»\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000\u001a.\u0010¼\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010³\u0001\u001a8\u0010¼\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010´\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020µ\u0001H\u0086\u0002¢\u0006\u0003\u0010¶\u0001\u001a/\u0010¼\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010´\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010¼\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010´\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010½\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010³\u0001\u001a[\u0010¾\u0001\u001a\u0003H¿\u0001\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010BH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010À\u0001\u001ap\u0010Á\u0001\u001a\u0003H¿\u0001\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010jH\u0086\bø\u0001\u0000¢\u0006\u0003\u0010Â\u0001\u001ar\u0010Ã\u0001\u001a\u0005\u0018\u0001H¿\u0001\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010jH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010Â\u0001\u001a]\u0010Ä\u0001\u001a\u0005\u0018\u0001H¿\u0001\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010BH\u0087\bø\u0001\u0000¢\u0006\u0003\u0010À\u0001\u001a#\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\\\u0010Æ\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0007¢\u0006\u0003\u0010Ç\u0001\u001aq\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0007¢\u0006\u0003\u0010É\u0001\u001aW\u0010Ê\u0001\u001a\t\u0012\u0005\u0012\u0003H¿\u00010\u0003\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010BH\u0007\u001al\u0010Ë\u0001\u001a\t\u0012\u0005\u0012\u0003H¿\u00010\u0003\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010jH\u0007\u001a\\\u0010Ì\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2'\u0010f\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0007¢\u0006\u0003\u0010Ç\u0001\u001aq\u0010Í\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010e\u001a\u0002H-2<\u0010f\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0jH\u0007¢\u0006\u0003\u0010É\u0001\u001aW\u0010Î\u0001\u001a\t\u0012\u0005\u0012\u0003H¿\u00010\u0003\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010f\u001a%\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010BH\u0007\u001al\u0010Ï\u0001\u001a\t\u0012\u0005\u0012\u0003H¿\u00010\u0003\"\u0005\b\u0000\u0010¿\u0001\"\t\b\u0001\u0010\u0002*\u0003H¿\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010f\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¿\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(g\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¿\u00010jH\u0007\u001a\u001c\u0010Ð\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a6\u0010Ð\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a\u001e\u0010Ñ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a8\u0010Ñ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\bø\u0001\u0000¢\u0006\u0002\u0010U\u001a(\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aL\u0010Ó\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001aL\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\bø\u0001\u0000\u001a(\u0010Õ\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0093\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010Ö\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u009f\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020 \u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`¡\u0001\u001a\u0019\u0010×\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\bØ\u0001\u001a\u0019\u0010×\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\bÙ\u0001\u001a\u0019\u0010×\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\bÚ\u0001\u001a\u0019\u0010×\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\bÛ\u0001\u001a\u0019\u0010×\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\bÜ\u0001\u001a\u0019\u0010×\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\bÝ\u0001\u001a1\u0010Þ\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\bø\u0001\u0000\u001a1\u0010ß\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\bø\u0001\u0000\u001a7\u0010à\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\bÙ\u0001\u001a7\u0010à\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\bÛ\u0001\u001a7\u0010à\u0001\u001a\u00020&\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020&0\u0005H\u0087\bø\u0001\u0000¢\u0006\u0003\bÜ\u0001\u001a?\u0010à\u0001\u001a\u00030á\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u00105\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030á\u00010\u0005H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\bâ\u0001\u0010ã\u0001\u001a?\u0010à\u0001\u001a\u00030ä\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0013\u00105\u001a\u000f\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030ä\u00010\u0005H\u0087\bø\u0001\u0001ø\u0001\u0000¢\u0006\u0006\bå\u0001\u0010æ\u0001\u001a%\u0010ç\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010è\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010é\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001a)\u0010ê\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020ë\u0001j\t\u0012\u0004\u0012\u0002H\u0002`ì\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010í\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010î\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020r\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010ï\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020ð\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010ñ\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020ò\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010ó\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010ô\u0001\u001a\u00020$2\t\b\u0002\u0010õ\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010ó\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010ô\u0001\u001a\u00020$2\t\b\u0002\u0010õ\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010ö\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020÷\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010ø\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010ù\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ar\u0010ø\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010ù\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(ú\u0001\u0012\u0014\u0012\u0012H-¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(û\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010ü\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010ü\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(ú\u0001\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(û\u0001\u0012\u0004\u0012\u0002H-0BH\u0007\u0082\u0002\u000b\n\u0005\b\u009920\u0001\n\u0002\b\u0019¨\u0006ý\u0001"}, m17d2 = {"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapIterable", "flatMapIndexed", "flatMapIndexedIterable", "flatMapIndexedSequence", "flatMapIndexedTo", "flatMapIndexedIterableTo", "flatMapIndexedSequenceTo", "flatMapTo", "flatMapIterableTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxByOrNull", "maxOf", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Comparable;", "maxOfOrNull", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "maxOfWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "maxOfWithOrNull", "maxOrNull", "maxWith", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWithOrNull", "min", "minBy", "minByOrNull", "minOf", "minOfOrNull", "minOfWith", "minOfWithOrNull", "minOrNull", "minWith", "minWithOrNull", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "onEachIndexed", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "requireNoNulls", "runningFold", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "runningFoldIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "scanReduce", "scanReduceIndexed", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "sumOf", "Lkotlin/UInt;", "sumOfUInt", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I", "Lkotlin/ULong;", "sumOfULong", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)J", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, m18k = 5, m19mv = {1, 4, 0}, m21xi = 1, m22xs = "kotlin/sequences/SequencesKt")
/* renamed from: kotlin.sequences.SequencesKt___SequencesKt */
/* loaded from: classes.dex */
public class _Sequences extends _SequencesJvm {
    public static final <T> boolean contains(Sequence<? extends T> contains, T t) {
        Intrinsics.checkNotNullParameter(contains, "$this$contains");
        return SequencesKt.indexOf(contains, t) >= 0;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0004\b\u0004\u0010\u0005"}, m17d2 = {"<anonymous>", "T", "it", "", "invoke", "(I)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$elementAt$1 */
    static final class C04881<T> extends Lambda implements Functions2<Integer, T> {
        final /* synthetic */ int $index;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C04881(int i) {
            super(1);
            i = i;
        }

        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Object invoke(Integer num) {
            return invoke(num.intValue());
        }

        public final T invoke(int it) {
            throw new IndexOutOfBoundsException("Sequence doesn't contain element at index " + i + '.');
        }
    }

    public static final <T> T elementAt(Sequence<? extends T> elementAt, int i) {
        Intrinsics.checkNotNullParameter(elementAt, "$this$elementAt");
        return (T) SequencesKt.elementAtOrElse(elementAt, i, new Functions2<Integer, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.elementAt.1
            final /* synthetic */ int $index;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            C04881(int i2) {
                super(1);
                i = i2;
            }

            @Override // kotlin.jvm.functions.Functions2
            public /* bridge */ /* synthetic */ Object invoke(Integer num) {
                return invoke(num.intValue());
            }

            public final T invoke(int it) {
                throw new IndexOutOfBoundsException("Sequence doesn't contain element at index " + i + '.');
            }
        });
    }

    public static final <T> T elementAtOrElse(Sequence<? extends T> elementAtOrElse, int index, Functions2<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkNotNullParameter(elementAtOrElse, "$this$elementAtOrElse");
        Intrinsics.checkNotNullParameter(defaultValue, "defaultValue");
        if (index < 0) {
            return defaultValue.invoke(Integer.valueOf(index));
        }
        int count = 0;
        for (T t : elementAtOrElse) {
            int count2 = count + 1;
            if (index != count) {
                count = count2;
            } else {
                return t;
            }
        }
        return defaultValue.invoke(Integer.valueOf(index));
    }

    public static final <T> T elementAtOrNull(Sequence<? extends T> elementAtOrNull, int index) {
        Intrinsics.checkNotNullParameter(elementAtOrNull, "$this$elementAtOrNull");
        if (index < 0) {
            return null;
        }
        int count = 0;
        for (T t : elementAtOrNull) {
            int count2 = count + 1;
            if (index != count) {
                count = count2;
            } else {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Type inference failed for: r4v2, types: [T, java.lang.Object] */
    private static final <T> T find(Sequence<? extends T> sequence, Functions2<? super T, Boolean> functions2) {
        for (T t : sequence) {
            if (functions2.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.lang.Object] */
    private static final <T> T findLast(Sequence<? extends T> sequence, Functions2<? super T, Boolean> functions2) {
        T t = null;
        for (T t2 : sequence) {
            if (functions2.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> T first(Sequence<? extends T> first) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        Iterator iterator = first.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        return iterator.next();
    }

    /* JADX WARN: Type inference failed for: r2v2, types: [T, java.lang.Object] */
    public static final <T> T first(Sequence<? extends T> first, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(first, "$this$first");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : first) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    public static final <T> T firstOrNull(Sequence<? extends T> firstOrNull) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        Iterator iterator = firstOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        return iterator.next();
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    public static final <T> T firstOrNull(Sequence<? extends T> firstOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(firstOrNull, "$this$firstOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : firstOrNull) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    public static final <T> int indexOf(Sequence<? extends T> indexOf, T t) {
        Intrinsics.checkNotNullParameter(indexOf, "$this$indexOf");
        int index = 0;
        for (Object item : indexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(Sequence<? extends T> indexOfFirst, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfFirst, "$this$indexOfFirst");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        for (Object item : indexOfFirst) {
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(Sequence<? extends T> indexOfLast, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(indexOfLast, "$this$indexOfLast");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (Object item : indexOfLast) {
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(item).booleanValue()) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> T last(Sequence<? extends T> last) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        Iterator iterator = last.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            next = iterator.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T last(Sequence<? extends T> last, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(last, "$this$last");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : last) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (!z) {
            throw new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return t;
    }

    public static final <T> int lastIndexOf(Sequence<? extends T> lastIndexOf, T t) {
        Intrinsics.checkNotNullParameter(lastIndexOf, "$this$lastIndexOf");
        int lastIndex = -1;
        int index = 0;
        for (Object item : lastIndexOf) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, item)) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> T lastOrNull(Sequence<? extends T> lastOrNull) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        Iterator iterator = lastOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            next = iterator.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    public static final <T> T lastOrNull(Sequence<? extends T> lastOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(lastOrNull, "$this$lastOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        for (T t2 : lastOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> T single(Sequence<? extends T> single) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        Iterator iterator = single.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        T next = iterator.next();
        if (iterator.hasNext()) {
            throw new IllegalArgumentException("Sequence has more than one element.");
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T single(Sequence<? extends T> single, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(single, "$this$single");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : single) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Sequence contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (!z) {
            throw new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return t;
    }

    public static final <T> T singleOrNull(Sequence<? extends T> singleOrNull) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        Iterator iterator = singleOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        if (iterator.hasNext()) {
            return null;
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1, types: [java.lang.Object] */
    public static final <T> T singleOrNull(Sequence<? extends T> singleOrNull, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(singleOrNull, "$this$singleOrNull");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : singleOrNull) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> Sequence<T> drop(Sequence<? extends T> drop, int n) {
        Intrinsics.checkNotNullParameter(drop, "$this$drop");
        if (n >= 0) {
            return n == 0 ? drop : drop instanceof Sequences15 ? ((Sequences15) drop).drop(n) : new Sequences14(drop, n);
        }
        throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
    }

    public static final <T> Sequence<T> dropWhile(Sequence<? extends T> dropWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(dropWhile, "$this$dropWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new Sequences16(dropWhile, predicate);
    }

    public static final <T> Sequence<T> filter(Sequence<? extends T> filter, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filter, "$this$filter");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new Sequences18(filter, true, predicate);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u00022\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0004H\n¢\u0006\u0002\b\u0005"}, m17d2 = {"<anonymous>", "", "T", "it", "Lkotlin/collections/IndexedValue;", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1 */
    static final class C04891<T> extends Lambda implements Functions2<IndexedValue<? extends T>, Boolean> {
        C04891() {
            super(1);
        }

        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
            return Boolean.valueOf(invoke((IndexedValue) obj));
        }

        public final boolean invoke(IndexedValue<? extends T> it) {
            Intrinsics.checkNotNullParameter(it, "it");
            return ((Boolean) functions13.invoke(Integer.valueOf(it.getIndex()), it.getValue())).booleanValue();
        }
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0003H\n¢\u0006\u0004\b\u0004\u0010\u0005"}, m17d2 = {"<anonymous>", "T", "it", "Lkotlin/collections/IndexedValue;", "invoke", "(Lkotlin/collections/IndexedValue;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2 */
    static final class C04902<T> extends Lambda implements Functions2<IndexedValue<? extends T>, T> {
        public static final C04902 INSTANCE = ;

        C04902() {
        }

        @Override // kotlin.jvm.functions.Functions2
        public final T invoke(IndexedValue<? extends T> it) {
            Intrinsics.checkNotNullParameter(it, "it");
            return it.getValue();
        }
    }

    public static final <T> Sequence<T> filterIndexed(Sequence<? extends T> filterIndexed, Functions13<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterIndexed, "$this$filterIndexed");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new Sequences31(new Sequences18(new Sequences21(filterIndexed), true, new Functions2<IndexedValue<? extends T>, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.filterIndexed.1
            C04891() {
                super(1);
            }

            @Override // kotlin.jvm.functions.Functions2
            public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                return Boolean.valueOf(invoke((IndexedValue) obj));
            }

            public final boolean invoke(IndexedValue<? extends T> it) {
                Intrinsics.checkNotNullParameter(it, "it");
                return ((Boolean) functions13.invoke(Integer.valueOf(it.getIndex()), it.getValue())).booleanValue();
            }
        }), C04902.INSTANCE);
    }

    public static final <T, C extends Collection<? super T>> C filterIndexedTo(Sequence<? extends T> filterIndexedTo, C destination, Functions13<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterIndexedTo, "$this$filterIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int index = 0;
        for (Object item$iv : filterIndexedTo) {
            int index$iv = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(Integer.valueOf(index), item$iv).booleanValue()) {
                destination.add(item$iv);
            }
            index = index$iv;
        }
        return destination;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\u0000\n\u0000\u0010\u0000\u001a\u00020\u0001\"\u0006\b\u0000\u0010\u0002\u0018\u00012\b\u0010\u0003\u001a\u0004\u0018\u00010\u0004H\n¢\u0006\u0002\b\u0005"}, m17d2 = {"<anonymous>", "", "R", "it", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 */
    public static final class C04911 extends Lambda implements Functions2<Object, Boolean> {
        public static final C04911 INSTANCE = ;

        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
            return Boolean.valueOf(invoke2(obj));
        }

        /* renamed from: invoke */
        public final boolean invoke2(Object it) {
            Intrinsics.reifiedOperationMarker(3, "R");
            return it instanceof Object;
        }
    }

    public static final /* synthetic */ <R> Sequence<R> filterIsInstance(Sequence<?> filterIsInstance) {
        Intrinsics.checkNotNullParameter(filterIsInstance, "$this$filterIsInstance");
        Intrinsics.needClassReification();
        Sequence<R> sequenceFilter = SequencesKt.filter(filterIsInstance, C04911.INSTANCE);
        if (sequenceFilter != null) {
            return sequenceFilter;
        }
        throw new NullPointerException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
    }

    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(Sequence<?> filterIsInstanceTo, C destination) {
        Intrinsics.checkNotNullParameter(filterIsInstanceTo, "$this$filterIsInstanceTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        for (Object element : filterIsInstanceTo) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element instanceof Object) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T> Sequence<T> filterNot(Sequence<? extends T> filterNot, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterNot, "$this$filterNot");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new Sequences18(filterNot, false, predicate);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0000\u001a\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\u00032\b\u0010\u0004\u001a\u0004\u0018\u0001H\u0002H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "T", "", "it", "invoke", "(Ljava/lang/Object;)Z"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 */
    static final class C04921<T> extends Lambda implements Functions2<T, Boolean> {
        public static final C04921 INSTANCE = ;

        C04921() {
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // kotlin.jvm.functions.Functions2
        public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
            return Boolean.valueOf(invoke2((C04921<T>) obj));
        }

        /* renamed from: invoke */
        public final boolean invoke2(T t) {
            return t == null;
        }
    }

    public static final <T> Sequence<T> filterNotNull(Sequence<? extends T> filterNotNull) {
        Intrinsics.checkNotNullParameter(filterNotNull, "$this$filterNotNull");
        Sequence<T> sequenceFilterNot = SequencesKt.filterNot(filterNotNull, C04921.INSTANCE);
        if (sequenceFilterNot != null) {
            return sequenceFilterNot;
        }
        throw new NullPointerException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
    }

    public static final <C extends Collection<? super T>, T> C filterNotNullTo(Sequence<? extends T> filterNotNullTo, C destination) {
        Intrinsics.checkNotNullParameter(filterNotNullTo, "$this$filterNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        for (T t : filterNotNullTo) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C filterNotTo(Sequence<? extends T> filterNotTo, C destination, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterNotTo, "$this$filterNotTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : filterNotTo) {
            if (!predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C filterTo(Sequence<? extends T> filterTo, C destination, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(filterTo, "$this$filterTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : filterTo) {
            if (predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    public static final <T> Sequence<T> take(Sequence<? extends T> take, int n) {
        Intrinsics.checkNotNullParameter(take, "$this$take");
        if (n >= 0) {
            return n == 0 ? SequencesKt.emptySequence() : take instanceof Sequences15 ? ((Sequences15) take).take(n) : new Sequences28(take, n);
        }
        throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
    }

    public static final <T> Sequence<T> takeWhile(Sequence<? extends T> takeWhile, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(takeWhile, "$this$takeWhile");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new Sequences29(takeWhile, predicate);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$sorted$1", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$sorted$1 */
    public static final class C05071<T> implements Sequence<T> {
        final /* synthetic */ Sequence $this_sorted;

        C05071(Sequence<? extends T> sequence) {
            sequence = sequence;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            List sortedList = SequencesKt.toMutableList(sequence);
            CollectionsKt.sort(sortedList);
            return sortedList.iterator();
        }
    }

    public static final <T extends Comparable<? super T>> Sequence<T> sorted(Sequence<? extends T> sorted) {
        Intrinsics.checkNotNullParameter(sorted, "$this$sorted");
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.sorted.1
            final /* synthetic */ Sequence $this_sorted;

            C05071(Sequence<? extends T> sorted2) {
                sequence = sorted2;
            }

            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                List sortedList = SequencesKt.toMutableList(sequence);
                CollectionsKt.sort(sortedList);
                return sortedList.iterator();
            }
        };
    }

    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(Sequence<? extends T> sortedBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortedBy, "$this$sortedBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return SequencesKt.sortedWith(sortedBy, new Comparisons.C04372(selector));
    }

    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(Sequence<? extends T> sortedByDescending, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(sortedByDescending, "$this$sortedByDescending");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return SequencesKt.sortedWith(sortedByDescending, new Comparisons.C04391(selector));
    }

    public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(Sequence<? extends T> sortedDescending) {
        Intrinsics.checkNotNullParameter(sortedDescending, "$this$sortedDescending");
        return SequencesKt.sortedWith(sortedDescending, ComparisonsKt.reverseOrder());
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$sortedWith$1", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1 */
    public static final class C05081<T> implements Sequence<T> {
        final /* synthetic */ Comparator $comparator;
        final /* synthetic */ Sequence $this_sortedWith;

        C05081(Sequence<? extends T> sequence, Comparator $captured_local_variable$1) {
            sequence = sequence;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            List sortedList = SequencesKt.toMutableList(sequence);
            CollectionsKt.sortWith(sortedList, $captured_local_variable$1);
            return sortedList.iterator();
        }
    }

    public static final <T> Sequence<T> sortedWith(Sequence<? extends T> sortedWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(sortedWith, "$this$sortedWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.sortedWith.1
            final /* synthetic */ Comparator $comparator;
            final /* synthetic */ Sequence $this_sortedWith;

            C05081(Sequence<? extends T> sortedWith2, Comparator comparator2) {
                sequence = sortedWith2;
                $captured_local_variable$1 = comparator2;
            }

            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                List sortedList = SequencesKt.toMutableList(sequence);
                CollectionsKt.sortWith(sortedList, $captured_local_variable$1);
                return sortedList.iterator();
            }
        };
    }

    public static final <T, K, V> Map<K, V> associate(Sequence<? extends T> associate, Functions2<? super T, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associate, "$this$associate");
        Intrinsics.checkNotNullParameter(transform, "transform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : associate) {
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(element$iv);
            destination$iv.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination$iv;
    }

    public static final <T, K> Map<K, T> associateBy(Sequence<? extends T> associateBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : associateBy) {
            destination$iv.put(keySelector.invoke(element$iv), element$iv);
        }
        return destination$iv;
    }

    public static final <T, K, V> Map<K, V> associateBy(Sequence<? extends T> associateBy, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateBy, "$this$associateBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : associateBy) {
            destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Sequence<? extends T> associateByTo, M destination, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (Object element : associateByTo) {
            destination.put(keySelector.invoke(element), element);
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Sequence<? extends T> associateByTo, M destination, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(associateByTo, "$this$associateByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (Object element : associateByTo) {
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Sequence<? extends T> associateTo, M destination, Functions2<? super T, ? extends Tuples<? extends K, ? extends V>> transform) {
        Intrinsics.checkNotNullParameter(associateTo, "$this$associateTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : associateTo) {
            Tuples<? extends K, ? extends V> tuplesInvoke = transform.invoke(element);
            destination.put(tuplesInvoke.getFirst(), tuplesInvoke.getSecond());
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <K, V> Map<K, V> associateWith(Sequence<? extends K> associateWith, Functions2<? super K, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWith, "$this$associateWith");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        LinkedHashMap result = new LinkedHashMap();
        for (Object element$iv : associateWith) {
            result.put(element$iv, valueSelector.invoke(element$iv));
        }
        return result;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Sequence<? extends K> associateWithTo, M destination, Functions2<? super K, ? extends V> valueSelector) {
        Intrinsics.checkNotNullParameter(associateWithTo, "$this$associateWithTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        for (Object element : associateWithTo) {
            destination.put(element, valueSelector.invoke(element));
        }
        return destination;
    }

    public static final <T, C extends Collection<? super T>> C toCollection(Sequence<? extends T> toCollection, C destination) {
        Intrinsics.checkNotNullParameter(toCollection, "$this$toCollection");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Iterator<? extends T> it = toCollection.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    public static final <T> HashSet<T> toHashSet(Sequence<? extends T> toHashSet) {
        Intrinsics.checkNotNullParameter(toHashSet, "$this$toHashSet");
        return (HashSet) SequencesKt.toCollection(toHashSet, new HashSet());
    }

    public static final <T> List<T> toList(Sequence<? extends T> toList) {
        Intrinsics.checkNotNullParameter(toList, "$this$toList");
        return CollectionsKt.optimizeReadOnlyList(SequencesKt.toMutableList(toList));
    }

    public static final <T> List<T> toMutableList(Sequence<? extends T> toMutableList) {
        Intrinsics.checkNotNullParameter(toMutableList, "$this$toMutableList");
        return (List) SequencesKt.toCollection(toMutableList, new ArrayList());
    }

    public static final <T> Set<T> toSet(Sequence<? extends T> toSet) {
        Intrinsics.checkNotNullParameter(toSet, "$this$toSet");
        return SetsKt.optimizeReadOnlySet((Set) SequencesKt.toCollection(toSet, new LinkedHashSet()));
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010(\n\u0002\b\u0003\n\u0002\u0010\u001c\n\u0000\u0010\u0000\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0003\"\u0004\b\u0001\u0010\u00022\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\b\u0006"}, m17d2 = {"<anonymous>", "", "R", "T", "p1", "", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$flatMap$1 */
    static final /* synthetic */ class C04931<R> extends FunctionReferenceImpl implements Functions2<Iterable<? extends R>, Iterator<? extends R>> {
        public static final C04931 INSTANCE = new C04931();

        C04931() {
            super(1, Iterable.class, "iterator", "iterator()Ljava/util/Iterator;", 0);
        }

        @Override // kotlin.jvm.functions.Functions2
        public final Iterator<R> invoke(Iterable<? extends R> p1) {
            Intrinsics.checkNotNullParameter(p1, "p1");
            return p1.iterator();
        }
    }

    public static final <T, R> Sequence<R> flatMapIterable(Sequence<? extends T> flatMap, Functions2<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new Sequences19(flatMap, transform, C04931.INSTANCE);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010(\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\u0010\u0000\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0003\"\u0004\b\u0001\u0010\u00022\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\b\u0006"}, m17d2 = {"<anonymous>", "", "R", "T", "p1", "Lkotlin/sequences/Sequence;", "invoke"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 */
    static final /* synthetic */ class C04942<R> extends FunctionReferenceImpl implements Functions2<Sequence<? extends R>, Iterator<? extends R>> {
        public static final C04942 INSTANCE = new C04942();

        C04942() {
            super(1, Sequence.class, "iterator", "iterator()Ljava/util/Iterator;", 0);
        }

        @Override // kotlin.jvm.functions.Functions2
        public final Iterator<R> invoke(Sequence<? extends R> p1) {
            Intrinsics.checkNotNullParameter(p1, "p1");
            return p1.iterator();
        }
    }

    public static final <T, R> Sequence<R> flatMap(Sequence<? extends T> flatMap, Functions2<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMap, "$this$flatMap");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new Sequences19(flatMap, transform, C04942.INSTANCE);
    }

    public static final <T, R> Sequence<R> flatMapIndexedIterable(Sequence<? extends T> flatMapIndexed, Functions13<? super Integer, ? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapIndexed, "$this$flatMapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.flatMapIndexed(flatMapIndexed, transform, _Sequences2.INSTANCE);
    }

    public static final <T, R> Sequence<R> flatMapIndexedSequence(Sequence<? extends T> flatMapIndexed, Functions13<? super Integer, ? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapIndexed, "$this$flatMapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.flatMapIndexed(flatMapIndexed, transform, _Sequences3.INSTANCE);
    }

    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedIterableTo(Sequence<? extends T> sequence, C c, Functions13<? super Integer, ? super T, ? extends Iterable<? extends R>> functions13) {
        int index = 0;
        for (Object element : sequence) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Iterable list = functions13.invoke(Integer.valueOf(index), element);
            CollectionsKt.addAll(c, list);
            index = index2;
        }
        return c;
    }

    private static final <T, R, C extends Collection<? super R>> C flatMapIndexedSequenceTo(Sequence<? extends T> sequence, C c, Functions13<? super Integer, ? super T, ? extends Sequence<? extends R>> functions13) {
        int index = 0;
        for (Object element : sequence) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            Sequence list = functions13.invoke(Integer.valueOf(index), element);
            CollectionsKt.addAll(c, list);
            index = index2;
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapIterableTo(Sequence<? extends T> flatMapTo, C destination, Functions2<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : flatMapTo) {
            Iterable list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapTo(Sequence<? extends T> flatMapTo, C destination, Functions2<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkNotNullParameter(flatMapTo, "$this$flatMapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element : flatMapTo) {
            Sequence list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    public static final <T, K> Map<K, List<T>> groupBy(Sequence<? extends T> groupBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : groupBy) {
            K kInvoke = keySelector.invoke(element$iv);
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(element$iv);
        }
        return destination$iv;
    }

    public static final <T, K, V> Map<K, List<V>> groupBy(Sequence<? extends T> groupBy, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupBy, "$this$groupBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : groupBy) {
            K kInvoke = keySelector.invoke(element$iv);
            Object value$iv$iv = destination$iv.get(kInvoke);
            if (value$iv$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination$iv.put(kInvoke, arrayList);
                value$iv$iv = arrayList;
            }
            List list$iv = (List) value$iv$iv;
            list$iv.add(valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Sequence<? extends T> groupByTo, M destination, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (Object element : groupByTo) {
            K kInvoke = keySelector.invoke(element);
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(element);
        }
        return destination;
    }

    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Sequence<? extends T> groupByTo, M destination, Functions2<? super T, ? extends K> keySelector, Functions2<? super T, ? extends V> valueTransform) {
        Intrinsics.checkNotNullParameter(groupByTo, "$this$groupByTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (Object element : groupByTo) {
            K kInvoke = keySelector.invoke(element);
            Object value$iv = destination.get(kInvoke);
            if (value$iv == null) {
                ArrayList arrayList = new ArrayList();
                destination.put(kInvoke, arrayList);
                value$iv = arrayList;
            }
            List list = (List) value$iv;
            list.add(valueTransform.invoke(element));
        }
        return destination;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0013\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0001J\u0015\u0010\u0002\u001a\u00028\u00012\u0006\u0010\u0003\u001a\u00028\u0000H\u0016¢\u0006\u0002\u0010\u0004J\u000e\u0010\u0005\u001a\b\u0012\u0004\u0012\u00028\u00000\u0006H\u0016¨\u0006\u0007"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$groupingBy$1", "Lkotlin/collections/Grouping;", "keyOf", "element", "(Ljava/lang/Object;)Ljava/lang/Object;", "sourceIterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1 */
    public static final class C04951<K, T> implements Grouping<T, K> {
        final /* synthetic */ Functions2 $keySelector;
        final /* synthetic */ Sequence $this_groupingBy;

        public C04951(Sequence<? extends T> sequence, Functions2 $captured_local_variable$1) {
            sequence = sequence;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.collections.Grouping
        public Iterator<T> sourceIterator() {
            return sequence.iterator();
        }

        @Override // kotlin.collections.Grouping
        public K keyOf(T element) {
            return (K) $captured_local_variable$1.invoke(element);
        }
    }

    public static final <T, K> Grouping<T, K> groupingBy(Sequence<? extends T> groupingBy, Functions2<? super T, ? extends K> keySelector) {
        Intrinsics.checkNotNullParameter(groupingBy, "$this$groupingBy");
        Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new Grouping<T, K>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.groupingBy.1
            final /* synthetic */ Functions2 $keySelector;
            final /* synthetic */ Sequence $this_groupingBy;

            public C04951(Sequence<? extends T> groupingBy2, Functions2 keySelector2) {
                sequence = groupingBy2;
                $captured_local_variable$1 = keySelector2;
            }

            @Override // kotlin.collections.Grouping
            public Iterator<T> sourceIterator() {
                return sequence.iterator();
            }

            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) $captured_local_variable$1.invoke(element);
            }
        };
    }

    public static final <T, R> Sequence<R> map(Sequence<? extends T> map, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(map, "$this$map");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new Sequences31(map, transform);
    }

    public static final <T, R> Sequence<R> mapIndexed(Sequence<? extends T> mapIndexed, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexed, "$this$mapIndexed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new Sequences30(mapIndexed, transform);
    }

    public static final <T, R> Sequence<R> mapIndexedNotNull(Sequence<? extends T> mapIndexedNotNull, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNull, "$this$mapIndexedNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.filterNotNull(new Sequences30(mapIndexedNotNull, transform));
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Sequence<? extends T> mapIndexedNotNullTo, C destination, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        for (Object item$iv : mapIndexedNotNullTo) {
            int index$iv = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            R rInvoke = transform.invoke(Integer.valueOf(index), item$iv);
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
            index = index$iv;
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Sequence<? extends T> mapIndexedTo, C destination, Functions13<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapIndexedTo, "$this$mapIndexedTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        int index = 0;
        for (Object item : mapIndexedTo) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.invoke(Integer.valueOf(index), item));
            index = index2;
        }
        return destination;
    }

    public static final <T, R> Sequence<R> mapNotNull(Sequence<? extends T> mapNotNull, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNull, "$this$mapNotNull");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.filterNotNull(new Sequences31(mapNotNull, transform));
    }

    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Sequence<? extends T> mapNotNullTo, C destination, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapNotNullTo, "$this$mapNotNullTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object element$iv : mapNotNullTo) {
            R rInvoke = transform.invoke(element$iv);
            if (rInvoke != null) {
                destination.add(rInvoke);
            }
        }
        return destination;
    }

    public static final <T, R, C extends Collection<? super R>> C mapTo(Sequence<? extends T> mapTo, C destination, Functions2<? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(mapTo, "$this$mapTo");
        Intrinsics.checkNotNullParameter(destination, "destination");
        Intrinsics.checkNotNullParameter(transform, "transform");
        for (Object item : mapTo) {
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    public static final <T> Sequence<IndexedValue<T>> withIndex(Sequence<? extends T> withIndex) {
        Intrinsics.checkNotNullParameter(withIndex, "$this$withIndex");
        return new Sequences21(withIndex);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0004\n\u0002\b\u0005\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u0002H\u0001H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, m17d2 = {"<anonymous>", "T", "it", "invoke", "(Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$distinct$1 */
    static final class C04871<T> extends Lambda implements Functions2<T, T> {
        public static final C04871 INSTANCE = ;

        C04871() {
        }

        @Override // kotlin.jvm.functions.Functions2
        public final T invoke(T t) {
            return t;
        }
    }

    public static final <T> Sequence<T> distinct(Sequence<? extends T> distinct) {
        Intrinsics.checkNotNullParameter(distinct, "$this$distinct");
        return SequencesKt.distinctBy(distinct, C04871.INSTANCE);
    }

    public static final <T, K> Sequence<T> distinctBy(Sequence<? extends T> distinctBy, Functions2<? super T, ? extends K> selector) {
        Intrinsics.checkNotNullParameter(distinctBy, "$this$distinctBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        return new Sequences13(distinctBy, selector);
    }

    public static final <T> Set<T> toMutableSet(Sequence<? extends T> toMutableSet) {
        Intrinsics.checkNotNullParameter(toMutableSet, "$this$toMutableSet");
        LinkedHashSet set = new LinkedHashSet();
        Iterator<? extends T> it = toMutableSet.iterator();
        while (it.hasNext()) {
            set.add(it.next());
        }
        return set;
    }

    public static final <T> boolean all(Sequence<? extends T> all, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(all, "$this$all");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : all) {
            if (!predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(Sequence<? extends T> any) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        return any.iterator().hasNext();
    }

    public static final <T> boolean any(Sequence<? extends T> any, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(any, "$this$any");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : any) {
            if (predicate.invoke(element).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int count(Sequence<? extends T> count) {
        Intrinsics.checkNotNullParameter(count, "$this$count");
        int count2 = 0;
        Iterator<? extends T> it = count.iterator();
        while (it.hasNext()) {
            it.next();
            count2++;
            if (count2 < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count2;
    }

    public static final <T> int count(Sequence<? extends T> count, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(count, "$this$count");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        int count2 = 0;
        for (Object element : count) {
            if (predicate.invoke(element).booleanValue() && (count2 = count2 + 1) < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt.throwCountOverflow();
            }
        }
        return count2;
    }

    public static final <T, R> R fold(Sequence<? extends T> fold, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(fold, "$this$fold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        R rInvoke = r;
        Iterator<? extends T> it = fold.iterator();
        while (it.hasNext()) {
            rInvoke = operation.invoke(rInvoke, it.next());
        }
        return rInvoke;
    }

    public static final <T, R> R foldIndexed(Sequence<? extends T> foldIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(foldIndexed, "$this$foldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        int i = 0;
        R rInvoke = r;
        for (Object obj : foldIndexed) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            rInvoke = operation.invoke(Integer.valueOf(i), rInvoke, obj);
            i = i2;
        }
        return rInvoke;
    }

    public static final <T> void forEach(Sequence<? extends T> forEach, Functions2<? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(forEach, "$this$forEach");
        Intrinsics.checkNotNullParameter(action, "action");
        for (Object element : forEach) {
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(Sequence<? extends T> forEachIndexed, Functions13<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(forEachIndexed, "$this$forEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        int index = 0;
        for (Object item : forEachIndexed) {
            int index2 = index + 1;
            if (index < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(index), item);
            index = index2;
        }
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: max */
    public static final Double m1299max(Sequence<Double> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return SequencesKt.maxOrNull((Sequence) max);
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: max */
    public static final Float m1300max(Sequence<Float> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return SequencesKt.maxOrNull((Sequence) max);
    }

    @Annotations(message = "Use maxOrNull instead.", replaceWith = @Annotations8(expression = "maxOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T extends Comparable<? super T>> T max(Sequence<? extends T> max) {
        Intrinsics.checkNotNullParameter(max, "$this$max");
        return (T) SequencesKt.maxOrNull(max);
    }

    /* JADX WARN: Type inference failed for: r4v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r4v2 */
    /* JADX WARN: Type inference failed for: r4v3, types: [T] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    @Annotations(message = "Use maxByOrNull instead.", replaceWith = @Annotations8(expression = "maxByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T, R extends Comparable<? super R>> T maxBy(Sequence<? extends T> maxBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxBy, "$this$maxBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = maxBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = selector.invoke(next);
        do {
            Object next2 = it.next();
            R rInvoke2 = selector.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
                next = (T) next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r2v2 */
    /* JADX WARN: Type inference failed for: r2v3, types: [T] */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r2v9 */
    public static final <T, R extends Comparable<? super R>> T maxByOrNull(Sequence<? extends T> maxByOrNull, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(maxByOrNull, "$this$maxByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = maxByOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        ?? r2 = (Object) it.next();
        if (!it.hasNext()) {
            return r2;
        }
        R rInvoke = selector.invoke(r2);
        do {
            Object next = it.next();
            R rInvoke2 = selector.invoke(next);
            r2 = r2;
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
                r2 = (T) next;
            }
        } while (it.hasNext());
        return (T) r2;
    }

    private static final <T> double maxOf(Sequence<? extends T> sequence, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.max(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return dDoubleValue;
    }

    /* renamed from: maxOf */
    private static final <T> float m1301maxOf(Sequence<? extends T> sequence, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.max(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return fFloatValue;
    }

    /* renamed from: maxOf */
    private static final <T, R extends Comparable<? super R>> R m1302maxOf(Sequence<? extends T> sequence, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    /* renamed from: maxOfOrNull */
    private static final <T> Double m1303maxOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.max(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return Double.valueOf(dDoubleValue);
    }

    /* renamed from: maxOfOrNull */
    private static final <T> Float m1304maxOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.max(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return Float.valueOf(fFloatValue);
    }

    private static final <T, R extends Comparable<? super R>> R maxOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R maxOfWith(Sequence<? extends T> sequence, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) < 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R maxOfWithOrNull(Sequence<? extends T> sequence, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) < 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    /* renamed from: maxOrNull */
    public static final Double m1305maxOrNull(Sequence<Double> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = iterator.next().doubleValue();
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            max = Math.max(max, e);
        }
        return Double.valueOf(max);
    }

    /* renamed from: maxOrNull */
    public static final Float m1306maxOrNull(Sequence<Float> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = iterator.next().floatValue();
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            max = Math.max(max, e);
        }
        return Float.valueOf(max);
    }

    public static final <T extends Comparable<? super T>> T maxOrNull(Sequence<? extends T> maxOrNull) {
        Intrinsics.checkNotNullParameter(maxOrNull, "$this$maxOrNull");
        Iterator iterator = maxOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use maxWithOrNull instead.", replaceWith = @Annotations8(expression = "maxWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T> T maxWith(Sequence<? extends T> maxWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(maxWith, "$this$maxWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return (T) SequencesKt.maxWithOrNull(maxWith, comparator);
    }

    public static final <T> T maxWithOrNull(Sequence<? extends T> maxWithOrNull, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(maxWithOrNull, "$this$maxWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<? extends T> it = maxWithOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) < 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: min */
    public static final Double m1307min(Sequence<Double> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return SequencesKt.minOrNull((Sequence) min);
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    /* renamed from: min */
    public static final Float m1308min(Sequence<Float> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return SequencesKt.minOrNull((Sequence) min);
    }

    @Annotations(message = "Use minOrNull instead.", replaceWith = @Annotations8(expression = "minOrNull()", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T extends Comparable<? super T>> T min(Sequence<? extends T> min) {
        Intrinsics.checkNotNullParameter(min, "$this$min");
        return (T) SequencesKt.minOrNull(min);
    }

    /* JADX WARN: Type inference failed for: r4v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r4v2 */
    /* JADX WARN: Type inference failed for: r4v3, types: [T] */
    /* JADX WARN: Type inference failed for: r4v8 */
    /* JADX WARN: Type inference failed for: r4v9 */
    @Annotations(message = "Use minByOrNull instead.", replaceWith = @Annotations8(expression = "minByOrNull(selector)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T, R extends Comparable<? super R>> T minBy(Sequence<? extends T> minBy, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minBy, "$this$minBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = minBy.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = selector.invoke(next);
        do {
            Object next2 = it.next();
            R rInvoke2 = selector.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
                next = (T) next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r2v2 */
    /* JADX WARN: Type inference failed for: r2v3, types: [T] */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r2v9 */
    public static final <T, R extends Comparable<? super R>> T minByOrNull(Sequence<? extends T> minByOrNull, Functions2<? super T, ? extends R> selector) {
        Intrinsics.checkNotNullParameter(minByOrNull, "$this$minByOrNull");
        Intrinsics.checkNotNullParameter(selector, "selector");
        Iterator<? extends T> it = minByOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        ?? r2 = (Object) it.next();
        if (!it.hasNext()) {
            return r2;
        }
        R rInvoke = selector.invoke(r2);
        do {
            Object next = it.next();
            R rInvoke2 = selector.invoke(next);
            r2 = r2;
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
                r2 = (T) next;
            }
        } while (it.hasNext());
        return (T) r2;
    }

    private static final <T> double minOf(Sequence<? extends T> sequence, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.min(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return dDoubleValue;
    }

    /* renamed from: minOf */
    private static final <T> float m1309minOf(Sequence<? extends T> sequence, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.min(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return fFloatValue;
    }

    /* renamed from: minOf */
    private static final <T, R extends Comparable<? super R>> R m1310minOf(Sequence<? extends T> sequence, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    /* renamed from: minOfOrNull */
    private static final <T> Double m1311minOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, Double> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = functions2.invoke((Object) it.next()).doubleValue();
        while (it.hasNext()) {
            dDoubleValue = Math.min(dDoubleValue, functions2.invoke((Object) it.next()).doubleValue());
        }
        return Double.valueOf(dDoubleValue);
    }

    /* renamed from: minOfOrNull */
    private static final <T> Float m1312minOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, Float> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = functions2.invoke((Object) it.next()).floatValue();
        while (it.hasNext()) {
            fFloatValue = Math.min(fFloatValue, functions2.invoke((Object) it.next()).floatValue());
        }
        return Float.valueOf(fFloatValue);
    }

    private static final <T, R extends Comparable<? super R>> R minOfOrNull(Sequence<? extends T> sequence, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            R rInvoke2 = functions2.invoke((Object) it.next());
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R minOfWith(Sequence<? extends T> sequence, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException();
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) > 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    private static final <T, R> R minOfWithOrNull(Sequence<? extends T> sequence, Comparator<? super R> comparator, Functions2<? super T, ? extends R> functions2) {
        Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        R rInvoke = functions2.invoke((Object) it.next());
        while (it.hasNext()) {
            Object objInvoke = functions2.invoke((Object) it.next());
            if (comparator.compare(rInvoke, objInvoke) > 0) {
                rInvoke = (R) objInvoke;
            }
        }
        return rInvoke;
    }

    /* renamed from: minOrNull */
    public static final Double m1313minOrNull(Sequence<Double> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = iterator.next().doubleValue();
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            min = Math.min(min, e);
        }
        return Double.valueOf(min);
    }

    /* renamed from: minOrNull */
    public static final Float m1314minOrNull(Sequence<Float> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = iterator.next().floatValue();
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            min = Math.min(min, e);
        }
        return Float.valueOf(min);
    }

    public static final <T extends Comparable<? super T>> T minOrNull(Sequence<? extends T> minOrNull) {
        Intrinsics.checkNotNullParameter(minOrNull, "$this$minOrNull");
        Iterator iterator = minOrNull.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @Annotations(message = "Use minWithOrNull instead.", replaceWith = @Annotations8(expression = "minWithOrNull(comparator)", imports = {}))
    @Annotations2(warningSince = "1.4")
    public static final <T> T minWith(Sequence<? extends T> minWith, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(minWith, "$this$minWith");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        return (T) SequencesKt.minWithOrNull(minWith, comparator);
    }

    public static final <T> T minWithOrNull(Sequence<? extends T> minWithOrNull, Comparator<? super T> comparator) {
        Intrinsics.checkNotNullParameter(minWithOrNull, "$this$minWithOrNull");
        Intrinsics.checkNotNullParameter(comparator, "comparator");
        Iterator<? extends T> it = minWithOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) > 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    public static final <T> boolean none(Sequence<? extends T> none) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        return !none.iterator().hasNext();
    }

    public static final <T> boolean none(Sequence<? extends T> none, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(none, "$this$none");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (Object element : none) {
            if (predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0004\n\u0002\b\u0005\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u0002H\u0001H\n¢\u0006\u0004\b\u0003\u0010\u0004"}, m17d2 = {"<anonymous>", "T", "it", "invoke", "(Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$onEach$1 */
    static final class C05001<T> extends Lambda implements Functions2<T, T> {
        C05001() {
            super(1);
        }

        @Override // kotlin.jvm.functions.Functions2
        public final T invoke(T t) {
            functions2.invoke(t);
            return t;
        }
    }

    public static final <T> Sequence<T> onEach(Sequence<? extends T> onEach, Functions2<? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(onEach, "$this$onEach");
        Intrinsics.checkNotNullParameter(action, "action");
        return SequencesKt.map(onEach, new Functions2<T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.onEach.1
            C05001() {
                super(1);
            }

            @Override // kotlin.jvm.functions.Functions2
            public final T invoke(T t) {
                functions2.invoke(t);
                return t;
            }
        });
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0003\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u0002H\u0001H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "T", "index", "", "element", "invoke", "(ILjava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1 */
    static final class C05011<T> extends Lambda implements Functions13<Integer, T, T> {
        C05011() {
            super(2);
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // kotlin.jvm.functions.Functions13
        public /* bridge */ /* synthetic */ Object invoke(Integer num, Object obj) {
            return invoke(num.intValue(), (int) obj);
        }

        public final T invoke(int index, T t) {
            functions13.invoke(Integer.valueOf(index), t);
            return t;
        }
    }

    public static final <T> Sequence<T> onEachIndexed(Sequence<? extends T> onEachIndexed, Functions13<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkNotNullParameter(onEachIndexed, "$this$onEachIndexed");
        Intrinsics.checkNotNullParameter(action, "action");
        return SequencesKt.mapIndexed(onEachIndexed, new Functions13<Integer, T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.onEachIndexed.1
            C05011() {
                super(2);
            }

            /* JADX WARN: Multi-variable type inference failed */
            @Override // kotlin.jvm.functions.Functions13
            public /* bridge */ /* synthetic */ Object invoke(Integer num, Object obj) {
                return invoke(num.intValue(), (int) obj);
            }

            public final T invoke(int index, T t) {
                functions13.invoke(Integer.valueOf(index), t);
                return t;
            }
        });
    }

    public static final <S, T extends S> S reduce(Sequence<? extends T> reduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduce, "$this$reduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduce.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            sInvoke = operation.invoke(sInvoke, (Object) it.next());
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceIndexed(Sequence<? extends T> reduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexed, "$this$reduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceIndexed.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        int i = 1;
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            sInvoke = operation.invoke(Integer.valueOf(i), sInvoke, (Object) it.next());
            i = i2;
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceIndexedOrNull(Sequence<? extends T> reduceIndexedOrNull, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceIndexedOrNull, "$this$reduceIndexedOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceIndexedOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        int i = 1;
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementations2.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            sInvoke = operation.invoke(Integer.valueOf(i), sInvoke, (Object) it.next());
            i = i2;
        }
        return sInvoke;
    }

    public static final <S, T extends S> S reduceOrNull(Sequence<? extends T> reduceOrNull, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(reduceOrNull, "$this$reduceOrNull");
        Intrinsics.checkNotNullParameter(operation, "operation");
        Iterator<? extends T> it = reduceOrNull.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S sInvoke = (S) it.next();
        while (it.hasNext()) {
            sInvoke = operation.invoke(sInvoke, (Object) it.next());
        }
        return sInvoke;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u0003*\b\u0012\u0004\u0012\u0002H\u00030\u0004H\u008a@¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "T", "R", "Lkotlin/sequences/SequenceScope;", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    @DebugMetadata(m25c = "kotlin.sequences.SequencesKt___SequencesKt$runningFold$1", m26f = "_Sequences.kt", m27i = {0, 1, 1, 1}, m28l = {2071, 2075}, m29m = "invokeSuspend", m30n = {"$this$sequence", "$this$sequence", "accumulator", "element"}, m31s = {"L$0", "L$0", "L$1", "L$2"})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 */
    static final class C05031<R> extends ContinuationImpl5 implements Functions13<SequenceBuilder2<? super R>, Continuation<? super Unit>, Object> {
        final /* synthetic */ Object $initial;
        final /* synthetic */ Functions13 $operation;
        final /* synthetic */ Sequence $this_runningFold;
        Object L$0;
        Object L$1;
        Object L$2;
        Object L$3;
        int label;

        /* renamed from: p$ */
        private SequenceBuilder2 f334p$;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05031(Sequence sequence, Object obj, Functions13 functions13, Continuation continuation) {
            super(2, continuation);
            this.$this_runningFold = sequence;
            this.$initial = obj;
            this.$operation = functions13;
        }

        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        public final Continuation<Unit> create(Object obj, Continuation<?> completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            C05031 c05031 = new C05031(this.$this_runningFold, this.$initial, this.$operation, completion);
            c05031.f334p$ = (SequenceBuilder2) obj;
            return c05031;
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Object invoke(Object obj, Continuation<? super Unit> continuation) {
            return ((C05031) create(obj, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:41:0x0058  */
        /* JADX WARN: Removed duplicated region for block: B:46:0x007c  */
        /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:44:0x0073 -> B:45:0x0078). Please report as a decompilation issue!!! */
        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r10) {
            /*
                r9 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r9.label
                r2 = 2
                r3 = 1
                if (r1 == 0) goto L36
                r4 = 0
                if (r1 == r3) goto L2c
                if (r1 != r2) goto L24
                r1 = r4
                r3 = r4
                java.lang.Object r5 = r9.L$3
                java.util.Iterator r5 = (java.util.Iterator) r5
                java.lang.Object r3 = r9.L$2
                java.lang.Object r4 = r9.L$1
                java.lang.Object r6 = r9.L$0
                r1 = r6
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r10)
                r6 = r5
                r5 = r9
                goto L78
            L24:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r1 = "call to 'resume' before 'invoke' with coroutine"
                r0.<init>(r1)
                throw r0
            L2c:
                r1 = r4
                java.lang.Object r3 = r9.L$0
                r1 = r3
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r10)
                goto L48
            L36:
                kotlin.Result2.throwOnFailure(r10)
                kotlin.sequences.SequenceScope r1 = r9.f334p$
                java.lang.Object r4 = r9.$initial
                r9.L$0 = r1
                r9.label = r3
                java.lang.Object r3 = r1.yield(r4, r9)
                if (r3 != r0) goto L48
                return r0
            L48:
                java.lang.Object r3 = r9.$initial
                kotlin.sequences.Sequence r4 = r9.$this_runningFold
                java.util.Iterator r4 = r4.iterator()
                r5 = r4
                r4 = r9
            L52:
                boolean r6 = r5.hasNext()
                if (r6 == 0) goto L7c
                java.lang.Object r6 = r5.next()
                kotlin.jvm.functions.Function2 r7 = r4.$operation
                java.lang.Object r3 = r7.invoke(r3, r6)
                r4.L$0 = r1
                r4.L$1 = r3
                r4.L$2 = r6
                r4.L$3 = r5
                r4.label = r2
                java.lang.Object r7 = r1.yield(r3, r4)
                if (r7 != r0) goto L73
                return r0
            L73:
                r8 = r4
                r4 = r3
                r3 = r6
                r6 = r5
                r5 = r8
            L78:
                r3 = r4
                r4 = r5
                r5 = r6
                goto L52
            L7c:
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            */
            throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences._Sequences.C05031.invokeSuspend(java.lang.Object):java.lang.Object");
        }
    }

    public static final <T, R> Sequence<R> runningFold(Sequence<? extends T> runningFold, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFold, "$this$runningFold");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new C05031(runningFold, r, operation, null));
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u0003*\b\u0012\u0004\u0012\u0002H\u00030\u0004H\u008a@¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "T", "R", "Lkotlin/sequences/SequenceScope;", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    @DebugMetadata(m25c = "kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1", m26f = "_Sequences.kt", m27i = {0, 1, 1, 1, 1}, m28l = {2099, 2104}, m29m = "invokeSuspend", m30n = {"$this$sequence", "$this$sequence", "index", "accumulator", "element"}, m31s = {"L$0", "L$0", "I$0", "L$1", "L$2"})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1 */
    static final class C05041<R> extends ContinuationImpl5 implements Functions13<SequenceBuilder2<? super R>, Continuation<? super Unit>, Object> {
        final /* synthetic */ Object $initial;
        final /* synthetic */ Functions17 $operation;
        final /* synthetic */ Sequence $this_runningFoldIndexed;
        int I$0;
        Object L$0;
        Object L$1;
        Object L$2;
        Object L$3;
        int label;

        /* renamed from: p$ */
        private SequenceBuilder2 f335p$;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05041(Sequence sequence, Object obj, Functions17 functions17, Continuation continuation) {
            super(2, continuation);
            this.$this_runningFoldIndexed = sequence;
            this.$initial = obj;
            this.$operation = functions17;
        }

        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        public final Continuation<Unit> create(Object obj, Continuation<?> completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            C05041 c05041 = new C05041(this.$this_runningFoldIndexed, this.$initial, this.$operation, completion);
            c05041.f335p$ = (SequenceBuilder2) obj;
            return c05041;
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Object invoke(Object obj, Continuation<? super Unit> continuation) {
            return ((C05041) create(obj, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:44:0x005f  */
        /* JADX WARN: Removed duplicated region for block: B:52:0x0090  */
        /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:50:0x0087 -> B:51:0x008c). Please report as a decompilation issue!!! */
        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r12) {
            /*
                r11 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r11.label
                r2 = 2
                r3 = 1
                if (r1 == 0) goto L3c
                r4 = 0
                if (r1 == r3) goto L32
                if (r1 != r2) goto L2a
                r1 = r4
                r3 = r4
                r5 = 0
                java.lang.Object r6 = r11.L$3
                java.util.Iterator r6 = (java.util.Iterator) r6
                java.lang.Object r4 = r11.L$2
                java.lang.Object r3 = r11.L$1
                int r5 = r11.I$0
                java.lang.Object r7 = r11.L$0
                r1 = r7
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r12)
                r7 = r6
                r6 = r11
                r10 = r5
                r5 = r3
                r3 = r10
                goto L8c
            L2a:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r1 = "call to 'resume' before 'invoke' with coroutine"
                r0.<init>(r1)
                throw r0
            L32:
                r1 = r4
                java.lang.Object r3 = r11.L$0
                r1 = r3
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r12)
                goto L4e
            L3c:
                kotlin.Result2.throwOnFailure(r12)
                kotlin.sequences.SequenceScope r1 = r11.f335p$
                java.lang.Object r4 = r11.$initial
                r11.L$0 = r1
                r11.label = r3
                java.lang.Object r3 = r1.yield(r4, r11)
                if (r3 != r0) goto L4e
                return r0
            L4e:
                r3 = 0
                java.lang.Object r4 = r11.$initial
                kotlin.sequences.Sequence r5 = r11.$this_runningFoldIndexed
                java.util.Iterator r5 = r5.iterator()
                r6 = r5
                r5 = r11
            L59:
                boolean r7 = r6.hasNext()
                if (r7 == 0) goto L90
                java.lang.Object r7 = r6.next()
                kotlin.jvm.functions.Function3 r8 = r5.$operation
                int r9 = r3 + 1
                if (r3 >= 0) goto L6c
                kotlin.collections.CollectionsKt.throwIndexOverflow()
            L6c:
                java.lang.Integer r3 = kotlin.coroutines.jvm.internal.boxing.boxInt(r3)
                java.lang.Object r3 = r8.invoke(r3, r4, r7)
                r5.L$0 = r1
                r5.I$0 = r9
                r5.L$1 = r3
                r5.L$2 = r7
                r5.L$3 = r6
                r5.label = r2
                java.lang.Object r4 = r1.yield(r3, r5)
                if (r4 != r0) goto L87
                return r0
            L87:
                r4 = r7
                r7 = r6
                r6 = r5
                r5 = r3
                r3 = r9
            L8c:
                r4 = r5
                r5 = r6
                r6 = r7
                goto L59
            L90:
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            */
            throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences._Sequences.C05041.invokeSuspend(java.lang.Object):java.lang.Object");
        }
    }

    public static final <T, R> Sequence<R> runningFoldIndexed(Sequence<? extends T> runningFoldIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(runningFoldIndexed, "$this$runningFoldIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new C05041(runningFoldIndexed, r, operation, null));
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010\u0003*\u0002H\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0004H\u008a@¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "S", "T", "Lkotlin/sequences/SequenceScope;", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    @DebugMetadata(m25c = "kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1", m26f = "_Sequences.kt", m27i = {0, 0, 0, 1, 1, 1}, m28l = {2129, 2132}, m29m = "invokeSuspend", m30n = {"$this$sequence", "iterator", "accumulator", "$this$sequence", "iterator", "accumulator"}, m31s = {"L$0", "L$1", "L$2", "L$0", "L$1", "L$2"})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1 */
    static final class C05051<S> extends ContinuationImpl5 implements Functions13<SequenceBuilder2<? super S>, Continuation<? super Unit>, Object> {
        final /* synthetic */ Functions13 $operation;
        final /* synthetic */ Sequence $this_runningReduce;
        Object L$0;
        Object L$1;
        Object L$2;
        int label;

        /* renamed from: p$ */
        private SequenceBuilder2 f336p$;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05051(Sequence sequence, Functions13 functions13, Continuation continuation) {
            super(2, continuation);
            this.$this_runningReduce = sequence;
            this.$operation = functions13;
        }

        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        public final Continuation<Unit> create(Object obj, Continuation<?> completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            C05051 c05051 = new C05051(this.$this_runningReduce, this.$operation, completion);
            c05051.f336p$ = (SequenceBuilder2) obj;
            return c05051;
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Object invoke(Object obj, Continuation<? super Unit> continuation) {
            return ((C05051) create(obj, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:51:0x0068  */
        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r9) {
            /*
                r8 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r8.label
                r2 = 2
                r3 = 1
                if (r1 == 0) goto L3c
                r4 = 0
                if (r1 == r3) goto L2a
                if (r1 != r2) goto L22
                r1 = r4
                r3 = r4
                java.lang.Object r3 = r8.L$2
                java.lang.Object r5 = r8.L$1
                r4 = r5
                java.util.Iterator r4 = (java.util.Iterator) r4
                java.lang.Object r5 = r8.L$0
                r1 = r5
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r9)
                r5 = r8
                goto L81
            L22:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r1 = "call to 'resume' before 'invoke' with coroutine"
                r0.<init>(r1)
                throw r0
            L2a:
                r1 = r4
                r3 = r4
                java.lang.Object r3 = r8.L$2
                java.lang.Object r5 = r8.L$1
                r4 = r5
                java.util.Iterator r4 = (java.util.Iterator) r4
                java.lang.Object r5 = r8.L$0
                r1 = r5
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r9)
                goto L61
            L3c:
                kotlin.Result2.throwOnFailure(r9)
                kotlin.sequences.SequenceScope r1 = r8.f336p$
                kotlin.sequences.Sequence r4 = r8.$this_runningReduce
                java.util.Iterator r4 = r4.iterator()
                boolean r5 = r4.hasNext()
                if (r5 == 0) goto L82
                java.lang.Object r5 = r4.next()
                r8.L$0 = r1
                r8.L$1 = r4
                r8.L$2 = r5
                r8.label = r3
                java.lang.Object r3 = r1.yield(r5, r8)
                if (r3 != r0) goto L60
                return r0
            L60:
                r3 = r5
            L61:
                r5 = r8
            L62:
                boolean r6 = r4.hasNext()
                if (r6 == 0) goto L83
                kotlin.jvm.functions.Function2 r6 = r5.$operation
                java.lang.Object r7 = r4.next()
                java.lang.Object r3 = r6.invoke(r3, r7)
                r5.L$0 = r1
                r5.L$1 = r4
                r5.L$2 = r3
                r5.label = r2
                java.lang.Object r6 = r1.yield(r3, r5)
                if (r6 != r0) goto L81
                return r0
            L81:
                goto L62
            L82:
                r5 = r8
            L83:
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            */
            throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences._Sequences.C05051.invokeSuspend(java.lang.Object):java.lang.Object");
        }
    }

    public static final <S, T extends S> Sequence<S> runningReduce(Sequence<? extends T> runningReduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(runningReduce, "$this$runningReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new C05051(runningReduce, operation, null));
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010\u0003*\u0002H\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0004H\u008a@¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "S", "T", "Lkotlin/sequences/SequenceScope;", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    @DebugMetadata(m25c = "kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1", m26f = "_Sequences.kt", m27i = {0, 0, 0, 1, 1, 1, 1}, m28l = {2158, 2162}, m29m = "invokeSuspend", m30n = {"$this$sequence", "iterator", "accumulator", "$this$sequence", "iterator", "accumulator", "index"}, m31s = {"L$0", "L$1", "L$2", "L$0", "L$1", "L$2", "I$0"})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1 */
    static final class C05061<S> extends ContinuationImpl5 implements Functions13<SequenceBuilder2<? super S>, Continuation<? super Unit>, Object> {
        final /* synthetic */ Functions17 $operation;
        final /* synthetic */ Sequence $this_runningReduceIndexed;
        int I$0;
        Object L$0;
        Object L$1;
        Object L$2;
        int label;

        /* renamed from: p$ */
        private SequenceBuilder2 f337p$;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05061(Sequence sequence, Functions17 functions17, Continuation continuation) {
            super(2, continuation);
            this.$this_runningReduceIndexed = sequence;
            this.$operation = functions17;
        }

        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        public final Continuation<Unit> create(Object obj, Continuation<?> completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            C05061 c05061 = new C05061(this.$this_runningReduceIndexed, this.$operation, completion);
            c05061.f337p$ = (SequenceBuilder2) obj;
            return c05061;
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Object invoke(Object obj, Continuation<? super Unit> continuation) {
            return ((C05061) create(obj, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:54:0x006d  */
        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r11) {
            /*
                r10 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r10.label
                r2 = 2
                r3 = 1
                if (r1 == 0) goto L40
                r4 = 0
                if (r1 == r3) goto L2e
                if (r1 != r2) goto L26
                r1 = r4
                r3 = r4
                r5 = 0
                int r5 = r10.I$0
                java.lang.Object r3 = r10.L$2
                java.lang.Object r6 = r10.L$1
                r4 = r6
                java.util.Iterator r4 = (java.util.Iterator) r4
                java.lang.Object r6 = r10.L$0
                r1 = r6
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r11)
                r6 = r10
                goto L94
            L26:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r1 = "call to 'resume' before 'invoke' with coroutine"
                r0.<init>(r1)
                throw r0
            L2e:
                r1 = r4
                r3 = r4
                java.lang.Object r3 = r10.L$2
                java.lang.Object r5 = r10.L$1
                r4 = r5
                java.util.Iterator r4 = (java.util.Iterator) r4
                java.lang.Object r5 = r10.L$0
                r1 = r5
                kotlin.sequences.SequenceScope r1 = (kotlin.sequences.SequenceBuilder2) r1
                kotlin.Result2.throwOnFailure(r11)
                goto L65
            L40:
                kotlin.Result2.throwOnFailure(r11)
                kotlin.sequences.SequenceScope r1 = r10.f337p$
                kotlin.sequences.Sequence r4 = r10.$this_runningReduceIndexed
                java.util.Iterator r4 = r4.iterator()
                boolean r5 = r4.hasNext()
                if (r5 == 0) goto L95
                java.lang.Object r5 = r4.next()
                r10.L$0 = r1
                r10.L$1 = r4
                r10.L$2 = r5
                r10.label = r3
                java.lang.Object r3 = r1.yield(r5, r10)
                if (r3 != r0) goto L64
                return r0
            L64:
                r3 = r5
            L65:
                r5 = 1
                r6 = r10
            L67:
                boolean r7 = r4.hasNext()
                if (r7 == 0) goto L96
                kotlin.jvm.functions.Function3 r7 = r6.$operation
                int r8 = r5 + 1
                if (r5 >= 0) goto L76
                kotlin.collections.CollectionsKt.throwIndexOverflow()
            L76:
                java.lang.Integer r5 = kotlin.coroutines.jvm.internal.boxing.boxInt(r5)
                java.lang.Object r9 = r4.next()
                java.lang.Object r3 = r7.invoke(r5, r3, r9)
                r6.L$0 = r1
                r6.L$1 = r4
                r6.L$2 = r3
                r6.I$0 = r8
                r6.label = r2
                java.lang.Object r5 = r1.yield(r3, r6)
                if (r5 != r0) goto L93
                return r0
            L93:
                r5 = r8
            L94:
                goto L67
            L95:
                r6 = r10
            L96:
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            */
            throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences._Sequences.C05061.invokeSuspend(java.lang.Object):java.lang.Object");
        }
    }

    public static final <S, T extends S> Sequence<S> runningReduceIndexed(Sequence<? extends T> runningReduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(runningReduceIndexed, "$this$runningReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.sequence(new C05061(runningReduceIndexed, operation, null));
    }

    public static final <T, R> Sequence<R> scan(Sequence<? extends T> scan, R r, Functions13<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scan, "$this$scan");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningFold(scan, r, operation);
    }

    public static final <T, R> Sequence<R> scanIndexed(Sequence<? extends T> scanIndexed, R r, Functions17<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkNotNullParameter(scanIndexed, "$this$scanIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningFoldIndexed(scanIndexed, r, operation);
    }

    @Annotations(level = Annotations3.ERROR, message = "Use runningReduce instead.", replaceWith = @Annotations8(expression = "runningReduce(operation)", imports = {}))
    public static final <S, T extends S> Sequence<S> scanReduce(Sequence<? extends T> scanReduce, Functions13<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(scanReduce, "$this$scanReduce");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningReduce(scanReduce, operation);
    }

    @Annotations(level = Annotations3.ERROR, message = "Use runningReduceIndexed instead.", replaceWith = @Annotations8(expression = "runningReduceIndexed(operation)", imports = {}))
    public static final <S, T extends S> Sequence<S> scanReduceIndexed(Sequence<? extends T> scanReduceIndexed, Functions17<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkNotNullParameter(scanReduceIndexed, "$this$scanReduceIndexed");
        Intrinsics.checkNotNullParameter(operation, "operation");
        return SequencesKt.runningReduceIndexed(scanReduceIndexed, operation);
    }

    public static final <T> int sumBy(Sequence<? extends T> sumBy, Functions2<? super T, Integer> selector) {
        Intrinsics.checkNotNullParameter(sumBy, "$this$sumBy");
        Intrinsics.checkNotNullParameter(selector, "selector");
        int sum = 0;
        for (Object element : sumBy) {
            sum += selector.invoke(element).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(Sequence<? extends T> sumByDouble, Functions2<? super T, Double> selector) {
        Intrinsics.checkNotNullParameter(sumByDouble, "$this$sumByDouble");
        Intrinsics.checkNotNullParameter(selector, "selector");
        double sum = 0.0d;
        for (Object element : sumByDouble) {
            sum += selector.invoke(element).doubleValue();
        }
        return sum;
    }

    private static final <T> double sumOfDouble(Sequence<? extends T> sequence, Functions2<? super T, Double> functions2) {
        double sum = 0;
        for (Object element : sequence) {
            sum += functions2.invoke(element).doubleValue();
        }
        return sum;
    }

    private static final <T> int sumOfInt(Sequence<? extends T> sequence, Functions2<? super T, Integer> functions2) {
        int sum = 0;
        for (Object element : sequence) {
            sum += functions2.invoke(element).intValue();
        }
        return sum;
    }

    private static final <T> long sumOfLong(Sequence<? extends T> sequence, Functions2<? super T, Long> functions2) {
        long sum = 0;
        for (Object element : sequence) {
            sum += functions2.invoke(element).longValue();
        }
        return sum;
    }

    private static final <T> int sumOfUInt(Sequence<? extends T> sequence, Functions2<? super T, UInt> functions2) {
        int sum = UInt.m162constructorimpl(0);
        for (Object element : sequence) {
            sum = UInt.m162constructorimpl(functions2.invoke(element).getData() + sum);
        }
        return sum;
    }

    private static final <T> long sumOfULong(Sequence<? extends T> sequence, Functions2<? super T, ULong> functions2) {
        long sum = ULong.m232constructorimpl(0);
        for (Object element : sequence) {
            sum = ULong.m232constructorimpl(functions2.invoke(element).getData() + sum);
        }
        return sum;
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\f\n\u0002\b\u0002\n\u0002\u0010\u0000\n\u0002\b\u0003\u0010\u0000\u001a\u0002H\u0001\"\b\b\u0000\u0010\u0001*\u00020\u00022\b\u0010\u0003\u001a\u0004\u0018\u0001H\u0001H\n¢\u0006\u0004\b\u0004\u0010\u0005"}, m17d2 = {"<anonymous>", "T", "", "it", "invoke", "(Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1 */
    static final class C05021<T> extends Lambda implements Functions2<T, T> {
        C05021() {
            super(1);
        }

        @Override // kotlin.jvm.functions.Functions2
        public final T invoke(T t) {
            if (t != null) {
                return t;
            }
            throw new IllegalArgumentException("null element found in " + sequence + '.');
        }
    }

    public static final <T> Sequence<T> requireNoNulls(Sequence<? extends T> requireNoNulls) {
        Intrinsics.checkNotNullParameter(requireNoNulls, "$this$requireNoNulls");
        return SequencesKt.map(requireNoNulls, new Functions2<T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.requireNoNulls.1
            C05021() {
                super(1);
            }

            @Override // kotlin.jvm.functions.Functions2
            public final T invoke(T t) {
                if (t != null) {
                    return t;
                }
                throw new IllegalArgumentException("null element found in " + sequence + '.');
            }
        });
    }

    public static final <T> Sequence<List<T>> chunked(Sequence<? extends T> chunked, int size) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        return SequencesKt.windowed(chunked, size, size, true);
    }

    public static final <T, R> Sequence<R> chunked(Sequence<? extends T> chunked, int size, Functions2<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(chunked, "$this$chunked");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.windowed(chunked, size, size, true, transform);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$minus$1", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$minus$1 */
    public static final class C04961<T> implements Sequence<T> {
        final /* synthetic */ Object $element;
        final /* synthetic */ Sequence $this_minus;

        C04961(Sequence<? extends T> sequence, Object $captured_local_variable$1) {
            this.$this_minus = sequence;
            this.$element = $captured_local_variable$1;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            final Ref.BooleanRef removed = new Ref.BooleanRef();
            removed.element = false;
            return SequencesKt.filter(this.$this_minus, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$1$iterator$1
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                {
                    super(1);
                }

                /* JADX WARN: Multi-variable type inference failed */
                @Override // kotlin.jvm.functions.Functions2
                public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                    return Boolean.valueOf(invoke2((_Sequences4<T>) obj));
                }

                /* renamed from: invoke, reason: avoid collision after fix types in other method */
                public final boolean invoke2(T t) {
                    if (removed.element || !Intrinsics.areEqual(t, this.this$0.$element)) {
                        return true;
                    }
                    removed.element = true;
                    return false;
                }
            }).iterator();
        }
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> minus, T t) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        return new C04961(minus, t);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$minus$2", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$minus$2 */
    public static final class C04972<T> implements Sequence<T> {
        final /* synthetic */ Object[] $elements;
        final /* synthetic */ Sequence $this_minus;

        C04972(Sequence<? extends T> sequence, Object[] $captured_local_variable$1) {
            sequence = sequence;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            final HashSet other = ArraysKt.toHashSet($captured_local_variable$1);
            return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                {
                    super(1);
                }

                /* JADX WARN: Multi-variable type inference failed */
                @Override // kotlin.jvm.functions.Functions2
                public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                    return Boolean.valueOf(invoke2((_Sequences5<T>) obj));
                }

                /* renamed from: invoke, reason: avoid collision after fix types in other method */
                public final boolean invoke2(T t) {
                    return other.contains(t);
                }
            }).iterator();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> Sequence<T> minus(Sequence<? extends T> minus, T[] elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return elements.length == 0 ? minus : new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.minus.2
            final /* synthetic */ Object[] $elements;
            final /* synthetic */ Sequence $this_minus;

            C04972(Sequence<? extends T> minus2, Object[] elements2) {
                sequence = minus2;
                $captured_local_variable$1 = elements2;
            }

            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                final HashSet other = ArraysKt.toHashSet($captured_local_variable$1);
                return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1
                    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                    {
                        super(1);
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    @Override // kotlin.jvm.functions.Functions2
                    public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                        return Boolean.valueOf(invoke2((_Sequences5<T>) obj));
                    }

                    /* renamed from: invoke, reason: avoid collision after fix types in other method */
                    public final boolean invoke2(T t) {
                        return other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$minus$3", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$minus$3 */
    public static final class C04983<T> implements Sequence<T> {
        final /* synthetic */ Iterable $elements;
        final /* synthetic */ Sequence $this_minus;

        C04983(Sequence<? extends T> sequence, Iterable $captured_local_variable$1) {
            sequence = sequence;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            final Collection other = CollectionsKt.convertToSetForSetOperation($captured_local_variable$1);
            if (other.isEmpty()) {
                return sequence.iterator();
            }
            return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$3$iterator$1
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                {
                    super(1);
                }

                /* JADX WARN: Multi-variable type inference failed */
                @Override // kotlin.jvm.functions.Functions2
                public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                    return Boolean.valueOf(invoke2((_Sequences6<T>) obj));
                }

                /* renamed from: invoke, reason: avoid collision after fix types in other method */
                public final boolean invoke2(T t) {
                    return other.contains(t);
                }
            }).iterator();
        }
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> minus, Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.minus.3
            final /* synthetic */ Iterable $elements;
            final /* synthetic */ Sequence $this_minus;

            C04983(Sequence<? extends T> minus2, Iterable elements2) {
                sequence = minus2;
                $captured_local_variable$1 = elements2;
            }

            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                final Collection other = CollectionsKt.convertToSetForSetOperation($captured_local_variable$1);
                if (other.isEmpty()) {
                    return sequence.iterator();
                }
                return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$3$iterator$1
                    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                    {
                        super(1);
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    @Override // kotlin.jvm.functions.Functions2
                    public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                        return Boolean.valueOf(invoke2((_Sequences6<T>) obj));
                    }

                    /* renamed from: invoke, reason: avoid collision after fix types in other method */
                    public final boolean invoke2(T t) {
                        return other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0011\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010(\n\u0000*\u0001\u0000\b\n\u0018\u00002\b\u0012\u0004\u0012\u00028\u00000\u0001J\u000f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0003H\u0096\u0002¨\u0006\u0004"}, m17d2 = {"kotlin/sequences/SequencesKt___SequencesKt$minus$4", "Lkotlin/sequences/Sequence;", "iterator", "", "kotlin-stdlib"}, m18k = 1, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$minus$4 */
    public static final class C04994<T> implements Sequence<T> {
        final /* synthetic */ Sequence $elements;
        final /* synthetic */ Sequence $this_minus;

        C04994(Sequence<? extends T> sequence, Sequence $captured_local_variable$1) {
            sequence = sequence;
            $captured_local_variable$1 = $captured_local_variable$1;
        }

        @Override // kotlin.sequences.Sequence
        public Iterator<T> iterator() {
            final HashSet other = SequencesKt.toHashSet($captured_local_variable$1);
            if (other.isEmpty()) {
                return sequence.iterator();
            }
            return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$4$iterator$1
                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                {
                    super(1);
                }

                /* JADX WARN: Multi-variable type inference failed */
                @Override // kotlin.jvm.functions.Functions2
                public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                    return Boolean.valueOf(invoke2((_Sequences7<T>) obj));
                }

                /* renamed from: invoke, reason: avoid collision after fix types in other method */
                public final boolean invoke2(T t) {
                    return other.contains(t);
                }
            }).iterator();
        }
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> minus, Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter(minus, "$this$minus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt.minus.4
            final /* synthetic */ Sequence $elements;
            final /* synthetic */ Sequence $this_minus;

            C04994(Sequence<? extends T> minus2, Sequence elements2) {
                sequence = minus2;
                $captured_local_variable$1 = elements2;
            }

            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                final HashSet other = SequencesKt.toHashSet($captured_local_variable$1);
                if (other.isEmpty()) {
                    return sequence.iterator();
                }
                return SequencesKt.filterNot(sequence, new Functions2<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$4$iterator$1
                    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                    {
                        super(1);
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    @Override // kotlin.jvm.functions.Functions2
                    public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                        return Boolean.valueOf(invoke2((_Sequences7<T>) obj));
                    }

                    /* renamed from: invoke, reason: avoid collision after fix types in other method */
                    public final boolean invoke2(T t) {
                        return other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    private static final <T> Sequence<T> minusElement(Sequence<? extends T> sequence, T t) {
        return SequencesKt.minus(sequence, t);
    }

    public static final <T> Tuples<List<T>, List<T>> partition(Sequence<? extends T> partition, Functions2<? super T, Boolean> predicate) {
        Intrinsics.checkNotNullParameter(partition, "$this$partition");
        Intrinsics.checkNotNullParameter(predicate, "predicate");
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        for (Object element : partition) {
            if (predicate.invoke(element).booleanValue()) {
                first.add(element);
            } else {
                second.add(element);
            }
        }
        return new Tuples<>(first, second);
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> plus, T t) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        return SequencesKt.flatten(SequencesKt.sequenceOf(plus, SequencesKt.sequenceOf(t)));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> plus, T[] elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.plus((Sequence) plus, (Iterable) ArraysKt.asList(elements));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> plus, Iterable<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(plus, CollectionsKt.asSequence(elements)));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> plus, Sequence<? extends T> elements) {
        Intrinsics.checkNotNullParameter(plus, "$this$plus");
        Intrinsics.checkNotNullParameter(elements, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(plus, elements));
    }

    private static final <T> Sequence<T> plusElement(Sequence<? extends T> sequence, T t) {
        return SequencesKt.plus(sequence, t);
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return SequencesKt.windowed(sequence, i, i2, z);
    }

    public static final <T> Sequence<List<T>> windowed(Sequence<? extends T> windowed, int size, int step, boolean partialWindows) {
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        return SlidingWindow3.windowedSequence(windowed, size, step, partialWindows, false);
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int i, int i2, boolean z, Functions2 functions2, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return SequencesKt.windowed(sequence, i, i2, z, functions2);
    }

    public static final <T, R> Sequence<R> windowed(Sequence<? extends T> windowed, int size, int step, boolean partialWindows, Functions2<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(windowed, "$this$windowed");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.map(SlidingWindow3.windowedSequence(windowed, size, step, partialWindows, true), transform);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\n\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\u0010\u0000\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00030\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u00032\u0006\u0010\u0004\u001a\u0002H\u00022\u0006\u0010\u0005\u001a\u0002H\u0003H\n¢\u0006\u0004\b\u0006\u0010\u0007"}, m17d2 = {"<anonymous>", "Lkotlin/Pair;", "T", "R", "t1", "t2", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$zip$1 */
    static final class C05091<R, T> extends Lambda implements Functions13<T, R, Tuples<? extends T, ? extends R>> {
        public static final C05091 INSTANCE = ;

        C05091() {
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // kotlin.jvm.functions.Functions13
        public /* bridge */ /* synthetic */ Object invoke(Object obj, Object obj2) {
            return invoke((C05091<R, T>) obj, obj2);
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Tuples<T, R> invoke(T t, R r) {
            return Tuples3.m24to(t, r);
        }
    }

    public static final <T, R> Sequence<Tuples<T, R>> zip(Sequence<? extends T> zip, Sequence<? extends R> other) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        return new Sequences22(zip, other, C05091.INSTANCE);
    }

    public static final <T, R, V> Sequence<V> zip(Sequence<? extends T> zip, Sequence<? extends R> other, Functions13<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkNotNullParameter(zip, "$this$zip");
        Intrinsics.checkNotNullParameter(other, "other");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return new Sequences22(zip, other, transform);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\n\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\u0010\u0000\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u00022\u0006\u0010\u0003\u001a\u0002H\u00022\u0006\u0010\u0004\u001a\u0002H\u0002H\n¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "Lkotlin/Pair;", "T", "a", "b", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;"}, m18k = 3, m19mv = {1, 4, 0})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1 */
    static final class C05101<T> extends Lambda implements Functions13<T, T, Tuples<? extends T, ? extends T>> {
        public static final C05101 INSTANCE = ;

        C05101() {
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Tuples<T, T> invoke(T t, T t2) {
            return Tuples3.m24to(t, t2);
        }
    }

    public static final <T> Sequence<Tuples<T, T>> zipWithNext(Sequence<? extends T> zipWithNext) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        return SequencesKt.zipWithNext(zipWithNext, C05101.INSTANCE);
    }

    /* compiled from: _Sequences.kt */
    @Metadata(m15bv = {1, 0, 3}, m16d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u0003*\b\u0012\u0004\u0012\u0002H\u00030\u0004H\u008a@¢\u0006\u0004\b\u0005\u0010\u0006"}, m17d2 = {"<anonymous>", "", "T", "R", "Lkotlin/sequences/SequenceScope;", "invoke", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"}, m18k = 3, m19mv = {1, 4, 0})
    @DebugMetadata(m25c = "kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2", m26f = "_Sequences.kt", m27i = {0, 0, 0, 0}, m28l = {2656}, m29m = "invokeSuspend", m30n = {"$this$result", "iterator", "current", "next"}, m31s = {"L$0", "L$1", "L$2", "L$3"})
    /* renamed from: kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 */
    static final class C05112<R> extends ContinuationImpl5 implements Functions13<SequenceBuilder2<? super R>, Continuation<? super Unit>, Object> {
        final /* synthetic */ Sequence $this_zipWithNext;
        final /* synthetic */ Functions13 $transform;
        Object L$0;
        Object L$1;
        Object L$2;
        Object L$3;
        int label;

        /* renamed from: p$ */
        private SequenceBuilder2 f338p$;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C05112(Sequence sequence, Functions13 functions13, Continuation continuation) {
            super(2, continuation);
            this.$this_zipWithNext = sequence;
            this.$transform = functions13;
        }

        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        public final Continuation<Unit> create(Object obj, Continuation<?> completion) {
            Intrinsics.checkNotNullParameter(completion, "completion");
            C05112 c05112 = new C05112(this.$this_zipWithNext, this.$transform, completion);
            c05112.f338p$ = (SequenceBuilder2) obj;
            return c05112;
        }

        @Override // kotlin.jvm.functions.Functions13
        public final Object invoke(Object obj, Continuation<? super Unit> continuation) {
            return ((C05112) create(obj, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:37:0x004e  */
        /* JADX WARN: Removed duplicated region for block: B:42:0x0076  */
        /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:40:0x0069 -> B:41:0x006f). Please report as a decompilation issue!!! */
        @Override // kotlin.coroutines.jvm.internal.ContinuationImpl2
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r10) {
            /*
                r9 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r9.label
                r2 = 1
                if (r1 == 0) goto L2d
                if (r1 != r2) goto L25
                r1 = 0
                r3 = r1
                r4 = r1
                r5 = r1
                java.lang.Object r1 = r9.L$3
                java.lang.Object r4 = r9.L$2
                java.lang.Object r6 = r9.L$1
                r5 = r6
                java.util.Iterator r5 = (java.util.Iterator) r5
                java.lang.Object r6 = r9.L$0
                r3 = r6
                kotlin.sequences.SequenceScope r3 = (kotlin.sequences.SequenceBuilder2) r3
                kotlin.Result2.throwOnFailure(r10)
                r6 = r5
                r5 = r4
                r4 = r3
                r3 = r9
                goto L6f
            L25:
                java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
                java.lang.String r1 = "call to 'resume' before 'invoke' with coroutine"
                r0.<init>(r1)
                throw r0
            L2d:
                kotlin.Result2.throwOnFailure(r10)
                kotlin.sequences.SequenceScope r1 = r9.f338p$
                kotlin.sequences.Sequence r3 = r9.$this_zipWithNext
                java.util.Iterator r3 = r3.iterator()
                boolean r4 = r3.hasNext()
                if (r4 != 0) goto L41
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            L41:
                java.lang.Object r4 = r3.next()
                r5 = r3
                r3 = r1
                r1 = r9
            L48:
                boolean r6 = r5.hasNext()
                if (r6 == 0) goto L76
                java.lang.Object r6 = r5.next()
                kotlin.jvm.functions.Function2 r7 = r1.$transform
                java.lang.Object r7 = r7.invoke(r4, r6)
                r1.L$0 = r3
                r1.L$1 = r5
                r1.L$2 = r4
                r1.L$3 = r6
                r1.label = r2
                java.lang.Object r7 = r3.yield(r7, r1)
                if (r7 != r0) goto L69
                return r0
            L69:
                r8 = r3
                r3 = r1
                r1 = r6
                r6 = r5
                r5 = r4
                r4 = r8
            L6f:
                r5 = r6
                r8 = r4
                r4 = r1
                r1 = r3
                r3 = r8
                goto L48
            L76:
                kotlin.Unit r0 = kotlin.Unit.INSTANCE
                return r0
            */
            throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences._Sequences.C05112.invokeSuspend(java.lang.Object):java.lang.Object");
        }
    }

    public static final <T, R> Sequence<R> zipWithNext(Sequence<? extends T> zipWithNext, Functions13<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkNotNullParameter(zipWithNext, "$this$zipWithNext");
        Intrinsics.checkNotNullParameter(transform, "transform");
        return SequencesKt.sequence(new C05112(zipWithNext, transform, null));
    }

    public static final <T, A extends Appendable> A joinTo(Sequence<? extends T> joinTo, A buffer, CharSequence separator, CharSequence prefix, CharSequence postfix, int limit, CharSequence truncated, Functions2<? super T, ? extends CharSequence> functions2) throws IOException {
        Intrinsics.checkNotNullParameter(joinTo, "$this$joinTo");
        Intrinsics.checkNotNullParameter(buffer, "buffer");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (Object element : joinTo) {
            count++;
            if (count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt.appendElement(buffer, element, functions2);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    public static /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Functions2 functions2, int i2, Object obj) {
        if ((i2 & 1) != 0) {
        }
        if ((i2 & 2) != 0) {
        }
        CharSequence charSequence5 = charSequence2;
        if ((i2 & 4) != 0) {
        }
        CharSequence charSequence6 = charSequence3;
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
        }
        CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            functions2 = (Functions2) null;
        }
        return SequencesKt.joinToString(sequence, charSequence, charSequence5, charSequence6, i3, charSequence7, functions2);
    }

    public static final <T> String joinToString(Sequence<? extends T> joinToString, CharSequence separator, CharSequence prefix, CharSequence postfix, int limit, CharSequence truncated, Functions2<? super T, ? extends CharSequence> functions2) {
        Intrinsics.checkNotNullParameter(joinToString, "$this$joinToString");
        Intrinsics.checkNotNullParameter(separator, "separator");
        Intrinsics.checkNotNullParameter(prefix, "prefix");
        Intrinsics.checkNotNullParameter(postfix, "postfix");
        Intrinsics.checkNotNullParameter(truncated, "truncated");
        String string = ((StringBuilder) SequencesKt.joinTo(joinToString, new StringBuilder(), separator, prefix, postfix, limit, truncated, functions2)).toString();
        Intrinsics.checkNotNullExpressionValue(string, "joinTo(StringBuilder(), …ed, transform).toString()");
        return string;
    }

    public static final <T> Iterable<T> asIterable(Sequence<? extends T> asIterable) {
        Intrinsics.checkNotNullParameter(asIterable, "$this$asIterable");
        return new Iterables12(asIterable);
    }

    /* JADX WARN: Multi-variable type inference failed */
    private static final <T> Sequence<T> asSequence(Sequence<? extends T> sequence) {
        return sequence;
    }

    public static final double averageOfByte(Sequence<Byte> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Byte> it = average.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfShort(Sequence<Short> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Short> it = average.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfInt(Sequence<Integer> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Integer> it = average.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfLong(Sequence<Long> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Long> it = average.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfFloat(Sequence<Float> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Float> it = average.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final double averageOfDouble(Sequence<Double> average) {
        Intrinsics.checkNotNullParameter(average, "$this$average");
        double sum = 0.0d;
        int count = 0;
        Iterator<Double> it = average.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum += element;
            count++;
            if (count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        if (count == 0) {
            return Double.NaN;
        }
        return sum / count;
    }

    public static final int sumOfByte(Sequence<Byte> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Byte> it = sum.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final int sumOfShort(Sequence<Short> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Short> it = sum.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final int sumOfInt(Sequence<Integer> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        int sum2 = 0;
        Iterator<Integer> it = sum.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final long sumOfLong(Sequence<Long> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        long sum2 = 0;
        Iterator<Long> it = sum.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final float sumOfFloat(Sequence<Float> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        float sum2 = 0.0f;
        Iterator<Float> it = sum.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum2 += element;
        }
        return sum2;
    }

    public static final double sumOfDouble(Sequence<Double> sum) {
        Intrinsics.checkNotNullParameter(sum, "$this$sum");
        double sum2 = 0.0d;
        Iterator<Double> it = sum.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum2 += element;
        }
        return sum2;
    }
}
